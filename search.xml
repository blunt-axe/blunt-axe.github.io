<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>「专题选做」简单计数题选做 1</title>
    <url>/2019/12/03/20191203-DLS-Counting-1/</url>
    <content><![CDATA[<h1 id="SetAndSet"><a href="#SetAndSet" class="headerlink" title="SetAndSet"></a>SetAndSet</h1><p><a href="https://vjudge.net/problem/TopCoder-12004" target="_blank" rel="noopener">「Topcoder 12004」SetAndSet</a></p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给 $n$ 个数 $a_1, a_2, \cdots, a_n$，要把它们划分成两个集合，使得两边的 And 一样，问方案数。</p>
<p>数据范围：$n \le 50, 0 \le a_i &lt; 2^{20}$。</p>
<a id="more"></a>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>也就是说对于每一位，如果存在一个数这一位为 $0$，那么这一位为 $0$ 的数不能全在同一边。考虑容斥，每次强制某些位让这一位为 $0$ 的数全在同一边。使用并查集维护即可，直接实现时间复杂度 $O(2^{20} \times 20n)$，容斥用 dfs 实现复杂度为 $O(2^{20} n)$，可以通过（忽略并查集复杂度）。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50</span>, maxm = <span class="number">20</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SetAndSet</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> n, a[maxn + <span class="number">3</span>], fa[maxm + <span class="number">3</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; S[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">bool</span> vis[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> fa[i][x] == x ? x : fa[i][x] = find(i, fa[i][x]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (i == maxm) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				vis[j] = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				vis[find(i, j)] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ll y = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (vis[j]) y &lt;&lt;= <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans += x * (y - <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">memcpy</span>(fa[i + <span class="number">1</span>], fa[i], <span class="keyword">sizeof</span>(fa[i]));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(i + <span class="number">1</span>, x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!S[i].empty()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">memcpy</span>(fa[i + <span class="number">1</span>], fa[i], <span class="keyword">sizeof</span>(fa[i]));</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; S[i].size() - <span class="number">1</span>; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				fa[i + <span class="number">1</span>][find(i + <span class="number">1</span>, S[i][j])] = find(i + <span class="number">1</span>, S[i][j + <span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dfs(i + <span class="number">1</span>, -x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function">ll <span class="title">countandset</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		n = A.size();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[i] = A[i - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; maxm; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (~a[i] &gt;&gt; j &amp; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					S[j].push_back(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			fa[<span class="number">0</span>][i] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(<span class="number">0</span>, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>
<h1 id="Endless-Spin"><a href="#Endless-Spin" class="headerlink" title="Endless Spin"></a>Endless Spin</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4624" target="_blank" rel="noopener">「HDU 4624」Endless Spin</a></p>
<h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>有 $n$ 个格子，每次随机选择一个区间染黑，问全染黑的期望时间。答案保留 $15$ 位小数。</p>
<p>数据范围：$T, n \le 50$。</p>
<h2 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h2><p>我们要求的是 $\max(T_1, T_2, \cdots, T_n)$，其中 $T_i$ 表示第 $i$ 个格子被覆盖的时间。考虑 Min-Max 容斥，计算 $\sum_{S \in [n]} (-1)^{\vert S \vert - 1} \min_{i \in S}(T_i)$。对于某个 $S$，我们要算出经过 $S$ 种某个点的区间个数 $x$，设总区间个数为 $y$，那么它对答案的贡献是容斥系数乘上 $\frac{y}{x}$。带上容斥系数套个 dp 即可，由于精度要求较高可以使用高精度 / int128，时间复杂度 $O(n^4)$。</p>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> __int128 lll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50</span>, maxm = maxn * (maxn + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e18</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll dp[maxn + <span class="number">3</span>][maxm + <span class="number">3</span>], f[maxn + <span class="number">3</span>][maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">lll ans[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x * (x + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxn; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dp[i][func(i - <span class="number">1</span>)] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= func(j - <span class="number">1</span>); k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				dp[i][func(i - j - <span class="number">1</span>) + k] -= dp[j][k];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxn; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= func(j - <span class="number">1</span>); k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				f[i][func(i - j) + k] += dp[j][k];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxn; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= func(i - <span class="number">1</span>); j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans[i] += (lll) f[i][j] * func(i) * inf / (func(i) - j);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> n; T --&gt; <span class="number">0</span>; ) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d.%015lld\n"</span>, (<span class="keyword">int</span>) (ans[n] / inf), ((ll) (ans[n] % inf) + <span class="number">500</span>) / <span class="number">1000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="随机立方体"><a href="#随机立方体" class="headerlink" title="随机立方体"></a>随机立方体</h1><p><a href="https://www.luogu.com.cn/problem/P5400" target="_blank" rel="noopener">「CTS 2019」随机立方体（Luogu 5400）</a></p>
<h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>有 $n \times m \times l$ 的立方体，每个位置有 $[0, 1]$ 范围内随机的实数，一个数是极大的当且仅当它大于任何一个与它某一维坐标相同的数。问恰好有 $k$ 个极大的数的概率。</p>
<p>数据范围：$T \le 10, n, m, l \le 5 \times 10^6, k \le 100$。</p>
<h2 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h2><p>记 $N = \min(n, m, l)$，以及钦定 $i$ 个数极大，其他随便选的概率的和为 $A_i$，那么根据二项式反演，答案等于：</p>
<script type="math/tex; mode=display">
\text{Ans} = \sum_{i = k}^{N} \binom{i}{k} A_i (-1)^{i - k}</script><p>我们考虑 $A_i$ 怎么求。首先从小到大钦定 $i$ 个数，之后我们会得到一棵表示大小关系的树：</p>
<p><img src="/images/20191203-DLS-Counting-1-1.png" alt=""></p>
<p>上图是二维时 $n = 4, m = 3, i = 2$ 的情况，两个极大值分别是 $(1, 1)$ 和 $(2, 2)$，一个格子指向另一个格子表示一个格子大于另一个格子。根据经典结论，概率应该是子树大小的倒数相乘，所以最终的式子是：</p>
<script type="math/tex; mode=display">
\begin {align*}
& A_i = n^{\underline i} m^{\underline i} l^{\underline i} \prod_{j = 1}^{i} \frac{1}{nml - (n - j)(m - j)(l - j)} \\
& \text{Ans} = \sum_{i = k}^{N} \binom{i}{k} A_i (-1)^{i - k} \\
= & \sum_{i = k}^{N} \binom{i}{k} (-1)^{i - k} n^{\underline i} m^{\underline i} l^{\underline i} \prod_{j = 1}^{i} \frac{1}{nml - (n - j)(m - j)(l - j)}
\end {align*}</script><p>直接计算即可，注意要用到线性求逆元，时间复杂度 $O(Tn)$。</p>
<h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e6</span>, mod = <span class="number">998244353</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T, n, m, l, k, N, fact[maxn + <span class="number">3</span>], finv[maxn + <span class="number">3</span>], a[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> c = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="number">1l</span>l * a * a % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = <span class="number">1l</span>l * a * c % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	fact[<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		fact[i] = <span class="number">1l</span>l * fact[i - <span class="number">1</span>] * i % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	finv[n] = qpow(fact[n], mod - <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		finv[i - <span class="number">1</span>] = <span class="number">1l</span>l * finv[i] * i % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">1l</span>l * fact[n] * finv[m] % mod * finv[n - m] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> prod = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		prod = <span class="number">1l</span>l * prod * a[i] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> inv = qpow(prod, mod - <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n, x; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x = a[i], a[i] = inv;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		inv = <span class="number">1l</span>l * inv * x % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	prework(maxn);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (T --&gt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;n, &amp;m, &amp;l, &amp;k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		N = min(n, min(m, l));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[i] = (<span class="number">1l</span>l * n * m % mod * l - <span class="number">1l</span>l * (n - i) * (m - i) % mod * (l - i)) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[i] &lt; <span class="number">0</span> ? a[i] += mod : <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		solve(a, N);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> cur = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			cur = <span class="number">1l</span>l * cur * (n - i + <span class="number">1</span>) % mod * (m - i + <span class="number">1</span>) % mod * (l - i + <span class="number">1</span>) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= N; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			cur = <span class="number">1l</span>l * cur * (n - i + <span class="number">1</span>) % mod * (m - i + <span class="number">1</span>) % mod * (l - i + <span class="number">1</span>) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans = (ans + <span class="number">1l</span>l * C(i, k) * ((i - k) &amp; <span class="number">1</span> ? <span class="number">-1</span> : <span class="number">1</span>) * cur % mod * a[i]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans &lt; <span class="number">0</span> ? ans += mod : <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="Square-Constraints"><a href="#Square-Constraints" class="headerlink" title="Square Constraints"></a>Square Constraints</h1><p><a href="https://agc036.contest.atcoder.jp/tasks/agc036_f" target="_blank" rel="noopener">「AGC 036F」Square Constraints</a></p>
<h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>求有多少个 $0, 1, \cdots, 2n - 1$ 的排列 $p$，满足 $n^2 \le i^2 + p_i^2 \le 4n^2$。</p>
<p>数据范围：$n \le 250$。</p>
<h2 id="思路分析-3"><a href="#思路分析-3" class="headerlink" title="思路分析"></a>思路分析</h2><p>考虑子问题：长度为 $0, 2, \cdots, m - 1$ 的排列 $p$ 有多少个满足 $p_i &lt; a_i$。考虑先把 $a_i$ 从小到大排序，根据乘法原理，方案数就是 $\prod_{i = 0}^{m - 1} (a_i - i)$。</p>
<p>注意到这个做法是基于 $a_i$ 的大小排名的。考虑原题，发现限制的形状如下：</p>
<p><img src="/images/20191203-DLS-Counting-1-2.png" alt=""></p>
<p>阴影部分是 $(i, p_i)$ 可以选的地方，空白部分是不能选的地方。我们考虑容斥，把前 $n$ 个限制拆成 $[\le r_i] - [\le l_i - 1]$。考虑把所有限制分成三类：A 类，B 类和 C 类。我们把所有限制按照高度从小到大排序，得到的序列一定长成这样：$\text{ACACAACACCBBBBB}$。在序列中，我们要选择所有的 C，以及第 $i$ 个 A 和第 $i$ 个 B 中的一个。额外地，每选到一个 A 后，系数就要乘上 $-1$。</p>
<p>考虑 dp 前 $2n$ 个字符，$f(i, j)$ 表示考虑前 $i$ 个字符，A 选了 $j$ 个的方案数。对于一个 A / C，我们容易计算它的排名，但是对于一个 A 对应的 B，我们就不能得到它的排名了。于是，我们考虑事先枚举要用 $k$ 个 A，然后再 dp，这样就可以得到 B 的排名。这样我们就得到了一个时间复杂度为 $O(n^3)$ 的做法。</p>
<h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">500</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, mod, L[maxn + <span class="number">3</span>], R[maxn + <span class="number">3</span>], dp[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; a[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> z = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (z &lt; n * <span class="number">2</span> - <span class="number">1</span> &amp;&amp; (z + <span class="number">1</span>) * (z + <span class="number">1</span>) + x &lt;= y) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		z++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> z;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> A = <span class="number">0</span>, C = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * <span class="number">2</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (~a[i].se) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= A; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = (dp[i + <span class="number">1</span>][j + <span class="number">1</span>] + <span class="number">1l</span>l * dp[i][j] * (a[i].fi - j - C)) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= A; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				dp[i + <span class="number">1</span>][j] = (dp[i + <span class="number">1</span>][j] + <span class="number">1l</span>l * dp[i][j] * (a[i].se - k - n - (A - j))) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			A++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= A; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				dp[i + <span class="number">1</span>][j] = (dp[i + <span class="number">1</span>][j] + <span class="number">1l</span>l * dp[i][j] * (a[i].fi - j - C)) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			C++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> dp[n * <span class="number">2</span>][k];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;mod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a[i] = make_pair(get(i * i, n * n - <span class="number">1</span>) + <span class="number">1</span>, get(i * i, n * n * <span class="number">4</span>) + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; n * <span class="number">2</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a[i] = make_pair(get(i * i, n * n * <span class="number">4</span>) + <span class="number">1</span>, <span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sort(a, a + n * <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans = (ans + <span class="number">1l</span>l * (i &amp; <span class="number">1</span> ? mod - <span class="number">1</span> : <span class="number">1</span>) * solve(i)) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="HamiltonianPaths"><a href="#HamiltonianPaths" class="headerlink" title="HamiltonianPaths"></a>HamiltonianPaths</h1><p><a href="https://vjudge.net/problem/TopCoder-14250" target="_blank" rel="noopener">「Topcoder 14250」HamiltonianPaths</a></p>
<h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个 $n$ 个点的图，把它复制 $k$ 边，然后取补图，问新图的哈密尔顿路径条数，对 $998244353$ 取模。</p>
<p>数据范围：$n \le 14, k \le 5 \times 10^4$。</p>
<h2 id="思路分析-4"><a href="#思路分析-4" class="headerlink" title="思路分析"></a>思路分析</h2><p>也就是说限制整个完全图中不能经过 $km$ 条边。考虑容斥，枚举必须经过 $c$ 条边，那么对答案的贡献就是 $(-1)^c$ 乘上方案数。假设一个子图里经过了 $d$ 条不合法边，组成了 $e$ 条有向的链，那么将链定向后，对答案的贡献就是 $(-1)^d$，也就是说权值为 $(-1)^d$。最后如果缩点后还剩 $f$ 个点，方案数就是 $f!$。所以要算出每个图缩成 $g$ 个点的权值和，然后用 fft 求出大图缩成 $f$ 个点的权值和。一个子图的权值和可以通过简单状压 dp 实现，总时间复杂度 $O(2^n n^2 + 3^n n + kn \log kn)$。</p>
<h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">14</span>, maxk = <span class="number">1</span> &lt;&lt; maxn, maxm = <span class="number">1</span> &lt;&lt; <span class="number">20</span>, mod = <span class="number">998244353</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HamiltonianPaths</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">bool</span> a[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> n, k, dp[maxk + <span class="number">3</span>][maxn + <span class="number">3</span>], cnt[maxk + <span class="number">3</span>], f[maxk + <span class="number">3</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> g[maxm + <span class="number">3</span>], h[maxm + <span class="number">3</span>], g_n, h_n, lim, bit, rev[maxm + <span class="number">3</span>], A[maxm + <span class="number">3</span>], B[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> x &lt; mod ? x : x - mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		b &lt; <span class="number">0</span> ? b += mod - <span class="number">1</span> : <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> c = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="number">1l</span>l * a * a % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = <span class="number">1l</span>l * a * c % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dft</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n, <span class="keyword">int</span> type)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (i &lt; rev[i]) swap(a[i], a[rev[i]]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n; k &lt;&lt;= <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> x = qpow(<span class="number">3</span>, (mod - <span class="number">1</span>) / (k &lt;&lt; <span class="number">1</span>) * type);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += k &lt;&lt; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> y = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + k; j++, y = <span class="number">1l</span>l * x * y % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">int</span> p = a[j], q = <span class="number">1l</span>l * a[j + k] * y % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					a[j] = func(p + q), a[j + k] = func(p - q + mod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (type == <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> x = qpow(n, mod - <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				a[i] = <span class="number">1l</span>l * a[i] * x % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> &amp;n, <span class="keyword">int</span> b[], <span class="keyword">int</span> m)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (lim = <span class="number">1</span>, bit = <span class="number">0</span>; lim &lt;= n + m; lim &lt;&lt;= <span class="number">1</span>) bit++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; lim; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			A[i] = a[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			B[i] = b[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		fill(A + n + <span class="number">1</span>, A + lim, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		fill(B + m + <span class="number">1</span>, B + lim, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dft(A, lim, <span class="number">1</span>), dft(B, lim, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			A[i] = <span class="number">1l</span>l * A[i] * B[i] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dft(A, lim, <span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		n += m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[i] = A[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">countPaths</span><span class="params">(<span class="keyword">int</span> N, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; B, <span class="keyword">int</span> K)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		n = N, k = K;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[A[i] + <span class="number">1</span>][B[i] + <span class="number">1</span>] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[B[i] + <span class="number">1</span>][A[i] + <span class="number">1</span>] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dp[<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>)][i] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> msk = <span class="number">1</span>; msk &lt; <span class="number">1</span> &lt;&lt; n; msk++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (dp[msk][i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="keyword">if</span> (a[i][j] &amp;&amp; (~msk &gt;&gt; (j - <span class="number">1</span>) &amp; <span class="number">1</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					dp[msk | (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j] = func(dp[msk | (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j] - dp[msk][i] + mod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (dp[msk][i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				cnt[msk] = func(cnt[msk] + dp[msk][i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> msk = <span class="number">1</span>; msk &lt; <span class="number">1</span> &lt;&lt; n; msk++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> p = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (msk &gt;&gt; (i - <span class="number">1</span>) &amp; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					p = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> t = msk ^ (<span class="number">1</span> &lt;&lt; (p - <span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				f[msk][k + <span class="number">1</span>] = f[t][k];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = t; i; i = (i - <span class="number">1</span>) &amp; t) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					f[msk][k + <span class="number">1</span>] = (f[msk][k + <span class="number">1</span>] + <span class="number">1l</span>l * cnt[i | (<span class="number">1</span> &lt;&lt; (p - <span class="number">1</span>))] * f[msk ^ (i | <span class="number">1</span> &lt;&lt; (p - <span class="number">1</span>))][k]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			g[i] = f[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		h[<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> g_n = n, h_n = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = k; i; i &gt;&gt;= <span class="number">1</span>, mult(g, g_n, g, g_n)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (i &amp; <span class="number">1</span>) mult(h, h_n, g, g_n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> cur = <span class="number">1</span>, ret = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			cur = <span class="number">1l</span>l * cur * i % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ret = (ret + <span class="number">1l</span>l * h[i] * cur) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>动态规划</tag>
        <tag>组合计数</tag>
        <tag>容斥原理</tag>
        <tag>并查集</tag>
        <tag>专题选做</tag>
      </tags>
  </entry>
  <entry>
    <title>「专题选做」博弈论题目选做 1</title>
    <url>/2019/12/02/20191202-Game-Theory-1/</url>
    <content><![CDATA[<h1 id="Candy-Piles"><a href="#Candy-Piles" class="headerlink" title="Candy Piles"></a>Candy Piles</h1><p><a href="https://agc002.contest.atcoder.jp/tasks/agc002_e" target="_blank" rel="noopener">「AGC 002E」Candy Piles</a></p>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>有 $n$ 个数，两人玩游戏，每次可以取最大的变 $0$ 或把所有的非零数减 $1$，把全部的数变 $0$ 的人会输，问是否先手必胜。</p>
<p>数据范围：$n \le 10^5$。</p>
<a id="more"></a>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>首先发现操作方法是对偶的，可以搞出一个二维 dp，打表发现对角线上的数是一样的，所以我们可以找到和 $(n, a[n])$ 同对角线的 $x$ 坐标最小的点算出 dp 值。时间复杂度 $O(n)$。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, a[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> x = n, y = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (x &gt; <span class="number">1</span> &amp;&amp; y + <span class="number">1</span> &lt;= a[x - <span class="number">1</span>]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x--, y++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (y &gt; a[x - <span class="number">1</span>]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">puts</span>((a[x] - y) &amp; <span class="number">1</span> ? <span class="string">"First"</span> : <span class="string">"Second"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> p = (a[x] - y - <span class="number">1</span>) &amp; <span class="number">1</span>, z = x - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (z &gt; <span class="number">1</span> &amp;&amp; a[z - <span class="number">1</span>] == a[z]) z--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> q = (x - <span class="number">1</span> - z) &amp; <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">puts</span>(p &amp;&amp; q ? <span class="string">"Second"</span> : <span class="string">"First"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="Paper-strip-Game"><a href="#Paper-strip-Game" class="headerlink" title="Paper-strip Game"></a>Paper-strip Game</h1><p><a href="https://projecteuler.net/problem=306" target="_blank" rel="noopener">「PE 306」Paper-strip Game</a></p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有长度为 $n$ 的纸带，两个人轮流操作，每次选相邻的两个白格染黑，不能操作者输。问对于所有 $n \le 10^6$ 的情况有多少种是先手必胜的。</p>
<h2 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h2><p>容易想到 $O(n^2)$ 算法，打表发现有循环节，直接计算即可。答案为 $852938$。</p>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打表代码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, sg[maxn + <span class="number">3</span>], m, a[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sg[<span class="number">0</span>] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		m = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i - <span class="number">2</span>; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[m++] = sg[j] ^ sg[i - <span class="number">2</span> - j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		sort(a , a + m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		m = unique(a, a + m) - a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a[m] = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (a[j] != j) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				sg[i] = j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">putchar</span>(sg[i] ^ <span class="string">'0'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">puts</span>(<span class="string">""</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="Combat-on-a-Tree"><a href="#Combat-on-a-Tree" class="headerlink" title="Combat on a Tree"></a>Combat on a Tree</h1><p><a href="https://www.spoj.com/problems/COT3/" target="_blank" rel="noopener">「SPOJ COT3」Combat on a Tree</a></p>
<h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一棵 $n$ 个点的树，每个点有黑白两种颜色。两个人玩游戏，每次可以选一个白点并把它和它的祖先全部变黑，不能操作的人输。问先手是否必胜以及先手必胜时第一步可以选哪些点。</p>
<p>数据范围：$n \le 10^5$。</p>
<h2 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h2><p>选一个点并染黑祖先可以看作把这个点到根的路径删除，分裂出若干个子问题。我们考虑对于每棵子树算出 sg 值，容易得到一个 $O(n^2)$ 的算法。考虑用 01-Trie 维护，我们只要支持单点加入，整体异或以及 Trie 合并，所以时间复杂度 $O(n \log n)$。</p>
<h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>, maxk = maxn * <span class="number">2</span>, logn = <span class="number">16</span>, maxm = maxn * (logn + <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, col[maxn + <span class="number">3</span>], dp[maxn + <span class="number">3</span>], f[maxn + <span class="number">3</span>], g[maxn + <span class="number">3</span>], rt[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> tot, val[maxm + <span class="number">3</span>], ch[maxm + <span class="number">3</span>][logn + <span class="number">3</span>], tag[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> cnt, ter[maxk + <span class="number">3</span>], nxt[maxk + <span class="number">3</span>], lnk[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> full[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ter[++cnt] = v, nxt[cnt] = lnk[u], lnk[u] = cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls ch[x][0]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs ch[x][1]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (val[x] == <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	full[x] = full[ls] &amp;&amp; full[rs];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (val[x] == <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (tag[x] &gt;&gt; val[x] &amp; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		swap(ls, rs);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tag[x] ^= <span class="number">1</span> &lt;&lt; val[x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	tag[ls] ^= tag[x], tag[rs] ^= tag[x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	tag[x] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tag[x] ^= y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">new_node</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ret, x = ret = ++tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = logn; ~i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		val[x] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ls = ++tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x = ls;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	val[x] = <span class="number">-1</span>, full[x] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (!x || !y) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> x + y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	push_down(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	push_down(y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ls = merge(ch[x][<span class="number">0</span>], ch[y][<span class="number">0</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	rs = merge(ch[x][<span class="number">1</span>], ch[y][<span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	maintain(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mex</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (!x || val[x] == <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (full[x]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="number">1</span> &lt;&lt; (val[x] + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	push_down(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (!full[ls]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> mex(ls);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> mex(rs) | <span class="number">1</span> &lt;&lt; val[x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = lnk[u], v; i; i = nxt[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = ter[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[v] ^= dp[v];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		modify(rt[v], dp[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		rt[u] = merge(rt[u], rt[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[u] ^= dp[v];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (!col[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		rt[u] = merge(rt[u], new_node());</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	modify(rt[u], f[u]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dp[u] = mex(rt[u]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	g[u] ^= f[u];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = lnk[u], v; i; i = nxt[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = ter[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		g[v] ^= g[u];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		solve(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;col[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		add(u, v), add(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (!dp[<span class="number">1</span>]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		solve(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (!col[i] &amp;&amp; !g[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="Fox-and-Card-Game"><a href="#Fox-and-Card-Game" class="headerlink" title="Fox and Card Game"></a>Fox and Card Game</h1><p><a href="http://codeforces.com/contest/388/problem/C" target="_blank" rel="noopener">「Codeforces 388C」Fox and Card Game</a></p>
<h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>$n$ 堆卡片，第 $i$ 堆有 $m_i$ 张，每张上有一个数。两人轮流取卡片，先手可以取堆顶，后手可以取堆底，每个人都想最大化自己拿到卡片的和，问先手最后拿到卡片的和。</p>
<p>数据范围：$n, m_i \le 100$。</p>
<h2 id="思路分析-3"><a href="#思路分析-3" class="headerlink" title="思路分析"></a>思路分析</h2><p>考虑 $m_i = 1$ 的情况，肯定是从大到小排序后先手取奇数位后手取偶数位。接下来考虑所有情况，发现先手可以每一堆取至少前 $\lfloor \frac{m_i}{2} \rfloor$ 个，后手可以通过模仿先手来保证自己取至少后 $\lfloor \frac{m_i}{2} \rfloor$ 个。如果 $m_i$ 是奇数的话还会剩下中间的一个，就转化成了 $m_i = 1$ 的情况。排序即可，时间复杂度 $O(nm)$。</p>
<h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, a[maxn + <span class="number">3</span>], k, b[maxn + <span class="number">3</span>], sum, num;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			sum += a[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (j * <span class="number">2</span> &lt;= m) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				num += a[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (m &amp; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			b[++k] = a[(m + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sort(b + <span class="number">1</span>, b + k + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	reverse(b + <span class="number">1</span>, b + k + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i += <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		num += b[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, num, sum - num);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="Tree-Game"><a href="#Tree-Game" class="headerlink" title="Tree Game"></a>Tree Game</h1><p><a href="https://agc010.contest.atcoder.jp/tasks/agc010_f" target="_blank" rel="noopener">「AGC 010F」Tree Game</a></p>
<h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>一个 $n$ 个点的树，第 $i$ 个点上有 $a_i$ 颗石子，一开始 $k$ 号点上有旗子。两人博弈，每次一个人拿掉旗子所在点的一个石子，然后把旗子移到某个邻居，不能操作者输。求出所有先手必胜的 $k$。</p>
<p>数据范围：$n \le 3000$。</p>
<h2 id="思路分析-4"><a href="#思路分析-4" class="headerlink" title="思路分析"></a>思路分析</h2><p>对于某个 $k$，考虑以它为根后每个子树的子问题。也就是说，$f(u)$ 表示割掉 $u$ 和父亲的边后，旗子一开始在点 $u$ 是否先手必胜。我们断言：</p>
<ul>
<li>如果存在儿子 $v$ 满足 $a_u &gt; a_v$ 并且 $f(v)$ 是必败态，那么 $f(u)$ 是必胜态。</li>
<li>否则，$f(u)$ 是必败态。</li>
</ul>
<p>证明留作习题。直接做即可，时间复杂度 $O(n^2)$。</p>
<h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3000</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, a[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		flag |= a[u] &gt; a[v] &amp;&amp; !dfs(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> flag;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		G[u].push_back(v), G[v].push_back(u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (dfs(i)) <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">puts</span>(<span class="string">""</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="Choosing-Carrots"><a href="#Choosing-Carrots" class="headerlink" title="Choosing Carrots"></a>Choosing Carrots</h1><p><a href="https://codeforces.com/contest/794/problem/E" target="_blank" rel="noopener">「Codeforces 794E」Choosing Carrots</a></p>
<h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>有 $n$ 个数 $a_1, a_2, \cdots, a_n$，两人博弈，每次去掉两头的一个数，最后剩下一个数。先手想最大化剩余数，后手想最小化剩余数。问对于每个 $k$，先手一开始随便删掉 $k$ 个数后再开始博弈，最后剩余的数是多少。</p>
<p>数据范围：$n \le 3 \times 10^5$。</p>
<h2 id="思路分析-5"><a href="#思路分析-5" class="headerlink" title="思路分析"></a>思路分析</h2><p>先不考虑 $k$，$n$ 为偶数时显然答案是 $\max(a_{\frac{n}{2}}, a_{\frac{n}{2} + 1})$，$n$ 为奇数时答案就是：</p>
<script type="math/tex; mode=display">
\begin {align*}
& \max(\min(a_\frac{n - 1}{2}, a_\frac{n + 1}{2}), \min(a_\frac{n + 1}{2}, a_\frac{n + 3}{2})) \\
= & \min(a_\frac{n + 1}{2}, \max(a_\frac{n - 1}{2}, a_\frac{n + 3}{2}))
\end {align*}</script><p>然后考虑 $k$，分奇偶性讨论，对于每个值考虑它带来的影响。它肯定是对答案数组有一个后缀的更新，所以单点更新完再做前缀最大值即可，时间复杂度 $O(n)$。</p>
<h2 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span>, inf = <span class="number">1e9</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, mx, a[maxn + <span class="number">3</span>], f[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	x = max(x, y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		mx = max(mx, a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		upd(f[min(i - <span class="number">1</span>, n - i) * <span class="number">2</span> + <span class="number">1</span>], min(a[i], max(a[i - <span class="number">1</span>], a[i + <span class="number">1</span>])));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		upd(f[min(i, n - i) * <span class="number">2</span>], max(a[i], a[i + <span class="number">1</span>]));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">2</span>; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		upd(f[i], f[i + <span class="number">2</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">2</span>; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>, f[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, mx);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>动态规划</tag>
        <tag>字典树</tag>
        <tag>博弈论</tag>
        <tag>专题选做</tag>
      </tags>
  </entry>
  <entry>
    <title>「集训队作业」IOI 2020 集训队作业小结 3</title>
    <url>/2019/11/30/20191130-IOI2020-Homework-3/</url>
    <content><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>本文包括 IOI 2020 集训队作业 19 ~ 24 题的题解。下面是题单：</p>
<ul>
<li><a href="https://agc026.contest.atcoder.jp/tasks/agc026_f" target="_blank" rel="noopener">19.「AGC 026F」Manju Game</a></li>
<li><a href="https://agc027.contest.atcoder.jp/tasks/agc027_d" target="_blank" rel="noopener">20.「AGC 027D」Modulo Matrix</a></li>
<li><a href="https://agc027.contest.atcoder.jp/tasks/agc027_e" target="_blank" rel="noopener">21.「AGC 027E」ABBreviate</a></li>
<li><a href="https://agc027.contest.atcoder.jp/tasks/agc027_f" target="_blank" rel="noopener">22.「AGC 027F」Grafting</a></li>
<li><a href="https://agc028.contest.atcoder.jp/tasks/agc028_c" target="_blank" rel="noopener">23.「AGC 028C」Min Cost Cycle</a></li>
<li><a href="https://agc028.contest.atcoder.jp/tasks/agc028_d" target="_blank" rel="noopener">24.「AGC 028D」Chords</a></li>
</ul>
<a id="more"></a>
<h1 id="Manju-Game"><a href="#Manju-Game" class="headerlink" title="Manju Game"></a>Manju Game</h1><p>记奇数格的和是 $A$，偶数格的和是 $B$。发现 $n$ 为偶数时，先手取 $\text{max}(A, B)$ 时后手总能保证自己有 $\min(A, B)$，直接输出答案即可。$n$ 为奇数时，先手取 $A$ 时后手总能保证自己有 $B$，问题在于先手取偶数格时该怎么办。考虑把先手的策略写成一棵二叉树，当到达一个状态先手决定取 $A$ 时它就是叶子结点，否则先手会选择一个偶数格，并把问题分成两个子问题（作为左右儿子），然后走左儿子还是右儿子是后手选择的。用二叉树的每个点把序列分段，先手的答案就是全部的 $B$ 加上某一段的 $A - B$，而这一段是后手决定的。问题转化成了把原序列去除若干个奇数格，分出来的所有段 $A - B$ 的最小值最大。二分答案，dp 求出是否存在一种方案每一段的和都 $\ge x$。暴力做是 $O(n^2)$ 的，但是发现只会从前缀和最小的点转移过来，就优化成 $O(n)$ 了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span>, inf = <span class="number">3e8</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, a[maxn + <span class="number">3</span>], b[maxn + <span class="number">3</span>], w[maxn + <span class="number">3</span>], s[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> dp[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> mn = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i += <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (s[i] - mn &gt;= x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dp[i] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mn = min(mn, s[i + <span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dp[i] = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> dp[n];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		b[i] = b[i - <span class="number">1</span>], w[i] = w[i - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		i &amp; <span class="number">1</span> ? b[i] += a[i] : w[i] += a[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		s[i] = b[i] - w[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (~n &amp; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, max(b[n], w[n]), min(b[n], w[n]));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> l = -inf, r = inf, mid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (l &lt; r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mid = ((l + r + inf * <span class="number">2</span> + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) - inf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (check(mid)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				l = mid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				r = mid - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = max(w[n] + l, b[n]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, x, b[n] + w[n] - x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="Modulo-Matrix"><a href="#Modulo-Matrix" class="headerlink" title="Modulo Matrix"></a>Modulo Matrix</h1><p>对于所有 $x + y$ 是偶数的格子根据 $x + y$ 分配一个素数，再根据 $x - y + 3n$ 分配一个素数（这样保证素数互不相同），然后该格子中最终的数就是两个素数乘起来。对于所有 $x + y$ 是奇数的格子分配所有相邻格子的最小公倍数 $+ 1$ 即可，注意特判 $n = 2$。时间复杂度 $O(n^2)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">500</span>, dx[] = &#123; <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, dy[] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span> &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, c[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], d[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], num[maxn &lt;&lt; <span class="number">2</span> | <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll a[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> b[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> b ? gcd(b, a % b) : a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">lcm</span><span class="params">(ll a, ll b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (!a || !b) <span class="keyword">return</span> a + b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> a / gcd(a, b) * b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= x; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (x % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">valid</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= n &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			b[i][j] = ~(i + j) &amp; <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> cur = <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (b[i][j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (!num[i + j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">while</span> (!is_prime(cur)) cur++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					num[i + j] = cur++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				c[i][j] = num[i + j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (b[i][j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (!num[i - j + n * <span class="number">3</span>]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">while</span> (!is_prime(cur)) cur++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					num[i - j + n * <span class="number">3</span>] = cur++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				d[i][j] = num[i - j + n * <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (b[i][j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				a[i][j] = c[i][j] * d[i][j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (!b[i][j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">if</span> (valid(i + dx[k], j + dy[k])) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						a[i][j] = lcm(a[i][j], a[i + dx[k]][j + dy[k]]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				a[i][j]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">puts</span>(<span class="string">"4 7"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">puts</span>(<span class="string">"23 10"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	work(n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">printf</span>(<span class="string">"%lld%c"</span>, a[i][j], <span class="string">" \n"</span>[j == n]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="ABBreviate"><a href="#ABBreviate" class="headerlink" title="ABBreviate"></a>ABBreviate</h1><p>将 $\text{a}$ 看成 $1$，$\text{b}$ 看成 $2$，一个字符串 $S$ 能缩成字符 $c$ 的条件是 $S$ 的和模 $3$ 同余于 $c$，并且 $\vert S \vert = 1$ 或者 $S$ 中存在两个相邻字符相同。首先，如果 $S = \text{ababab}\cdots$，那么答案为 $1$。对于其他 $S$，考虑它是否可以缩成串 $T$。对于 $T$ 的每一位，我们贪心的找到 $S$ 最短的一个前缀同余于 $T_i$，然后删去 $S$ 的那个前缀，最后会剩下一段 $S$ 的后缀，我们要求这段的和为 $0$。注意这是充要条件，如果最后一个串可以和剩余串合并，那么就并上去；否则最后一个串 + 剩余串一定是 $\text{a + bababa}\cdots$ 或者 $\text{b + ababab}\cdots$。我们找到之前的第一组两个相同的相邻位，然后把它向后合并剩余串长度次，这样就相当于把 $\text{ababab}\cdots$ 左移了剩余串长度次，就把剩余串消掉了。根据这个充要条件，我们就可以简单 dp 了，时间复杂度 $O(n)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, a[maxn + <span class="number">3</span>], pos[maxn + <span class="number">3</span>][<span class="number">3</span>], dp[maxn + <span class="number">3</span>], lst[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> s[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	x += y, x &lt; mod ? <span class="number">0</span> : x -= mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		flag &amp;= s[i] != s[i + <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (flag) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">puts</span>(<span class="string">"1"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a[i] = s[i] == <span class="string">'a'</span> ? <span class="number">1</span> : <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a[i] = (a[i] + a[i - <span class="number">1</span>]) % <span class="number">3</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		lst[a[i]] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2</span>; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			pos[i][j] = lst[(a[i - <span class="number">1</span>] + j) % <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dp[<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2</span>; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (pos[i + <span class="number">1</span>][j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				upd(dp[pos[i + <span class="number">1</span>][j]], dp[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> ((a[n] - a[i] + <span class="number">3</span>) % <span class="number">3</span> == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			upd(ans, dp[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="Grafting"><a href="#Grafting" class="headerlink" title="Grafting"></a>Grafting</h1><p>首先枚举一个点假设它不会动，把它作为根，求出两个树的交。两棵树在交中的点不用动，A 树中其他的点都要动到 B 树中其他的点处。对于 A 树中的一对都要动的父子，儿子肯定比父亲先动；对于 B 树中的一对都要加入的父子，父亲肯定比儿子先加上。判断先后关系是否有环即可。可是有一种特殊情况，就是所有点都会动：</p>
<p><img src="/images/20191130-IOI2020-Homework-3-1.png" alt=""></p>
<p>上图中是一个例子。于是我们还要枚举第一次移动了哪个叶子，移动到了哪里。之后这个叶子就不会动了，我们钦定这个叶子为根即可。时间复杂度 $O(n^3)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clear(x) memset(x, 0, sizeof(x))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T, n, a[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], b[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], c[maxn + <span class="number">3</span>], d[maxn + <span class="number">3</span>], deg[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	G[u].push_back(v), deg[v]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	vis[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1</span>; v &lt;= n; v++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (a[u][v] &amp;&amp; b[u][v] &amp;&amp; !vis[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dfs(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1</span>; v &lt;= n; v++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (a[u][v] &amp;&amp; v != pa) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (!vis[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dfs_1(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1</span>; v &lt;= n; v++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b[u][v] &amp;&amp; v != pa) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (!vis[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add(u, v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dfs_2(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!deg[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			Q.push(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (!Q.empty()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> u = Q.front();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		Q.pop(), cnt++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (!--deg[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				Q.push(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> cnt == n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	clear(vis);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs(u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;().swap(G[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	clear(deg);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs_1(u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs_2(u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (!check()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cnt += vis[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (T --&gt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		clear(a), clear(b), clear(c), clear(d);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[u][v] = a[v][u] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			c[u]++, c[v]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			b[u][v] = b[v][u] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			d[u]++, d[v]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> ans = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans = max(ans, solve(i));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (c[i] == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="keyword">if</span> (a[i][j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				a[i][j] = a[j][i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) <span class="keyword">if</span> (k != i &amp;&amp; k != j) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					a[i][k] = a[k][i] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					ans = max(ans, solve(i) - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">					a[i][k] = a[k][i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				a[i][j] = a[j][i] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans == <span class="number">-1</span> ? <span class="number">-1</span> : n - ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="Min-Cost-Cycle"><a href="#Min-Cost-Cycle" class="headerlink" title="Min Cost Cycle"></a>Min Cost Cycle</h1><p>首先我们可以把 min 看作随便选择 $A_i, B_j$ 中的一个。对于一个环的方案，我们把对答案贡献为 $A_ix + B_iy$ 的点称为 $(x, y)$。如果不存在 $(0, 0)$，那么只能是全部 $(0, 1)$ 或全部 $(1, 0)$；如果存在 $(0, 0)$，肯定存在相同数量的 $(1, 1)$，可以构造方案：</p>
<script type="math/tex; mode=display">(0, 0), (1, 1), (0, 0), \cdots, (1, 1), (0, 0), (1, 0), (1, 0), \cdots, (1, 0), (1, 1), (0, 1), (0, 1) \cdots, (0, 1)</script><p>那么我们枚举 $i$，钦定 $i$ 是 $(1, 1)$，剩下的点从其他的所有数里选 $n - 2$ 个最小的出来即可。时间复杂度 $O(n \log n)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, a[maxn + <span class="number">3</span>], b[maxn + <span class="number">3</span>], p[maxn + <span class="number">3</span>][<span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll sum[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> id, type, val;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;a, <span class="keyword">const</span> node &amp;b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> a.val &lt; b.val;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; x[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a[i], &amp;b[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x[++m].id = i, x[m].type = <span class="number">1</span>, x[m].val = a[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x[++m].id = i, x[m].type = <span class="number">2</span>, x[m].val = b[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll A = <span class="number">0</span>, B = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		A += a[i], B += b[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll ans = min(A, B);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sort(x + <span class="number">1</span>, x + m + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		p[x[i].id][x[i].type] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		sum[i] = sum[i - <span class="number">1</span>] + x[i].val;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> l = p[i][<span class="number">1</span>], r = p[i][<span class="number">2</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (l &gt; r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			swap(l, r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (l - <span class="number">1</span> &gt;= n - <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans = min(ans, sum[n - <span class="number">2</span>] + x[l].val + x[r].val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (r - <span class="number">2</span> &gt;= n - <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans = min(ans, sum[n - <span class="number">1</span>] + x[r].val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans = min(ans, sum[n]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="Chords"><a href="#Chords" class="headerlink" title="Chords"></a>Chords</h1><p>先考虑计算 $n$ 个点随便连的方案数 $g(n)$，发现 $g(2n - 1) = 0$，$g(2n) = (2n - 1)!!$。令 $f(i, j)$ 表示一个联通块点编号最小值为 $i$ 最大值为 $j$ 的方案数，那么有：</p>
<script type="math/tex; mode=display">
f(i, j) = g(c(i, j)) - \sum_{k = i + 1}^{j - 1} f(i, k) \times g(c(k + 1, j))</script><p>$c(i, j)$ 表示 $[i, j]$ 中有多少点没被选。值得注意的是如果一个区间满足有一段弧一端在区间内部，另一端在区间外部，$f(i, j)$ 必须等于 $0$。计算答案时直接把每个 $f(i, j)$ 乘上 $g(2(n - k) - c(i, j))$ 累加即可。时间复杂度 $O(n^3)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">600</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, k, a[maxn + <span class="number">3</span>], b[maxn + <span class="number">3</span>], g[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], cnt[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> val[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x &gt;= l &amp;&amp; x &lt;= r;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a[i], &amp;b[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	g[<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		g[i] = i &amp; <span class="number">1</span> ? <span class="number">0</span> : <span class="number">1l</span>l * g[i - <span class="number">2</span>] * (i - <span class="number">1</span>) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n * <span class="number">2</span>; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			val[i][j] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= k; t++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (in(a[t], i, j) ^ in(b[t], i, j)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					val[i][j] = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (val[i][j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= k; t++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					cnt[i][j] += in(a[t], i, j) + in(b[t], i, j);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">2</span>; d &lt;= n * <span class="number">2</span>; d += <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = d; j &lt;= n * <span class="number">2</span>; i++, j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (!val[i][j]) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dp[i][j] = g[d - cnt[i][j]];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; j; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				dp[i][j] = (dp[i][j] + <span class="number">1l</span>l * (mod - dp[i][k]) * g[j - k - cnt[k + <span class="number">1</span>][j]]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans = (ans + <span class="number">1l</span>l * dp[i][j] * g[(n - k) * <span class="number">2</span> - (d - cnt[i][j])]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>动态规划</tag>
        <tag>构造</tag>
        <tag>博弈论</tag>
        <tag>集训队作业</tag>
      </tags>
  </entry>
  <entry>
    <title>「集训队作业」IOI 2020 集训队作业小结 2</title>
    <url>/2019/11/29/20191129-IOI2020-Homework-2/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文包括 IOI 2020 集训队作业 13 ~ 18 题的题解。下面是题单：</p>
<ul>
<li><a href="https://atcoder.jp/contests/agc024/tasks/agc024_f" target="_blank" rel="noopener">13.「AGC 024F」Simple Subsequence Problem</a></li>
<li><a href="https://atcoder.jp/contests/agc025/tasks/agc025_d" target="_blank" rel="noopener">14.「AGC 025D」Choosing Points</a></li>
<li><a href="https://atcoder.jp/contests/agc025/tasks/agc025_e" target="_blank" rel="noopener">15.「AGC 025E」Walking on a Tree</a></li>
<li><a href="https://atcoder.jp/contests/agc025/tasks/agc025_f" target="_blank" rel="noopener">16.「AGC 025F」Addition and Andition</a></li>
<li><a href="https://atcoder.jp/contests/agc026/tasks/agc026_d" target="_blank" rel="noopener">17.「AGC 026D」Histogram Coloring</a></li>
<li><a href="https://atcoder.jp/contests/agc026/tasks/agc026_e" target="_blank" rel="noopener">18.「AGC 026D」Synchronized Subsequence</a></li>
</ul>
<a id="more"></a>
<h1 id="Simple-Subsequence-Problem"><a href="#Simple-Subsequence-Problem" class="headerlink" title="Simple Subsequence Problem"></a>Simple Subsequence Problem</h1><p>考虑算出每个串是多少串的子序列。设状态 $f(S | T)$ 表示母串还剩 $S$，当前子序列为 $T$ 的方案数，转移时取 $S$ 中第一个 0/1 加到 $T$ 后面并删掉 $S$ 中该字符前面的东西即可。时间复杂度 $O(2^n n)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">21</span>, maxm = <span class="number">1</span> &lt;&lt; maxn;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, k, dp[maxn + <span class="number">3</span>][maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> s[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; i; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dp[i][<span class="number">1</span> &lt;&lt; i | j] = s[j] ^ <span class="string">'0'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> b = <span class="number">1</span> &lt;&lt; j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; b; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> x = dp[i][k | b], p = <span class="number">-1</span>, q = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> t = i; t; t--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">if</span> (~k &gt;&gt; (t - <span class="number">1</span>) &amp; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						p = t;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> t = i; t; t--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">if</span> (k &gt;&gt; (t - <span class="number">1</span>) &amp; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						q = t;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				dp[<span class="number">0</span>][(k | b) &gt;&gt; i] += x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (p != <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					dp[p - <span class="number">1</span>][(k &amp; ((<span class="number">1</span> &lt;&lt; (p - <span class="number">1</span>)) - <span class="number">1</span>)) | (((k &gt;&gt; i) &lt;&lt; <span class="number">1</span> | <span class="number">0</span>) &lt;&lt; (p - <span class="number">1</span>)) | (b &gt;&gt; (i - p))] += x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (q != <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					dp[q - <span class="number">1</span>][(k &amp; ((<span class="number">1</span> &lt;&lt; (q - <span class="number">1</span>)) - <span class="number">1</span>)) | (((k &gt;&gt; i) &lt;&lt; <span class="number">1</span> | <span class="number">1</span>) &lt;&lt; (q - <span class="number">1</span>)) | (b &gt;&gt; (i - q))] += x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">0</span>; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span> &lt;&lt; i; j &lt; <span class="number">1</span> &lt;&lt; (i + <span class="number">1</span>); j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (dp[<span class="number">0</span>][j] &gt;= k) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> t = i - <span class="number">1</span>; t &gt;= <span class="number">0</span>; t--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="built_in">printf</span>(<span class="string">"%d"</span>, j &gt;&gt; t &amp; <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="built_in">puts</span>(<span class="string">""</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="Choosing-Points"><a href="#Choosing-Points" class="headerlink" title="Choosing Points"></a>Choosing Points</h1><p>相当于给两个图，求一个点集是两个图的独立集。考虑只有一个图的情况：如果 $D$ 是奇数，那么黑白染色可发现图是二分图；如果 $D$ 是偶数，我们黑白染色后发现黑色和白色之间没有边，对于一种颜色，我们把坐标轴旋转 45 度后缩放 $\sqrt 2$ 倍就转化成了一个 $D’ = \frac{D}{2}$ 的子问题，归纳可证图是二分图。这样，对于每个二分图分别染色，每个格子就会有一个颜色的 pair，根据抽屉原理肯定有解。朴素实现时间复杂度为 $O(n^3)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">600</span>, maxm = maxn * maxn;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, tot, id[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], row[maxm + <span class="number">3</span>], col[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x, y, num[maxm + <span class="number">3</span>], res[maxm + <span class="number">3</span>], cnt[<span class="number">5</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	G[u].push_back(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	vis[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		num[v] = num[u] ^ <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		vis[i] = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;().swap(G[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; n * <span class="number">2</span>; a++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; n * <span class="number">2</span>; b++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (a * a + b * b == x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * <span class="number">2</span> - a; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n * <span class="number">2</span> - b; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						add(id[i][j], id[i + a][j + b]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">						add(id[i + a][j + b], id[i][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">						add(id[i][j + b], id[i + a][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">						add(id[i + a][j], id[i][j + b]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	num[<span class="number">1</span>] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!vis[i]) dfs(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		res[i] |= num[i] &lt;&lt; y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;x, &amp;y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * <span class="number">2</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n * <span class="number">2</span>; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			id[i][j] = ++tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			row[tot] = i, col[tot] = j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	solve(x, <span class="number">0</span>), solve(y, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cnt[res[i]]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> pnt = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (cnt[i] &gt;= n * n) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			pnt = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> all = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (res[i] == pnt) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, row[i], col[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (++all == n * n) <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="Walking-on-a-Tree"><a href="#Walking-on-a-Tree" class="headerlink" title="Walking on a Tree"></a>Walking on a Tree</h1><p>首先发现答案可以取上界，考虑构造。考虑一个子树中向外连的边，如果数量不超过 $1$，那么直接把答案加上数量；否则把答案加上 $2$，然后在这样的边中选两条加一个限制。考虑选哪些边，发现如果某个子树已经有两条链了，那么就继承上来；否则随便选两条链肯定在两个子树中，不会冲突。时间复杂度 $O(nm)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2000</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, fa[maxn + <span class="number">3</span>], dep[maxn + <span class="number">3</span>], u[maxn + <span class="number">3</span>], v[maxn + <span class="number">3</span>], w[maxn + <span class="number">3</span>], ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> b[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], g[maxn + <span class="number">3</span>][<span class="number">2</span>], tot, lft[maxn + <span class="number">3</span>], rht[maxn + <span class="number">3</span>], wei[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxn + <span class="number">3</span>], res[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>], D[maxn + <span class="number">3</span>], V[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; S[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	G[u].push_back(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dep[v] = dep[u] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		fa[v] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_lim</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	lft[++tot] = u, rht[tot] = v, wei[tot] = w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	g[u][<span class="number">0</span>] = g[u][<span class="number">1</span>] = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		b[u][i] = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		solve(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (b[u][j] == <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				b[u][j] = b[v][j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; x = S[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		b[u][x.first] = x.second;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cnt += b[u][i] != <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (cnt &lt; <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans += cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans += <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> p = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (v == pa) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (g[v][<span class="number">0</span>] == <span class="number">-1</span>) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (~b[u][g[v][<span class="number">0</span>]] &amp;&amp; ~b[u][g[v][<span class="number">1</span>]]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				p = v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (p) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			g[u][<span class="number">0</span>] = g[p][<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			g[u][<span class="number">1</span>] = g[p][<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (b[u][i] == <span class="number">-1</span>) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (!x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					x = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &amp;&amp; !y) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					y = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			g[u][<span class="number">0</span>] = x, g[u][<span class="number">1</span>] = y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			add_lim(x, y, b[u][x] ^ b[u][y] ^ <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">color</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	vis[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; D[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = D[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		res[v] = res[u] ^ V[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		color(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		add(u, v), add(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u[i], &amp;v[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = u[i], y = v[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (x != y) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (dep[x] &lt; dep[y]) swap(x, y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			x = fa[x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		w[i] = x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (u[i] != w[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			S[u[i]].push_back(make_pair(i, <span class="number">0</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v[i] != w[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			S[v[i]].push_back(make_pair(i, <span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		S[w[i]].push_back(make_pair(i, <span class="number">-1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	solve(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		D[lft[i]].push_back(rht[i]), V[lft[i]].push_back(wei[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		D[rht[i]].push_back(lft[i]), V[rht[i]].push_back(wei[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!vis[i]) color(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!res[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, u[i], v[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, v[i], u[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="Addition-and-Andition"><a href="#Addition-and-Andition" class="headerlink" title="Addition and Andition"></a>Addition and Andition</h1><p>从高位往低位考虑，每次循环到 $(1, 1)$ 的位时把这位做 $k$ 次。维护一个栈存储非全 $0$ 的所有位的 pair，栈顶是最低的位。考虑三种进位 $[1, 1], [1, 0], [0, 1]$。假设进位是 $[1, 1]$：我们每次都是用掉一次操作，然后考虑下一位，直到考虑到一个非全 $0$ 的位时为止。这时我们可以直接判断能否跳到栈顶，如果可以就将剩余操作次数减去进的位数，然后考虑栈顶的那位。如果是 $(1, 0)$，就把它替换成 $(0, 1)$，并转化成对下一位的 $[1, 0]$ 的进位；是 $(0, 1)$ 同理。假设进位是 $[1, 0]$：如果当前一位是 $(1, 0)$，就把它变为 $(0, 0)$，进位还是 $[1, 0]$ 不变；否则当前一位是 $(0, 1)$，那么就转化成进位为 $[1, 1]$ 的情况。发现每进位两次栈的大小会减少 $1$，所以时间复杂度 $O(n + k)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e6</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, K, a[maxn + <span class="number">3</span>], b[maxn + <span class="number">3</span>], top, A[maxn + <span class="number">3</span>], B[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> s[maxn + <span class="number">3</span>], t[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> k, v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	node(<span class="keyword">int</span> a = <span class="number">0</span>, <span class="keyword">int</span> b = <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		k = a, v = b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; st[maxn + <span class="number">3</span>], tmp[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d %d %s %s"</span>, &amp;n, &amp;m, &amp;K, s + <span class="number">1</span>, t + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	reverse(s + <span class="number">1</span>, s + n + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	reverse(t + <span class="number">1</span>, t + m + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a[i] = s[i] ^ <span class="string">'0'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		b[i] = t[i] ^ <span class="string">'0'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = max(n, m); i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (a[i] &amp;&amp; b[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> pos = i, lft = K, cur = <span class="number">3</span>, cnt = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">while</span> (top) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (cur == <span class="number">3</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">if</span> (lft &gt;= st[top].k - pos) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						lft -= st[top].k - pos, pos = st[top].k;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						tmp[++cnt] = st[top], tmp[cnt].v ^= <span class="number">3</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						cur &amp;= st[top].v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">if</span> (st[top].k == pos + <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						pos++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						<span class="keyword">if</span> (st[top].v != cur) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">							cur = <span class="number">3</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				top--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (cur == <span class="number">3</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				A[pos + lft] = <span class="number">1</span>, B[pos + lft] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				st[++top] = node(pos + <span class="number">1</span>, cur);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = cnt; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				st[++top] = tmp[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[i] || b[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			st[++top] = node(i, a[i] &lt;&lt; <span class="number">1</span> | b[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		A[st[i].k] = st[i].v &gt;&gt; <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		B[st[i].k] = st[i].v &amp; <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> N = max(n, m) + K, M = N;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (N &amp;&amp; !A[N]) N--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (M &amp;&amp; !B[M]) M--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	reverse(A + <span class="number">1</span>, A + N + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	reverse(B + <span class="number">1</span>, B + M + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">putchar</span>(A[i] ^ <span class="string">'0'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">puts</span>(<span class="string">""</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">putchar</span>(B[i] ^ <span class="string">'0'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">puts</span>(<span class="string">""</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="Histogram-Coloring"><a href="#Histogram-Coloring" class="headerlink" title="Histogram Coloring"></a>Histogram Coloring</h1><p>考虑最下面一层，它上面的每个格子一定和自己不同，唯一的特例是如果最下面一层交错染色的话，上面一层可以将下面一层的颜色取反。对于一段区间记两个 dp 值：$f$ 表示强制最后一行交错染色的方案数，$g$ 表示不强制的方案数。设区间最小高度为 $x$，最小高度的个数为 $y$，分出来的段分别为 $[l_1, r_1], [l_2, r_2], \cdots, [l_k, r_k]$，那么有：</p>
<script type="math/tex; mode=display">
f(l, r) = 2^x \prod _{i = 1}^{k} f(l_i, r_i) \\
g(l, r) = 2^w \prod _{i = 1}^{k} \left(f(l_i, r_i) + g(l_i, r_i)\right) + (2^x - 2) \prod_{i = 1}^{k} f(l_i, r_i)</script><p>直接计算即可。时间复杂度 $O(n^2)$ 或 $O(n \log h)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, a[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> c = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="number">1l</span>l * a * a % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = <span class="number">1l</span>l * a * c % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; solve(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> h) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l == r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = qpow(<span class="number">2</span>, a[l] - h);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> make_pair(x, x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> mn = a[l];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		mn = min(mn, a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> c = <span class="number">1</span>, t = qpow(<span class="number">2</span>, mn - h);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (a[i] == mn) c = <span class="number">2l</span>l * c % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> x = <span class="number">1</span>, y = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = l, j = l; i &lt;= r; i = j + <span class="number">1</span>, j = i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (a[i] == mn) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (j &lt; r &amp;&amp; a[j + <span class="number">1</span>] != mn) j++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; t = solve(i, j, mn);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x = <span class="number">1l</span>l * x * (t.first + t.second) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		y = <span class="number">1l</span>l * y * t.first % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> p = <span class="number">1l</span>l * t * y % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> q = (<span class="number">1l</span>l * c * x + <span class="number">1l</span>l * (t + mod - <span class="number">2</span>) * y) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> make_pair(p, q);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solve(<span class="number">1</span>, n, <span class="number">0</span>).second);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="Synchronized-Subsequence"><a href="#Synchronized-Subsequence" class="headerlink" title="Synchronized Subsequence"></a>Synchronized Subsequence</h1><p>按照前缀 a 个数等于 b 个数的点分段。某一段如果 a 开头那么最优串肯定形如 ababab；如果 b 开头，记第 $i$ 个 ch 为 $\text{ch}_i$，那么我们肯定选择一个 $i$ 的后缀的 $a_i, b_i$，因为考虑选了 $i$ 却没选 $i + 1$，选了 $i + 1$ 一定更优（$b_i &lt; b_{i + 1} &lt; a_i &lt; a_{i + 1}$）。我们得出每一段的答案后，发现每一段在最终答案中要么全选要么不选（a 开头的段是选完 b 开头的段之后的工具段，b 开头的段满足任意一个不是最优串的串都不是最优串的前缀），然后只要 dp 一下即可。时间复杂度 $O(n^2)$。 </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">6000</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, sum[maxn + <span class="number">3</span>], tot, m[maxn + <span class="number">3</span>], k, l, a[maxn + <span class="number">3</span>], b[maxn + <span class="number">3</span>], p[maxn + <span class="number">3</span>], sz[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str[maxn + <span class="number">3</span>], s[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], res[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], tmp[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> n, <span class="keyword">char</span> t[], <span class="keyword">int</span> m)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= min(n, m); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (s[i] &gt; t[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (s[i] &lt; t[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> n &gt; m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">char</span> ret[], <span class="keyword">int</span> n, <span class="keyword">int</span> &amp;m)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	k = l = m = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		vis[i] = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (s[i] == <span class="string">'a'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[++k] = i, p[i] = k;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			b[++l] = i, p[i] = l;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (s[<span class="number">1</span>] == <span class="string">'a'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (vis[i]) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = a[p[i]]; j &lt; b[p[i]]; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				vis[b[p[j]]] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ret[++m] = <span class="string">'a'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ret[++m] = <span class="string">'b'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			i = b[p[i]];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> c = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (p[j] &gt;= i) tmp[++c] = s[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (check(tmp, c, ret, m)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				m = c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= c; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					ret[j] = tmp[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %s"</span>, &amp;n, str + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		sum[i] = sum[i - <span class="number">1</span>] + (str[i] == <span class="string">'a'</span> ? <span class="number">1</span> : <span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> lst = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (sum[i] == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			++tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = lst; j &lt;= i; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				s[tot][++m[tot]] = str[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			lst = i + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		solve(s[i], res[i], m[i], sz[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">string</span> s = <span class="string">""</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = tot; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">string</span> t = <span class="string">""</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= sz[i]; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			t += res[i][j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		t += s;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (t &gt; s) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			s = t;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>动态规划</tag>
        <tag>构造</tag>
        <tag>集训队作业</tag>
      </tags>
  </entry>
  <entry>
    <title>「学习笔记」莫比乌斯反演进阶篇</title>
    <url>/2019/11/28/20191128-Mobius-Inversion-Notes/</url>
    <content><![CDATA[<h1 id="杜教筛"><a href="#杜教筛" class="headerlink" title="杜教筛"></a>杜教筛</h1><p>杜教筛可以快速求一些积性函数的前缀和。假设我们要求 $S(n) = \sum_{i = 1}^{n} f(i)$，杜教筛方法如下：</p>
<script type="math/tex; mode=display">
\begin {align*}
& \sum_{i = 1}^{n} (f * g)(i) = \sum_{i = 1}^{n} g(i) S(\lfloor \frac{n}{i} \rfloor) \\
\Leftrightarrow \ & g(1) S(n) = \sum_{i = 1}^{n} (f * g)(i) + \sum_{i = 2}^{n} g(i) S(\lfloor \frac{n}{i} \rfloor) 
\end {align*}</script><a id="more"></a>
<p>对于积性函数 $f$，如果能找到积性函数 $g$，使得 $g, (f * g)$ 的前缀和都容易计算，那么我们就可以先用线性筛预处理出 $S(1), S(2), \cdots, S(\text{lim})$，然后使用整除分块和记忆化搜索计算 $S(n)$ $(n &gt; \text{lim})$。当 $\text{lim} = n^{\frac{2}{3}}$ 时，算法的复杂度为 $O(n ^ {\frac{2}{3}})$，实际上 $\text{lim}$ 取得更大一点会更优。</p>
<p>例子：求 $\mu$ 的前缀和时，我们可以取 $g = 1$，这样 $(f * g) = \epsilon$，而 $1, \epsilon$ 的前缀和都可以快速计算。</p>
<h1 id="YY-的-GCD"><a href="#YY-的-GCD" class="headerlink" title="YY 的 GCD"></a>YY 的 GCD</h1><p><a href="https://www.luogu.com.cn/problem/P2257" target="_blank" rel="noopener">「Luogu 2257」YY 的 GCD</a></p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>$T$ 次询问 $n, m$，求：</p>
<script type="math/tex; mode=display">\sum_{i = 1}^{n} \sum_{j = 1}^{m} [\gcd(i, j) \in P]</script><p>其中 $P$ 表示素数集合。</p>
<p>数据范围：$T \le 10^4, n, m \le 10^7$。</p>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>设数论函数 $p(n)$ 满足当 $n$ 为素数时 $p(n) = 1$，否则 $p(n) = 0$。那么答案为：</p>
<script type="math/tex; mode=display">
\begin {align*}
& \sum_{i = 1}^{n} \sum_{j = 1}^{m} [p(\text{gcd}(i, j))] \\
= & \sum_{k = 1}^{\min(n, m)} p(k) \sum_{i = 1}^{\lfloor \frac{n}{k} \rfloor} \sum_{j = 1}^{\lfloor \frac{m}{k} \rfloor} [(i, j) = 1] \\
= & \sum_{k = 1}^{\min(n, m)} p(k) \sum_{i = 1}^{\lfloor \frac{n}{k} \rfloor} \sum_{j = 1}^{\lfloor \frac{m}{k} \rfloor} \sum_{t | i, j} \mu(t) \\
= & \sum_{t = 1}^{n} \mu(t) \sum_{k = 1}^{\lfloor \frac{n}{t} \rfloor} p(k) \lfloor \frac{n}{kt} \rfloor \lfloor \frac{m}{kt} \rfloor \\
= & \sum_{i = 1}^{n} \lfloor \frac{n}{i} \rfloor \lfloor \frac{m}{i} \rfloor \sum_{d | i} \mu(d) p(\frac{i}{d}) \\
\end {align*}</script><p>我们记 $f(n) = \sum_{d | n} \mu(d) p(\frac{n}{d})$，考虑枚举 $\frac{n}{d}$，这样就可以 $O(n \log \log n)$ 预处理出 $f(1), f(2), \cdots, f(n)$。然后用整除分块回答每组询问即可。时间复杂度 $O(n \log \log n + T \sqrt n)$。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e7</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T, n, m, cnt, prm[maxn + <span class="number">3</span>], mu[maxn + <span class="number">3</span>], f[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	mu[<span class="number">1</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!vis[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			prm[++cnt] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mu[i] = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; i * prm[j] &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			vis[i * prm[j]] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (i % prm[j] == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				mu[i * prm[j]] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mu[i * prm[j]] = -mu[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = prm[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j * x &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			f[j * x] += mu[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[i] += f[i - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	prework(maxn);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (T --&gt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ll ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">1</span>; l &lt;= min(n, m); l = r + <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			r = min(n / (n / l), m / (m / l));</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans += <span class="number">1l</span>l * (f[r] - f[l - <span class="number">1</span>]) * (n / l) * (m / l);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="Siyuan-GCD"><a href="#Siyuan-GCD" class="headerlink" title="Siyuan GCD"></a>Siyuan GCD</h1><p><a href="https://loj.ac/problem/6686" target="_blank" rel="noopener">「LOJ 6686」Stupid GCD</a></p>
<h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定 $n$，求：</p>
<script type="math/tex; mode=display">
\sum_{i = 1}^{n} \gcd(\sqrt[3]{i}, i)</script><p>数据范围：$n \le 10^{30}$。</p>
<h2 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h2><p>见我的博客：<a href="/2019/07/28/20190728-LOJ6686-Stupid-GCD/">「LOJ 6686」Stupid GCD（数论）</a></p>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> __int128 lll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e7</span>, mod = <span class="number">998244353</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> tot, a[<span class="number">100</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> cnt, prm[maxn / <span class="number">10</span> + <span class="number">3</span>], phi[maxn + <span class="number">3</span>], pid[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;ll, <span class="keyword">int</span>&gt; map_1, map_2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll m, p[<span class="number">100</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">lll n;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(lll &amp;x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> ch;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">static</span> <span class="keyword">bool</span> neg;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (ch = neg = <span class="number">0</span>; ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; neg |= (ch == <span class="string">'-'</span>), ch = getchar());</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (x = <span class="number">0</span>; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; (x *= <span class="number">10</span>) += (ch ^ <span class="number">48</span>), ch = getchar());</span></pre></td></tr><tr><td class="code"><pre><span class="line">	neg &amp;&amp; (x = -x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> &amp;ret, lll n, <span class="keyword">int</span> dep, ll cur, ll num)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (dep &gt; tot) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ret = (ret + n / cur % mod * num) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs(ret, n, dep + <span class="number">1</span>, cur, num);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	cur *= p[dep], num *= p[dep] - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs(ret, n, dep + <span class="number">1</span>, cur, num);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= a[dep]; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cur *= p[dep], num *= p[dep];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(ret, n, dep + <span class="number">1</span>, cur, num);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve_1</span><span class="params">(lll n, ll m)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ret = m % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; <span class="number">1l</span>l * i * i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (m % i == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			p[++tot] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">while</span> (m % i == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				m /= i, a[tot]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (m &gt; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		p[++tot] = m, a[tot] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs(ret, n, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x &lt; mod ? x : x - mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	phi[<span class="number">1</span>] = pid[<span class="number">1</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!vis[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			prm[++cnt] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			phi[i] = i - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		pid[i] = <span class="number">1l</span>l * phi[i] * i % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; i * prm[j] &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			vis[i * prm[j]] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (i % prm[j] == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				phi[i * prm[j]] = phi[i] * prm[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			phi[i * prm[j]] = phi[i] * (prm[j] - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		phi[i] = func(phi[i] + phi[i - <span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		pid[i] = func(pid[i] + pid[i - <span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func_1</span><span class="params">(ll n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> (lll) n * (n + <span class="number">1</span>) / <span class="number">2</span> % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func_2</span><span class="params">(ll n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> (lll) n * (n + <span class="number">1</span>) * (n * <span class="number">2</span> + <span class="number">1</span>) / <span class="number">6</span> % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum_1</span><span class="params">(ll n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (n &lt;= maxn) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> phi[n];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (map_1.count(n)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> map_1[n];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> &amp;ret = map_1[n] = func_1(n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (ll l = <span class="number">2</span>, r = <span class="number">2</span>; l &lt;= n; l = r + <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		r = n / (n / l);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ret = (ret + <span class="number">1l</span>l * (r - l + <span class="number">1</span>) % mod * (mod - sum_1(n / l))) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum_2</span><span class="params">(ll n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (n &lt;= maxn) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> pid[n];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (map_2.count(n)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> map_2[n];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> &amp;ret = map_2[n] = func_2(n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (ll l = <span class="number">2</span>, r = <span class="number">2</span>; l &lt;= n; l = r + <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		r = n / (n / l);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ret = (ret + <span class="number">1l</span>l * func(func_1(r) - func_1(l - <span class="number">1</span>) + mod) * (mod - sum_2(n / l))) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve_2</span><span class="params">(ll n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	prework(min((ll) maxn, n));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (ll l = <span class="number">1</span>, r = <span class="number">1</span>; l &lt;= n; l = r + <span class="number">1</span>, r = <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		r = n / (n / l);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans = (ans + <span class="number">1l</span>l * (sum_1(r) - sum_1(l - <span class="number">1</span>) + mod) * func_1(n / l)) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans = (ans + <span class="number">1l</span>l * (sum_2(r) - sum_2(l - <span class="number">1</span>) + mod) * func_2(n / l)) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> (<span class="number">3l</span>l * ans + func_1(n)) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	read(n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	m = powl(n + <span class="number">.5</span>, <span class="number">1.</span> / <span class="number">3</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> ((lll) m * m * m &gt; n) m--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> ((lll) (m + <span class="number">1</span>) * (m + <span class="number">1</span>) * (m + <span class="number">1</span>) &lt;= n) m++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, func(solve_1(n - (lll) m * m * m, m) + solve_2(m - <span class="number">1</span>)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p><em>下面原本写了 4 道题的题解，然后因为 bug 没掉了，所以这里引用黄队的博客中较重要的两题，并稍作修改。</em></p>
<h1 id="密码解锁"><a href="#密码解锁" class="headerlink" title="密码解锁"></a>密码解锁</h1><p><a href="https://www.luogu.com.cn/problem/P5348" target="_blank" rel="noopener">「Luogu 5348」密码解锁</a></p>
<h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>已知：</p>
<script type="math/tex; mode=display">
\sum_{d|x,x\le n}f(x)=\mu(d)</script><p>求 $f(m)$。</p>
<p>数据范围：$m\le 10^9,\dfrac{n}{m}\le 10^9$。</p>
<h2 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h2><p>由莫比乌斯反演推论可以得到：</p>
<script type="math/tex; mode=display">
\begin{split}f(m)=&\sum_{m|i,i\le n}\mu(i)\mu\left(\frac{i}{m}\right)\\=&\sum_{i=1}^{\left\lfloor\frac{n}{m}\right\rfloor}\mu(im)\mu\left(i\right)\\=&\sum_{i=1}^{\left\lfloor\frac{n}{m}\right\rfloor}\mu^2(i)\mu(m)[i\perp m]\\=&\mu(m)\sum_{i=1}^{\left\lfloor\frac{n}{m}\right\rfloor}\mu^2(i)[i\perp m]\end{split}</script><p>考虑把这个和式做一个递归：</p>
<script type="math/tex; mode=display">
\begin{split}
S(n,k)=&\sum_{i=1}^n\mu^2(i)[i\perp k]\\
=&\sum_{i=1}^n\mu^2(i)\sum_{d|i,d|k}\mu(d)\\
=&\sum_{d|k}\mu(d)\sum_{i=1}^{\left\lfloor\frac{n}{d}\right\rfloor}\mu^2(id)\\
=&\sum_{d|k}\mu^3(d)\sum_{i=1}^{\left\lfloor\frac{n}{d}\right\rfloor}\mu^2(i)[i\perp d]\\
=&\sum_{d|k}\mu(d)S\left(\left\lfloor\frac{n}{d}\right\rfloor,d\right)
\end{split}</script><p>递归边界为 $S(n,1)=\sum_{i=1}^n\mu^2(i)$。我们考虑 $\mu^2(i)$ 的贡献。当且仅当 $i$ 不含平方及以上的因子时，$\mu^2(i)=1$，否则 $\mu^2(i)=0$。</p>
<p>因此我们要求 $[1, n]$ 中无平方因子的数的个数。那么考虑容斥，用整体减掉含有平方因子的数：</p>
<script type="math/tex; mode=display">
\begin{split}
& \sum_{i=1}^n\mu^2(i)=n+\sum_{i=2}^n\mu(i)\left\lfloor \frac{n}{i^2} \right\rfloor\\
= & \sum_{i=1}^n\mu(i)\left\lfloor \frac{n}{i^2} \right\rfloor=\sum_{i=1}^\sqrt{n}\mu(i)\left\lfloor \frac{n}{i^2} \right\rfloor
\end{split}</script><p>$\mu(i)$ 是容斥系数。我们记忆化计算 $S$ 即可，时间复杂度不超过 $O(\sqrt{\frac{n}{m}} \sigma_0(m))$，可以通过。</p>
<h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e7</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T, n, m, cnt, prm[maxn + <span class="number">3</span>], mu[maxn + <span class="number">3</span>], tot, p[<span class="number">100</span>], a[<span class="number">100</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; M_mu;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt; M;</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll k;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	mu[<span class="number">1</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!vis[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			prm[++cnt] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mu[i] = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; i * prm[j] &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			vis[i * prm[j]] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (i % prm[j] == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				mu[i * prm[j]] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mu[i * prm[j]] = -mu[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_mu</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x &lt;= maxn ? mu[x] : M_mu[x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> cur, <span class="keyword">int</span> val)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (x &gt; tot) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (cur &gt; maxn) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			M_mu[cur] = val;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs(x + <span class="number">1</span>, cur, val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	cur *= p[x], val *= <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs(x + <span class="number">1</span>, cur, val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= a[x]; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cur *= p[x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(x + <span class="number">1</span>, cur, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">S</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (M.count(make_pair(n, m))) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> M[make_pair(n, m)];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> &amp;ret = M[make_pair(n, m)] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (m == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i * i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ret += n / (i * i) * mu[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i * i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (m % i == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				ret += get_mu(i) * S(n / i, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i * i &lt; m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (m % i == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				ret += get_mu(m / i) * S(n / (m / i), m / i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	prework(maxn);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (T --&gt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld %d"</span>, &amp;k, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		n = k / m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tot = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> cur = m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= cur; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (cur % i == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				p[++tot] = i, a[tot] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">while</span> (cur % i == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					a[tot]++, cur /= i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (cur &gt; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			p[++tot] = cur, a[tot] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, S(n, m) * get_mu(m));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="FSF’s-Game"><a href="#FSF’s-Game" class="headerlink" title="FSF’s Game"></a>FSF’s Game</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4944" target="_blank" rel="noopener">「HDU 4944」FSF’s Game</a></p>
<h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定 $n$，求：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^n\sum_{j=i}^n\sum_{k|i,k|j}\frac{ij}{\gcd\left(\frac{i}{k},\frac{j}{k}\right)}</script><p>数据范围：$T,n\le 5\times 10^5$。</p>
<h2 id="思路分析-3"><a href="#思路分析-3" class="headerlink" title="思路分析"></a>思路分析</h2><script type="math/tex; mode=display">
\begin{split}
&\sum_{i=1}^n\sum_{j=i}^n\sum_{k|i,k|j}\frac{ij}{\gcd\left(\frac{i}{k},\frac{j}{k}\right)}\\
=&\sum_{k=1}^nk^2\sum_{i=1}^{\left\lfloor\frac{n}{k}\right\rfloor}\sum_{j=i}^{\left\lfloor\frac{n}{k}\right\rfloor}\operatorname{lcm}(i,j)
\end{split}</script><p>设 $f(n)=\sum_{i=1}^n\sum_{j=i}^n\operatorname{lcm}(i,j)=\sum_{j=1}^n\sum_{i=1}^j\operatorname{lcm}(i,j)$。</p>
<p>设 $g(n)=\sum_{i=1}^n\gcd(n,i)$。那么可以用两两配对的思路反演得到：</p>
<script type="math/tex; mode=display">
g(n)=\frac{1}{2}n\left[\left(\sum_{d|n}d\cdot \varphi(d)\right)-1\right]+n</script><p>那么我们做一个 $g(n)$ 的前缀和就得到了 $f(n)$。现在原式化简为了：</p>
<script type="math/tex; mode=display">
F(n)=\sum_{k=1}^nk^2f\left(\left\lfloor\frac{n}{k}\right\rfloor\right)</script><p>发现对于 $f(i)$，它对区间 $[ij, (i + 1)j - 1]$ 中的 $F$ 有 $f(i) \times j^2$ 的贡献。枚举 $i, j$，使用前缀和优化来预处理即可，时间复杂度 $O(n \log n)$。</p>
<h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> ui;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T, cnt, prm[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll num[maxn + <span class="number">3</span>], iphi[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">ui lcm[maxn + <span class="number">3</span>], res[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	iphi[<span class="number">1</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!vis[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			prm[++cnt] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			iphi[i] = <span class="number">1l</span>l * i * (i - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; i * prm[j] &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			vis[i * prm[j]] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (i % prm[j] == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				iphi[i * prm[j]] = iphi[i] * prm[j] * prm[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			iphi[i * prm[j]] = iphi[i] * prm[j] * (prm[j] - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j += i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			num[j] += iphi[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		num[i] = (num[i] + <span class="number">1</span>) * i / <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		lcm[i] = lcm[i - <span class="number">1</span>] + num[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; i * j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			res[i * j] += lcm[i] * (ui) j * (ui) j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			res[min(n + <span class="number">1</span>, (i + <span class="number">1</span>) * j)] -= lcm[i] * (ui) j * (ui) j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		res[i] += res[i - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	prework(maxn);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> x, _ = <span class="number">1</span>; _ &lt;= T; _++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"Case #%d: %u\n"</span>, _, res[x]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>「集训队作业」IOI 2020 集训队作业小结 1</title>
    <url>/2019/11/27/20191127-IOI2020-Homework-1/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文包括 IOI 2020 集训队作业第 7 到 12 题的题解。</p>
<ul>
<li>「AGC 022E」 Median Replace</li>
<li>「AGC 022F」 Checkers</li>
<li>「AGC 023D」 Go Home</li>
<li>「AGC 023F」 01 on Tree</li>
<li>「AGC 024D」 Isomorphism Freak</li>
<li>「AGC 024E」 Sequence Growing Hard</li>
</ul>
<a id="more"></a>
<h1 id="Median-Replace"><a href="#Median-Replace" class="headerlink" title="Median Replace"></a>Median Replace</h1><p><a href="https://atcoder.jp/contests/agc022/tasks/agc022_e" target="_blank" rel="noopener">「AGC 022E」Median Replace</a></p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>对于一个 01 串，每次选三个连续的数字删除后插入它们的中位数，如果存在一种方案操作多次后变成只有 1 的串，那么称这个串是好的。给定长度为 $n$ 的串（$n$ 是奇数），其中的一些字符是问号，问有多少种将问号替换为 0, 1 的方案，使得得到的 01 串是好的。</p>
<p>数据范围：$n \le 3 \times 10^5$。</p>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>考虑建出自动机：</p>
<p><img src="/images/20191127-IOI2020-Homework-1-1.png" alt=""></p>
<p>其中 1 和 11 为终止态。我们直接在上面 dp 算出走 $n$ 步到终止态的方案数即可，时间复杂度 $O(n)$。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ch[<span class="number">10</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">5</span>, <span class="number">1</span>&#125;, &#123;<span class="number">3</span>, <span class="number">2</span>&#125;, &#123;<span class="number">2</span>, <span class="number">2</span>&#125;, &#123;<span class="number">4</span>, <span class="number">1</span>&#125;, &#123;<span class="number">3</span>, <span class="number">3</span>&#125;, &#123;<span class="number">7</span>, <span class="number">6</span>&#125;, &#123;<span class="number">5</span>, <span class="number">1</span>&#125;, &#123;<span class="number">5</span>, <span class="number">5</span>&#125;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, dp[maxn + <span class="number">3</span>][<span class="number">10</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> s[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	x += y, x &lt; mod ? <span class="number">0</span> : x -= mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (s[i] != <span class="string">'1'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				upd(dp[i][ch[j][<span class="number">0</span>]], dp[i - <span class="number">1</span>][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (s[i] != <span class="string">'0'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				upd(dp[i][ch[j][<span class="number">1</span>]], dp[i - <span class="number">1</span>][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (dp[n][<span class="number">1</span>] + dp[n][<span class="number">2</span>]) % mod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="Checkers"><a href="#Checkers" class="headerlink" title="Checkers"></a>Checkers</h1><p><a href="https://atcoder.jp/contests/agc022/tasks/agc022_f" target="_blank" rel="noopener">「AGC 022F」Checkers</a></p>
<h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>有 $n$ 个棋子在数轴上，第 $i$ 个的 x 坐标为 $X^i$（$X$ 为一个足够大的数）。进行 $n - 1$ 次操作，每次选择两个棋子 $A, B$，让 $A$ 的 x 坐标变为 $A$ 关于 $B$ 的对称点，然后删除 $B$。最后会留下一个棋子，问它有多少种可能的坐标。</p>
<p>数据范围：$n \le 50$。</p>
<h2 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h2><p>我们将 $A$ 跳过 $B$ 的操作看作树上 $A$ 成为了 $B$ 的父亲，这样操作序列就可以看成一棵树。不难发现深度为 $d$ 的点对答案的贡献为 $\pm 2^d$，我们只要考虑它的正负号。考虑最终操作树上的某个点，在它的某个儿子合并到它的时候，以及它的所有祖先在它之后加入儿子的时候，它的符号都会被取反。实际上，我们不用考虑所有祖先，只用考虑自己的父亲，因为祖先可以通过父亲做前缀和来得到。</p>
<p>对于某一个父亲，如果它有 $k$ 个儿子，那么就有 $\lfloor\frac{k}{2}\rfloor$ 个儿子之后加入的兄弟数量是奇数。我们考虑一层一层地 dp：$dp(i, j)$ 表示用了 $i$ 个点，在最后一层中有 $j$ 个点的儿子数应该是奇数（预支了 $j$ 个点有奇数个儿子）的方案数。考虑枚举下一层有 $k$ 个点，那么就有 $\frac{k - j}{2}$ 个点的父亲在它以后加入了奇数个点。注意这时我们还没有考虑下一层的儿子结点。</p>
<p>接下来我们枚举实际上有 $x$ 个结点的贡献是负的（考虑儿子）。那么，如果 $x \ge \frac{k - j}{2}$，我们就让要 $x - \frac{k - j}{2}$ 个原本贡献是正的点取反；否则 $x &lt; \frac{k - j}{2}$，我们就要让 $\frac{k - j}{2}$ 个原本贡献是负的点取反。而取反的方法就是给该点预支奇数个儿子，所以我们会从 $dp(i, j)$ 转移到 $dp(i + k, \vert x - \frac{k - j}{2} \vert)$，不同的正负贡献的值的数量是 $C_{n - i}^k \times C_k^x$。直接 dp 即可，时间复杂度 $O(n^4)$。</p>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, C[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], dp[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> _abs(<span class="keyword">int</span> x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x &lt; <span class="number">0</span> ? -x : x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		C[i][<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			C[i][j] = (C[i - <span class="number">1</span>][j - <span class="number">1</span>] + C[i - <span class="number">1</span>][j]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dp[<span class="number">1</span>][<span class="number">0</span>] = dp[<span class="number">1</span>][<span class="number">1</span>] = n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = j == <span class="number">0</span> ? <span class="number">2</span> : j; k &lt;= n - i; k += <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> x = (k - j) &gt;&gt; <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt;= k; l++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					dp[i + k][_abs(l - x)] = (dp[i + k][_abs(l - x)] + <span class="number">1l</span>l * dp[i][j] * C[n - i][k] % mod * C[k][l]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[n][<span class="number">0</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="Go-Home"><a href="#Go-Home" class="headerlink" title="Go Home"></a>Go Home</h1><p><a href="https://atcoder.jp/contests/agc023/tasks/agc023_d" target="_blank" rel="noopener">「AGC 023D」Go Home</a></p>
<h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>有 $n$ 个公寓，第 $i$ 个坐标为 $X_i$，人数为 $P_i$。公司在 $S$，下班后所有人都乘坐大巴回家。大巴一到家门口人就会下车，每个时刻大巴上的人会投票（向左或向右），然后大巴往票数多的一方开一格。每个人都要最小化回自己家的时间，问最后一个人回家的时间。</p>
<p>数据范围：$n \le 10^5$。</p>
<h2 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h2><p>首先，如果 $S$ 在第一栋楼左边或者第 $n$ 栋楼右边，它肯定是顺序经过所有楼。否则，我们看它是先经过 $1$ 号楼还是 $n$ 号楼。如果 $P_1 \ge P_n$，在车到达第 $n - 1$ 栋楼时，想向右的人就只有 $n$ 号楼里的人了，其他人都想向左，而 $P_1 \ge P_n$，所以车肯定会向左开，一直开到 $1$。也就是说，$P_1 \ge P_n$ 时，车会先到达 $1$ 号楼后到达 $n$ 号楼。这时，$n$ 号楼的人就会先让车向左，因为这样可以缩短他们回家的时间。这样，我们就可以将 $P_1 \gets P_1 + P_n$，并删掉 $n$ 号楼。$P_1 &lt; P_n$ 时同理，这样我们就可以把问题转化成规模更小的问题，所以直接递归即可。时间复杂度 $O(n)$。</p>
<h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, s, x[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll p[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> _abs(<span class="keyword">int</span> x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x &lt; <span class="number">0</span> ? -x : x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> t)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l &gt; r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> _abs(s - t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll ret = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (x[l] &gt; s || (x[r] &gt; s &amp;&amp; p[l] &gt;= p[r])) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		p[l] += p[r];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ret = solve(l, r - <span class="number">1</span>, x[r]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (t != <span class="number">-1</span>) ret += _abs(x[r] - t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		p[r] += p[l];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ret = solve(l + <span class="number">1</span>, r, x[l]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (t != <span class="number">-1</span>) ret += _abs(x[l] - t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;s);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %lld"</span>, &amp;x[i], &amp;p[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, solve(<span class="number">1</span>, n, <span class="number">-1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="01-on-Tree"><a href="#01-on-Tree" class="headerlink" title="01 on Tree"></a>01 on Tree</h1><p><a href="https://atcoder.jp/contests/agc023/tasks/agc023_f" target="_blank" rel="noopener">「AGC 023F」01 on Tree</a></p>
<h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定 $n$ 个点的树，第 $i$ 个点上的数是 $v_i \in {0, 1}$。每个父亲向儿子连一条边，求点的一个拓扑序，使得构成的 01 序列逆序对数最小。</p>
<p>数据范围：$n \le 2 \times 10^5$。</p>
<h2 id="思路分析-3"><a href="#思路分析-3" class="headerlink" title="思路分析"></a>思路分析</h2><p>典型的一种树上贪心套路。假设一开始每个点都是一个独立的集合，每次我们选择一个最优的集合将它与它的父亲合并，并同时计算对答案的贡献。在这题中，最优的集合就是 $\frac{C_0}{C_1}$ 最大的集合，其中 $C_k$ 表示 $k$ 的个数。证明过程是考虑某个点的两个儿子交换合并顺序后答案会不会变得更优，这里省略。用堆加并查集维护即可，时间复杂度 $O(n \log n)$。</p>
<h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, p[maxn + <span class="number">3</span>], v[maxn + <span class="number">3</span>], fa[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thing</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> x, y, u, f;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> thing &amp;a, <span class="keyword">const</span> thing &amp;b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="number">1l</span>l * a.x * b.y &lt; <span class="number">1l</span>l * b.x * a.y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; cur[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">priority_queue&lt;thing, <span class="built_in">vector</span>&lt;thing&gt;, greater&lt;thing&gt; &gt; H; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> fa[x] == x ? x : fa[x] = find(fa[x]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		fa[i] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cur[i].u = i, cur[i].f = p[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cur[i].x = !v[i], cur[i].y = v[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		H.push(cur[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (!H.empty()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		thing x = H.top();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		H.pop();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!x.f || vis[x.u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		vis[x.u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> u = x.u, v = find(x.f);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans += <span class="number">1l</span>l * cur[v].y * cur[u].x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cur[v].x += cur[u].x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cur[v].y += cur[u].y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		fa[u] = v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		H.push(cur[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="Isomorphism-Freak"><a href="#Isomorphism-Freak" class="headerlink" title="Isomorphism Freak"></a>Isomorphism Freak</h1><p><a href="https://atcoder.jp/contests/agc024/tasks/agc024_d" target="_blank" rel="noopener">「AGC 024D」Isomorphism Freak</a></p>
<h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>定义一棵点有颜色的树是好的当且仅当对于任意两个颜色相同的结点，这棵树以它们为根形成的两棵有根树同构。给定 $n$ 个点的树，要加上若干个点，并给点染上颜色，使得树是好的。问最小的颜色数量，以及在颜色数量最小的情况下树上叶子结点个数的最小值。</p>
<p>数据范围：$n \le 100$。</p>
<h2 id="思路分析-4"><a href="#思路分析-4" class="headerlink" title="思路分析"></a>思路分析</h2><p>发现第一问答案为 $\lceil \frac{d}{2} \rceil$，其中 $d$ 表示直径长度（点数）。第二问分类讨论：如果 $d$ 是偶数，那么直径中心所在的边分出的两个子树中，每个深度相同的点儿子数量都要相同。如果 $d$ 是奇数，那么直径中心是点，会分出多棵子树，其中的每个深度相同的点儿子数量也要相同；或者我们也有可能在直径下面再加一个点，转化为 $d$ 是偶数的情况。由于 $n$ 很小，直接暴力即可，时间复杂度 $O(n^3)$。</p>
<h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ll inf = <span class="number">5e16</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, deg[maxn + <span class="number">3</span>], son[maxn + <span class="number">3</span>], dep[maxn + <span class="number">3</span>], mx[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">pair&lt;<span class="keyword">int</span>, ll&gt; ans, res;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	son[u] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dep[v] = dep[u] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		son[u]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">pair&lt;<span class="keyword">int</span>, ll&gt; calc() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x = max(x, dep[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		mx[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> c = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		mx[dep[i]] = max(mx[dep[i]], son[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (dep[i] == <span class="number">1</span>) c++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll y = c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; x; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		y = min(inf, y * mx[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> make_pair(x, y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">pair&lt;<span class="keyword">int</span>, ll&gt; solve_1(<span class="keyword">int</span> u) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dep[u] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs(u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> calc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">pair&lt;<span class="keyword">int</span>, ll&gt; solve_2(<span class="keyword">int</span> u, <span class="keyword">int</span> v) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dep[u] = dep[v] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs(u, v), dfs(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> calc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		res = min(res, solve_2(u, v));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		search(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">pair&lt;<span class="keyword">int</span>, ll&gt; solve() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	res.first = maxn + <span class="number">3</span>, res.second = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		res = min(res, solve_1(i));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	search(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		G[u].push_back(v), G[v].push_back(u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		deg[u]++, deg[v]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ans = solve();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (deg[i] == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		G[i].push_back(++n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans = min(ans, solve());</span></pre></td></tr><tr><td class="code"><pre><span class="line">		G[i].pop_back(), n--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d %lld\n"</span>, ans.first, ans.second);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="Sequence-Growing-Hard"><a href="#Sequence-Growing-Hard" class="headerlink" title="Sequence Growing Hard"></a>Sequence Growing Hard</h1><p><a href="https://atcoder.jp/contests/agc024/tasks/agc024_e" target="_blank" rel="noopener">「AGC 024E」Sequence Growing Hard</a></p>
<h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>求这样的 $(A_0, A_1, \cdots, A_n)$ 组数：</p>
<ul>
<li>$A_i$ 是长度为 $i$ 的序列，每个元素都是 $[1, k]$ 中的整数。</li>
<li>$A_{i + 1}$ 是 $A_i$ 插入一个元素得到的。</li>
<li>$A_{i + 1}$ 的字典序大于 $A_i$。</li>
</ul>
<p>数据范围：$n, k \le 300$。</p>
<h2 id="思路分析-5"><a href="#思路分析-5" class="headerlink" title="思路分析"></a>思路分析</h2><p>考虑插入什么数会使字典序变大。假设我们要在数 $y$ 之前插入 $x$，那么要么 $x &gt; y$，要么 $x = y$ 并且 $x$ 比 $y$ 后面第一个不等于 $y$ 的数大。考虑第二种情况得到的序列，其实和在第一个不等于 $y$ 的数之前插入 $x$ 没有区别，所以问题转化成了只有第一种情况。对于序列中的每个数，可以看作一个二元组 $(p_i, v_i)$ 分别表示它是第几次插入的，以及它的权值。在 $A_0$ 中我们建立一个虚拟的二元组 $(0, 0)$，这样之后每一次的插入我们都可以看作在某个二元组 $(x, y)$ 之前插入 $(i, v_i)$，满足 $y &gt; v_i$。我们将在某个二元组之前插入二元组看作将新的二元组作为之前二元组的一个孩子，这样问题就转化成了一个有根树计数问题，每个结点是一个二元组，并满足：</p>
<ul>
<li>根结点的二元组是 $(0, 0)$。</li>
<li>二元组的第一维形成排列，第二维的数在 $[0, k]$ 中。</li>
<li>二元组的父亲的两维小于儿子的两维。</li>
</ul>
<p>设 $f(i, j)$ 表示 $i$ 个点的树，根结点的第二维是 $j$ 的方案数。我们考虑将 $i$ 个节点的第一维根据相对顺序用 $0, 1, \cdots, i - 1$ 来编号，观察到 $1$ 的父亲肯定是 $0$，所以我们枚举 $1$ 号结点子树的大小 $s$ 以及第二维的值 $l$，就可以列出转移方程：</p>
<script type="math/tex; mode=display">f(i, j) = \sum_{s = 1}^{i - 1} \sum_{l = j + 1}^{k} f(s, l) \times f(i - s, j) \times C_{i - 2}^{s - 1}</script><p>答案就是 $f(n + 1, 0)$。前缀和优化即可，时间复杂度 $O(n^3)$。</p>
<h2 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">300</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, mod, C[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], dp[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], f[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x &lt; mod ? x : x - mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		C[i][<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			C[i][j] = func(C[i - <span class="number">1</span>][j - <span class="number">1</span>] + C[i - <span class="number">1</span>][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;mod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	prework(n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dp[<span class="number">1</span>][i] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = m; ~i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[<span class="number">1</span>][i] = func(f[<span class="number">1</span>][i + <span class="number">1</span>] + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n + <span class="number">1</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; i; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				dp[i][j] = (dp[i][j] + <span class="number">1l</span>l * f[k][j + <span class="number">1</span>] * dp[i - k][j] % mod * C[i - <span class="number">2</span>][k - <span class="number">1</span>]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = m; ~j; j--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			f[i][j] = func(f[i][j + <span class="number">1</span>] + dp[i][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[n + <span class="number">1</span>][<span class="number">0</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>动态规划</tag>
        <tag>贪心</tag>
        <tag>集训队作业</tag>
      </tags>
  </entry>
  <entry>
    <title>「学习笔记」斯特林数</title>
    <url>/2019/11/26/20191126-Stirling-Number-Notes/</url>
    <content><![CDATA[<h1 id="第一类斯特林数"><a href="#第一类斯特林数" class="headerlink" title="第一类斯特林数"></a>第一类斯特林数</h1><p>第一类斯特林数 $s(n, m)$ 表示长度为 $n$ 的置换有 $m$ 个环的方案数。</p>
<p>第一类斯特林数有递推式 $s(n, m) = s(n - 1, m - 1) + s(n - 1, m) \times (n - 1)$，（讨论第 $n$ 个数新开一个环或者接在之前某个数后面），还有 $s(n, m) = \sum_{i = 1}^n s(n - i, m - 1) \times (i - 1)! \times C(n - 1, i - 1)$（枚举第一个数所在的环的大小，并考虑其他数的排法）。</p>
<p>可以用分治 FFT 在 $O(n \log^2 n)$ 的时间内求出第一类斯特林数的一行。</p>
<a id="more"></a>
<h2 id="Count-The-Buildings"><a href="#Count-The-Buildings" class="headerlink" title="Count The Buildings"></a>Count The Buildings</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4372" target="_blank" rel="noopener">「HDU 4372」Count the Buildings</a></p>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>求前缀递增单调栈长度为 $x$，后缀递增单调栈长度为 $y$ 的长度为 $n$ 的排列个数。</p>
<p>数据范围：$T \le 10^5, n, x, y \le 2000$。</p>
<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>考虑排列中 $n$ 的位置，它左边形成了 $x - 1$ 组 $a_{l_i}, a_{l_i + 1}, \cdots, a_{r_i}$，其中 $l_i \le r_i, r_i + 1 = l_{i - 1}$，满足 $a_{l_i} &gt; a_{l_i + 1}, a_{l_i + 2}, \cdots, a_{r_i}$，并且 $a_{l_{i}} &lt; a_{l_{i + 1}}$。其实就是左边的置换有 $x - 1$ 个环的方案数（对于每个环把最大值转到第一位，并把环按照最大值排序），右边同理。问题变成了左边 $x - 1 + y - 1$ 个置换，选 $x - 1$ 个放左边的方案数，也就是 $s(n - 1, x + y - 2) \times C(x + y - 2, x - 1)$。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e3</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T, n, l, r, c[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], s[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    s[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxn; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        c[i][<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxn; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            c[i][j] = (c[i - <span class="number">1</span>][j - <span class="number">1</span>] + c[i - <span class="number">1</span>][j]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            s[i][j] = (s[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1l</span>l * s[i - <span class="number">1</span>][j] * (i - <span class="number">1</span>)) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (T --&gt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;l, &amp;r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (l + r - <span class="number">2</span> &gt; n - <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">puts</span>(<span class="string">"0"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, <span class="number">1l</span>l * s[n - <span class="number">1</span>][l + r - <span class="number">2</span>] * c[l + r - <span class="number">2</span>][l - <span class="number">1</span>] % mod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="第二类斯特林数"><a href="#第二类斯特林数" class="headerlink" title="第二类斯特林数"></a>第二类斯特林数</h1><p>第二类斯特林数 $S(n, m)$ 表示 $n$ 个不同元素分成 $m$ 个集合的方案数。</p>
<p>第二类斯特林数有递推式 $S(n, m) = S(n - 1, m - 1) + S(n - 1,m) \times m$（枚举最后一个数新开一个集合或插入之前的一个集合），还有 $S(n, m) = \sum_{i = 1}^m S(n - i, m - 1) \times C(n - 1, i - 1)$（枚举第一个数所在集合的大小，然后考虑其他数的选法）。</p>
<p>有恒等式 $n^m = \sum_{i = 0}^{n} S(m, i) \times i! \times C(n, i) = \sum_{i = 0}^{n} S(m, i) \times n^{\underline{i}}$，这样可以把 $x^k$ 转化成下降幂的形式。</p>
<h2 id="第二类斯特林数·行"><a href="#第二类斯特林数·行" class="headerlink" title="第二类斯特林数·行"></a>第二类斯特林数·行</h2><p><a href="https://www.luogu.com.cn/problem/P5395" target="_blank" rel="noopener">「Luogu 5395」第二类斯特林数·行</a></p>
<h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>求 $S(n, 0), S(n, 1), \cdots, S(n, n)$。</p>
<p>数据范围：$n \le 2 \times 10^5$。</p>
<h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><p>前置知识——二项式反演：</p>
<script type="math/tex; mode=display">F(n) = \sum_{i = 0}^{n} \binom{n}{i} \times G(i)</script><script type="math/tex; mode=display">G(n) = \sum_{i = 0}^{n} (-1)^{n - i} \times \binom{n}{i} \times F(i)</script><p>那么，利用二项式反演，我们可以推出第二类斯特林数的通项公式：</p>
<script type="math/tex; mode=display">n^m = \sum_{i = 0}^{n} S(m, i) \times i! \times C(n, i)</script><script type="math/tex; mode=display">S(m, n) = \frac{1}{n!} \sum_{i = 0}^{n} i^m \times (-1)^{n - i} \times C(n, i)</script><p>当然这个式子也可以用容斥原理来解释。式子变形一下可得：</p>
<script type="math/tex; mode=display">S(n, m) = \frac{1}{m!} \sum_{i = 0}^{m} (m - i)^n \times (-1)^{i} \times C(m, i)</script><p>可以把 $i$ 看作空集合的个数，我们把元素随意放在其他的集合中，然后进行容斥。最后由于盒子是相同的，答案要除以 $m!$。</p>
<p>构造多项式 $A_i = \sum_{i} \frac{i^n}{i!} x^i, B_i = \frac{(-1)^{i}}{(i)!} x_i$ 进行卷积即可求出 $S(n, 0), S(n, 1), \cdots, S(n, n)$。时间复杂度 $O(n \log n)$。</p>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">19</span>, mod = <span class="number">167772161</span>, g = <span class="number">3</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, p_n[maxn + <span class="number">3</span>], fact[maxn + <span class="number">3</span>], finv[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> lim, k, rev[maxn + <span class="number">3</span>], A[maxn + <span class="number">3</span>], B[maxn + <span class="number">3</span>], C[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x &lt; mod ? x : x - mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (b &lt; <span class="number">0</span>) b += mod - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> c = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="number">1l</span>l * a * a % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = <span class="number">1l</span>l * a * c % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		p_n[i] = qpow(i, n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	fact[<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		fact[i] = <span class="number">1l</span>l * fact[i - <span class="number">1</span>] * i % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	finv[n] = qpow(fact[n], mod - <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		finv[i - <span class="number">1</span>] = <span class="number">1l</span>l * finv[i] * i % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dft</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n, <span class="keyword">int</span> t)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (i &lt; rev[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		swap(A[i], A[rev[i]]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n; k &lt;&lt;= <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = qpow(g, (mod - <span class="number">1</span>) / (k &lt;&lt; <span class="number">1</span>) * t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += k &lt;&lt; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> y = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + k; j++, y = <span class="number">1l</span>l * x * y % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> p = A[j], q = <span class="number">1l</span>l * A[j + k] * y % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				A[j] = f(p + q), A[j + k] = f(p - q + mod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (t == <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = qpow(n, mod - <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			A[i] = <span class="number">1l</span>l * A[i] * x % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	prework(n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		A[i] = <span class="number">1l</span>l * p_n[i] * finv[i] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		B[i] = <span class="number">1l</span>l * (i &amp; <span class="number">1</span> ? mod - <span class="number">1</span> : <span class="number">1</span>) * finv[i] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (lim = <span class="number">1</span>, k = <span class="number">0</span>; lim &lt;= n * <span class="number">2</span>; lim &lt;&lt;= <span class="number">1</span>) k++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; lim; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (k - <span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dft(A, lim, <span class="number">1</span>), dft(B, lim, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		C[i] = <span class="number">1l</span>l * A[i] * B[i] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dft(C, lim, <span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d%c"</span>, C[i], <span class="string">" \n"</span>[i == n]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h2 id="Crash-的文明世界"><a href="#Crash-的文明世界" class="headerlink" title="Crash 的文明世界"></a>Crash 的文明世界</h2><p><a href="https://www.luogu.com.cn/problem/P4827" target="_blank" rel="noopener">「Luogu 4827」Crash 的文明世界</a></p>
<h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定 $n$ 个点的树，边权为 $1$，对于每个 $i$，求出 $\sum_{j = 1}^{n} \text{dist}(i, j)^k$。</p>
<p>数据范围：$n \le 5 \times 10^4, k \le 150$。</p>
<h3 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h3><p>首先我们有 $x^k = \sum_{i = 0}^{k} S(k, i) \times i! \times C(x, i)$，我们将 $\text{dist}(i, j)$ 代入其中，这样我们就只用求  $\sum_{j = 1}^{n} C(\text{dist}(i, j), k)$ 即可，而这个显然可以树形 dp 做。时间复杂度 $O(nk)$。</p>
<h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span>, maxm = <span class="number">150</span>, mod = <span class="number">1e4</span> + <span class="number">7</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, S[maxm + <span class="number">3</span>][maxm + <span class="number">3</span>], dp[maxn + <span class="number">3</span>][maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> F[maxm + <span class="number">3</span>], f[maxn + <span class="number">3</span>][maxm + <span class="number">3</span>], up[maxn + <span class="number">3</span>][maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x &lt; mod ? x : x - mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dp[u][<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dp[u][<span class="number">0</span>] = func(dp[u][<span class="number">0</span>] + dp[v][<span class="number">0</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dp[u][j] = func(dp[u][j] + dp[v][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dp[u][j] = func(dp[u][j] + dp[v][j - <span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			f[u][j] = func(up[u][j] + dp[u][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[u][<span class="number">0</span>] = func(f[u][<span class="number">0</span>] - dp[v][<span class="number">0</span>] + mod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			f[u][j] = func(f[u][j] - dp[v][j] + mod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			f[u][j] = func(f[u][j] - dp[v][j - <span class="number">1</span>] + mod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		up[v][<span class="number">0</span>] = f[u][<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			up[v][j] = func(up[v][j] + f[u][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			up[v][j] = func(up[v][j] + f[u][j - <span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		solve(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	S[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			S[i][j] = (S[i - <span class="number">1</span>][j - <span class="number">1</span>] + S[i - <span class="number">1</span>][j] * j) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	F[<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		F[i] = <span class="number">1l</span>l * F[i - <span class="number">1</span>] * i % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		G[u].push_back(v), G[v].push_back(u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	solve(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> x = func(dp[i][j] + up[i][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans = (ans + <span class="number">1l</span>l * S[m][j] * F[j] * x) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h2 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h2><p><a href="http://darkbzoj.tk/problem/4555" target="_blank" rel="noopener">「BZOJ 4555」求和</a></p>
<h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>对于给定的 $n$，求：$f(n) = \sum_{i = 0}^{n} \sum_{j = 0}^{i} S(i, j) \times 2^j \times j!$，对 $998244353$ 取模。</p>
<p>数据范围：$n \le 10^5$。</p>
<h3 id="思路分析-3"><a href="#思路分析-3" class="headerlink" title="思路分析"></a>思路分析</h3><p>考虑 $g(n) = \sum_{i = 0}^{n} S(n, i) \times 2^i \times i!$ 的组合意义：将 $n$ 个元素放进若干个有序的集合，每个有元素的集合有两种状态。那么我们就有递推式：$g(n) = \sum_{i = 1}^{n} C(n, i) \times g(n - i) \times 2$，思路是枚举某个集合的大小。使用分治 FFT 计算即可，时间复杂度 $O(n \log^2 n)$。</p>
<h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">18</span>, mod = <span class="number">998244353</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, f[maxn + <span class="number">3</span>], g[maxn + <span class="number">3</span>], h[maxn + <span class="number">3</span>], fact[maxn + <span class="number">3</span>], finv[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> lim, k, rev[maxn + <span class="number">3</span>], A[maxn + <span class="number">3</span>], B[maxn + <span class="number">3</span>], C[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x &lt; mod ? x : x - mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (b &lt; <span class="number">0</span>) b += mod - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> c = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="number">1l</span>l * a * a % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = <span class="number">1l</span>l * a * c % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	fact[<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		fact[i] = <span class="number">1l</span>l * fact[i - <span class="number">1</span>] * i % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	finv[n] = qpow(fact[n], mod - <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		finv[i - <span class="number">1</span>] = <span class="number">1l</span>l * finv[i] * i % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dft</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n, <span class="keyword">int</span> t)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (i &lt; rev[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		swap(A[i], A[rev[i]]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n; k &lt;&lt;= <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = qpow(<span class="number">3</span>, (mod - <span class="number">1</span>) / (k &lt;&lt; <span class="number">1</span>) * t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += k &lt;&lt; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> y = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + k; j++, y = <span class="number">1l</span>l * x * y % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> p = A[j], q = <span class="number">1l</span>l * A[j + k] * y % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				A[j] = func(p + q), A[j + k] = func(p - q + mod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (t == <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = qpow(n, mod - <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			A[i] = <span class="number">1l</span>l * A[i] * x % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l == <span class="number">0</span> &amp;&amp; r == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l == r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		g[l] = <span class="number">2l</span>l * g[l] * fact[l] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		h[l] = <span class="number">1l</span>l * g[l] * finv[l] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	cdq(l, mid);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> p = mid - l, q = r - l;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= p; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		A[i] = h[i + l];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		B[i] = f[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (lim = <span class="number">1</span>, k = <span class="number">0</span>; lim &lt;= p + q; lim &lt;&lt;= <span class="number">1</span>) k++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; lim; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (k - <span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	fill(A + p + <span class="number">1</span>, A + lim, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	fill(B + q + <span class="number">1</span>, B + lim, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dft(A, lim, <span class="number">1</span>), dft(B, lim, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		C[i] = <span class="number">1l</span>l * A[i] * B[i] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dft(C, lim, <span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q - p; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		g[i + mid] = (g[i + mid] + C[i + p]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	cdq(mid + <span class="number">1</span>, r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	prework(n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[i] = finv[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	g[<span class="number">0</span>] = <span class="number">1</span>, h[<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	cdq(<span class="number">0</span>, n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans = func(ans + g[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h2 id="Partitions"><a href="#Partitions" class="headerlink" title="Partitions"></a>Partitions</h2><p><a href="https://codeforces.com/problemset/problem/961/G" target="_blank" rel="noopener">「Codeforces 961G」Partitions</a></p>
<h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定 $n$ 个元素 $w_1, w_2, \cdots, w_n$，定义一个集合 $S$ 的权值为 $\vert S \vert \times \sum_{i \in S} w_i$，定义一个划分的权值为分出所有集合的权值和，求将这 $n$ 个元素划成 $k$ 个集合的权值和之和。</p>
<p>数据范围：$n, k \le 2 \times 10^5$。</p>
<h3 id="思路分析-4"><a href="#思路分析-4" class="headerlink" title="思路分析"></a>思路分析</h3><p>记 $W = \sum_{i = 1}^{n} w_i$，枚举某个点所在集合的大小可得答案等于：</p>
<script type="math/tex; mode=display">W \times \sum_{i = 1}^{n} i \times C(n - 1, i - 1) \times S(n - i, k - 1)</script><p>那么我们开始推式子：</p>
<script type="math/tex; mode=display">\begin{align*} & \sum_{i = 1}^{n} i \times C(n - 1, i - 1) \times S(n - i, k - 1) \\ = & \sum_{i = 1}^{n} i \times C(n - 1, i - 1) \times \sum_{j = 0}^{k - 1} \frac{(-1)^j \times (k - 1 - j)^{n - i}}{j! \times (k - 1 - j)!} \\ = & \sum_{j = 0}^{k - 1} \frac{(-1)^j}{j! \times (k - 1 - j)!} \sum_{i = 1}^{n} (k - 1 - j)^{n - i} \times i \times C(n - 1, i - 1) \\ = & \sum_{j = 0}^{k - 1} \frac{(-1)^j}{j! \times (k - 1 - j)!} \sum_{i = 1}^{n} \frac{(k - 1 - j)^{n - i} \times i \times (n - 1)!}{(i - 1)! \times (n - i)!} \\ = & \sum_{j = 0}^{k - 1} \frac{(-1)^j}{j! \times (k - 1 - j)!} \sum_{i = 1}^{n} \left[ \frac{(k - 1 - j)^{n - i} \times (n - 1)!}{(i - 1)! \times (n - i)!} + \frac{(k - 1 - j)^{n - i} \times (i - 1) \times (n - 1)!}{(i - 1)! \times (n - i)!} \right] \\ = & \sum_{j = 0}^{k - 1} \frac{(-1)^j}{j! \times (k - 1 - j)!} \sum_{i = 1}^{n} \left[ \frac{(k - 1 - j)^{n - i} \times (n - 1)!}{(i - 1)! \times (n - i)!} + \frac{(k - 1 - j)^{n - i} \times (n - 1)!}{(i - 2)! \times (n - i)!} \right] \\ = & \sum_{j = 0}^{k - 1} \frac{(-1)^j}{j! \times (k - 1 - j)!} \left[ \sum_{i = 1}^{n} (k - 1 - j)^{n - i} \times C(n - 1, i - 1) + (n - 1) \sum_{i = 1}^{n} (k - 1 - j)^{n - i} \times C(n - 2, i - 1) \right] \\ & \sum_{j = 0}^{k - 1} \frac{(-1)^j}{j! \times (k - 1 - j)!} \left[ (k -  j)^{n - 1} + (n - 1)  (k - j)^{n - 2} \right] \end{align*}</script><p>那么我们直接计算即可。</p>
<p>当然也有巧妙一点的方法：考虑某个元素对答案的贡献。首先每个元素都会贡献自己，贡献是 $w_i \times S(n, k)$；另外如果它和其他元素同在一个集合，我们让该集合中的每个其他元素都给它 $1$ 的贡献，也就是说我们可以先从剩下 $n - 1$ 个元素中选 $k$ 个集合，然后 $n - 1$ 个元素都给新加入的元素贡献 $1$，总贡献就是 $w_i \times (n - 1) \times S(n - 1, k)$。所以答案就是 $W \times \left[ S(n, k) + (n - 1) \times S(n - 1, k) \right]$，直接计算即可。时间复杂度 $O(n)$。</p>
<h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, k, sum, num;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x &lt; mod ? x : x - mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> c = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="number">1l</span>l * a * a % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = <span class="number">1l</span>l * a * c % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">S</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ret = <span class="number">0</span>, cur = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cur = <span class="number">1l</span>l * cur * qpow(i, mod - <span class="number">2</span>) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ret = (ret + <span class="number">1l</span>l * (i &amp; <span class="number">1</span> ? mod - <span class="number">1</span> : <span class="number">1</span>) * cur % mod * qpow(m - i, n)) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cur = <span class="number">1l</span>l * cur * (m - i) % mod * qpow(i + <span class="number">1</span>, mod - <span class="number">2</span>) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		sum = func(sum + x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	num = (S(n, k) + <span class="number">1l</span>l * S(n - <span class="number">1</span>, k) * (n - <span class="number">1</span>)) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, <span class="number">1l</span>l * sum * num % mod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h2 id="异或图"><a href="#异或图" class="headerlink" title="异或图"></a>异或图</h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定 $n$ 张 $m$ 个点的无向图，两个图的异或定义为邻接矩阵的异或，求所有 $2^n$ 个子集的图的异或和中有多少图是联通的。</p>
<p>数据范围：$n \le 60, m \le 10$。</p>
<h3 id="思路分析-5"><a href="#思路分析-5" class="headerlink" title="思路分析"></a>思路分析</h3><p>前置技能——斯特林反演（的变形？）：</p>
<p>$F(m) = \sum_{i = m}^{n} S(i, m) \times G(i)$</p>
<p>$G(m) = \sum_{i = m}^{n} (-1)^{i - m} \times s(i, m) \times F(i)$</p>
<p>我们考虑枚举全集的一个划分，强制划分出的任意两个集合之间不能有边（集合内部可以有边）。那么对于一个有 $m$ 个联通块的异或图，如果我们强制划出了 $n$ 个集合，这个方案会被计算 $S(m, n)$ 次。相当于如果我们强制划出 $i$ 个集合算出的方案数为 $F_i$，有 $i$ 个联通块的异或图共有 $G_i$ 个，那么 $F, G$ 就满足上面斯特林反演的关系。所以，我们先枚举划分，然后用线性基求出满足划分条件的异或图个数，从而求出 $F$ 数组，最后用斯特林反演求出 $G(1)$ 即可（注：$s(n, 1) = (n - 1)!$）。时间复杂度 $O(B(m) \cdot n \cdot \frac{m (m - 1)}{2})$，其中 $B(n) = \sum_{i = 0}^{n} S(n, i)$。</p>
<h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">60</span>, maxm = <span class="number">10</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, a[maxn + <span class="number">3</span>][maxm + <span class="number">3</span>][maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> id[maxm + <span class="number">3</span>], tmp[maxm + <span class="number">3</span>][maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll f[maxm + <span class="number">3</span>], num[maxn + <span class="number">3</span>], base[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> s[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(ll x, <span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; ~i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (x &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (!base[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				base[i] = x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			x ^= base[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		num[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> p = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (id[i] != id[j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">if</span> (a[k][i][j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						num[k] |= <span class="number">1l</span>l &lt;&lt; (ll) p;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				p++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		base[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll ret = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!insert(num[i], p - <span class="number">1</span>)) ret &lt;&lt;= <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> lft, <span class="keyword">int</span> dep)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (lft == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[dep] += solve();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!id[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			x = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> d = dep + <span class="number">1</span>, cnt = <span class="number">0</span>, *cur = tmp[d];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = x + <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!id[i]) cur[++cnt] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	id[x] = d;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> msk = <span class="number">0</span>; msk &lt; <span class="number">1</span> &lt;&lt; cnt; msk++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> y = lft - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (msk &gt;&gt; (i - <span class="number">1</span>) &amp; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				id[cur[i]] = d, y--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(y, d);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (msk &gt;&gt; (i - <span class="number">1</span>) &amp; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				id[cur[i]] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> t = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= maxm; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (j * (j - <span class="number">1</span>) == t * <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					m = j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> p = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt;= m; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				a[i][j][k] = a[i][k][j] = s[++p] - <span class="string">'0'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs(m, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll ans = <span class="number">0</span>, cur = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans += <span class="number">1l</span>l * (i &amp; <span class="number">1</span> ? <span class="number">1</span> : <span class="number">-1</span>) * cur * f[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cur *= i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>容斥原理</tag>
        <tag>斯特林数</tag>
      </tags>
  </entry>
  <entry>
    <title>「学习笔记」长链剖分</title>
    <url>/2019/11/25/20191125-Longest-Decomposition-Notes/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>长链剖分是一种树链剖分，与重链剖分不同的是，每个点的关键儿子是它向下高度最大的儿子。</p>
<p>长链剖分有许多优美的性质。例如，某个点的 $k$ 级祖先所在链的边数一定不小于 $k$；任意两点之间只会跨过 $\sqrt n$ 条链。另外，长链剖分还可以在线性的时间内解决状态规模为子树高度的许多 dp。</p>
<a id="more"></a>
<h1 id="k-级祖先"><a href="#k-级祖先" class="headerlink" title="k 级祖先"></a>k 级祖先</h1><p><a href="https://vijos.org/d/Bashu_OIers/p/5a79a3e1d3d8a103be7e2b81" target="_blank" rel="noopener">「Vijos 巴蜀中学」lxhgww 的奇思妙想</a></p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一棵 $n$ 个点的树，$q$ 次询问点 $x$ 的 $k$ 级祖先。</p>
<p>强制在线，复杂度要求 $O(n \log n) - O(1)$。</p>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>考虑利用简介中提到的一个性质：“某个点的 $k$ 级祖先所在链的长度一定不小于 $k$”。我们先用倍增预处理出每个点向上跳 $2^t$ 步会到达哪个点。考虑 $k$ 在二进制下的最高位 $b$，记 $x$ 的 $2^b$ 级祖先为 $y$，然后我们只要求 $y$ 的 $k - 2^b$ 级祖先。首先有 $y$ 所在链的长度不小于 $2^b$，然后发现 $k - 2^b &lt; 2^b$，所以 $y$ 所在链的长度一定超过 $k - 2^b$。我们只需要处理出每个链顶向上跳不超过链长步会到达哪些点，存进 <code>std::vector</code> 中即可 $O(1)$ 查询 $y$ 的 $k - 2^b$ 级祖先。时间复杂度 $O(n \log n) - O(1)$。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>这题 RE on #6, 7, 8 实在调不出来了，代码仅供参考。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span>, logn = <span class="number">18</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, dep[maxn + <span class="number">3</span>], mx[maxn + <span class="number">3</span>], ch[maxn + <span class="number">3</span>], fa[maxn + <span class="number">3</span>][logn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> top[maxn + <span class="number">3</span>], bot[maxn + <span class="number">3</span>], len[maxn + <span class="number">3</span>], ans, lg[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>], S[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; (fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>]); i++);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		fa[v][<span class="number">0</span>] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dep[v] = dep[u] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (mx[v] + <span class="number">1</span> &gt; mx[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mx[u] = mx[v] + <span class="number">1</span>, ch[u] = v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>, <span class="keyword">int</span> t = <span class="number">1</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	top[u] = t;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa || v == ch[u]) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		solve(v, u, v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (ch[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		len[top[u]]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		solve(ch[u], u, t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		bot[top[u]] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	S[top[u]].push_back(u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (u == t) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x = u; i &lt;= len[u]; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			S[u].push_back(x = fa[x][<span class="number">0</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (k &gt; dep[x]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> t = lg[k];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	x = fa[x][t], k -= <span class="number">1</span> &lt;&lt; t;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> S[top[x]][dep[bot[top[x]]] - dep[x] + k];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		lg[i] = lg[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		G[u].push_back(v), G[v].push_back(u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	solve(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> x, k; m --&gt; <span class="number">0</span>; ) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x ^= ans, k ^= ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans = query(x, k));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h1><p><a href="http://darkbzoj.tk/problem/3252" target="_blank" rel="noopener">「BZOJ 3252」攻略</a></p>
<h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定点带权的点数为 $n$ 的树，要选出 $k$ 条包含 $1$ 的祖先后代链，使得它们并的点权和最大。</p>
<p>$n \le 2 \times 10^5, 1 \le a_i &lt; 2^{31}$。</p>
<h2 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h2><p>考虑带权的长链剖分，剖出的链取前 $k$ 条加起来即可。时间复杂度 $O(n \log n)$。</p>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, k, a[maxn + <span class="number">3</span>], id[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll mx[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll x = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (mx[id[v]] + a[u] &gt; x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			x = mx[id[v]] + a[u], id[u] = id[v];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (id[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		mx[id[u]] += a[u];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		mx[u] = a[u], id[u] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		G[u].push_back(v), G[v].push_back(u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sort(mx + <span class="number">1</span>, mx + n + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	reverse(mx + <span class="number">1</span>, mx + n + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans += mx[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="模版题"><a href="#模版题" class="headerlink" title="模版题"></a>模版题</h1><p><a href="https://codeforces.com/problemset/problem/1009/F" target="_blank" rel="noopener">「CF 1009F」Dominant Indices</a></p>
<h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>记 $f(u, i)$ 为 $u$ 往下走 $i$ 步到达的点数，给定 $n$ 个点的树，对于每个点求出序列 $[f(u, 0), f(u, 1), \cdots]$ 中的最大值的最小下标。</p>
<p>数据范围：$n \le 10^6$。</p>
<h2 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h2><p>考虑长链剖分求 $f$，对于一个点，先继承特殊儿子的答案，然后对于其他儿子暴力更新即可。时间复杂度 $O(n)$。</p>
<h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><p>用 <code>std::vector</code> 实现，代码更短哦！</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, mx[maxn + <span class="number">3</span>], ch[maxn + <span class="number">3</span>], id[maxn + <span class="number">3</span>], ans[maxn + <span class="number">3</span>], res[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>], f[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (mx[v] + <span class="number">1</span> &gt; mx[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mx[u] = mx[v] + <span class="number">1</span>, ch[u] = v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> x = id[u] = ch[u] ? id[ch[u]] : u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ans[u] = ch[u] ? ans[ch[u]] + <span class="number">1</span> : <span class="number">0</span>, res[u] = ch[u] ? res[ch[u]] : <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	f[x].push_back(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (res[u] == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans[u] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa || v == ch[u]) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> y = id[v];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; f[y].size(); j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> p = f[x].size() - f[y].size() + j - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			f[x][f[x].size() - f[y].size() + j - <span class="number">1</span>] += f[y][j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> id = f[x].size() - p - <span class="number">1</span>, val = f[x][p];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (val &gt; res[u] || (val == res[u] &amp;&amp; id &lt; ans[u])) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				ans[u] = id, res[u] = val;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		G[u].push_back(v), G[v].push_back(u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="重建计划"><a href="#重建计划" class="headerlink" title="重建计划"></a>重建计划</h1><p><a href="http://darkbzoj.tk/problem/1758" target="_blank" rel="noopener">「WC 2010」重建计划</a></p>
<h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定边带权的 $n$ 个点的树，选出一条长度在 $[L, U]$ 内的链，使得边权的平均值最小。</p>
<p>数据范围：$n \le 10^5$。</p>
<h2 id="思路分析-3"><a href="#思路分析-3" class="headerlink" title="思路分析"></a>思路分析</h2><p>首先可以想到二分答案，问题变成链的最大权值和是否超过 $0$。考虑长链剖分，设 $f(u, i)$ 表示 $u$ 的子树内以 $u$ 为端点的权值最大的长度为 $i$ 的路径长度。我们考虑使用线段树维护 $f$，从特殊儿子继承时只需要区间加，从其他儿子先更新答案（线段树区间最大值），后更新 $f$（暴力）即可。时间复杂度 $O(n \log^2 n)$。</p>
<h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><p>注意这个题不能用 <code>std::vector</code>，而是要使用内存分配的技巧。对于每一条链，我们改变 dfs 的顺序，使得每条链的 dfs 序连续。这样开一个全局的线段树，一条链上的一段就可以对应线段树的一个区间了。推荐简单题使用 <code>std::vector</code>，难题使用内存分配的方法。（因为难题用 <code>std::vector</code> 会写自闭的，详见 HOT Hotels）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>, maxm = <span class="number">1</span> &lt;&lt; <span class="number">18</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> db inf = <span class="number">1e18</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, L, U, mxd[maxn + <span class="number">3</span>], ch[maxn + <span class="number">3</span>], top[maxn + <span class="number">3</span>], bot[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> cnt, wei[maxn + <span class="number">3</span>], dfn[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">db val[maxn + <span class="number">3</span>], ans, mx[maxm + <span class="number">3</span>], tag[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>], W[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	G[u].push_back(v), W[u].push_back(w);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v, w; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i], w = W[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		wei[v] = w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs_1(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (mxd[v] + <span class="number">1</span> &gt; mxd[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mxd[u] = mxd[v] + <span class="number">1</span>, ch[u] = v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>, <span class="keyword">int</span> t = <span class="number">1</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfn[u] = ++cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	top[u] = t;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (ch[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs_2(ch[u], u, t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		bot[u] = bot[ch[u]];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		bot[u] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa || v == ch[u]) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs_2(v, u, v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(db &amp;x, db y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	x &lt; y ? x = y : <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (x &lt;&lt; 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (ls | 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	mx[x] = <span class="number">0</span>, tag[x] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l == r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	build(ls, l, mid);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	build(rs, mid + <span class="number">1</span>, r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	mx[ls] += tag[x], tag[ls] += tag[x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	mx[rs] += tag[x], tag[rs] += tag[x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	tag[x] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	mx[x] = max(mx[ls], mx[rs]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">chk_max</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> y, db z)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l == r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		mx[x] = max(mx[x], z);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	push_down(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (y &lt;= mid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		chk_max(ls, l, mid, y, z);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		chk_max(rs, mid + <span class="number">1</span>, r, y, z);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	maintain(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> lx, <span class="keyword">int</span> rx, db y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l &gt;= lx &amp;&amp; r &lt;= rx) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		mx[x] += y, tag[x] += y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	push_down(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (lx &lt;= mid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		modify(ls, l, mid, lx, rx, y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (rx &gt; mid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		modify(rs, mid + <span class="number">1</span>, r, lx, rx, y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	maintain(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">db <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> lx, <span class="keyword">int</span> rx)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l &gt;= lx &amp;&amp; r &lt;= rx) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> mx[x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	push_down(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	db ret = -inf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (lx &lt;= mid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		upd(ret, query(ls, l, mid, lx, rx));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (rx &gt; mid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		upd(ret, query(rs, mid + <span class="number">1</span>, r, lx, rx));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">db <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> query(<span class="number">1</span>, <span class="number">1</span>, n, x, x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> ls</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rs</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> mid</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> x = dfn[u];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (ch[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		solve(ch[u], u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		modify(<span class="number">1</span>, <span class="number">1</span>, n, x + <span class="number">1</span>, dfn[bot[u]], val[ch[u]]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> lft = x + L, rht = min(dfn[bot[u]], x + U);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (lft &lt;= rht) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			upd(ans, query(<span class="number">1</span>, <span class="number">1</span>, n, lft, rht));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa || v == ch[u]) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		solve(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> y = dfn[v];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= dfn[bot[v]] - y; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> lft = max(x + L - <span class="number">1</span> - j, x), rht = min(x + U - <span class="number">1</span> - j, dfn[bot[u]]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (lft &lt;= rht) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				upd(ans, query(<span class="number">1</span>, <span class="number">1</span>, n, lft, rht) + get(y + j) + val[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= dfn[bot[v]] - y; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			chk_max(<span class="number">1</span>, <span class="number">1</span>, n, dfn[u] + j + <span class="number">1</span>, get(y + j) + val[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(db x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	build(<span class="number">1</span>, <span class="number">1</span>, n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		val[i] = wei[i] - x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ans = -inf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	solve(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ans &gt;= <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;L, &amp;U);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u, &amp;v, &amp;w);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		add(u, v, w), add(v, u, w);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs_1(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs_2(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	db l = <span class="number">0</span>, r = <span class="number">1e6</span>, mid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (l + <span class="number">1e-4</span> &lt; r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		mid = (l + r) / <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (check(mid)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			l = mid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			r = mid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%.3lf\n"</span>, l);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="HOT-Hotels"><a href="#HOT-Hotels" class="headerlink" title="HOT Hotels"></a>HOT Hotels</h1><p><a href="http://darkbzoj.tk/problem/4543" target="_blank" rel="noopener">「POJ 2014」HOT Hotels</a></p>
<h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定 $n$ 个点的树，求有多少点的三元组满足它们两两之间距离相等。</p>
<p>数据范围：$n \le 10^5$。</p>
<h2 id="思路分析-4"><a href="#思路分析-4" class="headerlink" title="思路分析"></a>思路分析</h2><p>发现三元组肯定有一个中心到三个点距离相等。记 $f(u, i)$ 表示 $u$ 子树内和它距离为 $i$ 的点数，$g(u, i)$ 表示 $u$ 子树内有多少点对满足它们到 LCA 的距离都为 $t$ 且 LCA 到 $u$ 的距离为 $t - i$（也就是说在上面加上长度为 $i$ 的链后可以形成方案）。那么转移方程如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n;i ++) ans += g[x][i] * (i == <span class="number">0</span> ? <span class="number">0</span> : f[to][i<span class="number">-1</span>]) + g[to][i+<span class="number">1</span>] * f[x][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n;i ++) g[x][i] += f[x][i] * (i == <span class="number">0</span> ? <span class="number">0</span> : f[to][i<span class="number">-1</span>]) + g[to][i+<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) f[x][i] += f[to][i<span class="number">-1</span>];</span></pre></td></tr></table></figure>
<p>（转自 <a href="https://www.luogu.com.cn/blog/Treaker/solution-p3565" target="_blank" rel="noopener">Treaker 的博客</a>）</p>
<p>注意 $f(u, 0)$ 的初值为 $1$，dfs 完 $u$ 时还要让 $\text{ans} \leftarrow \text{ans} + g(u, 0)$。</p>
<p>那么使用长链剖分优化即可。时间复杂度 $O(n)$。</p>
<h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><p>用 <code>std::vector</code> 写的，由于 $g$ 数组转移的特殊，下标的变化很玄学，细节比较多。使用分配内存的方法就可以减少细节量。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// f[x][i] = p[x][f[x].size() - i - 1]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// g[x][i] = q[x][i - mx(x) + 1]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// p[x][i] = f[x][f[x].size() - i - 1]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// q[x][i] = g[x][i + mx(x) - 1]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, tot, ch[maxn + <span class="number">3</span>], mx[maxn + <span class="number">3</span>], id[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;ll&gt; f[maxn + <span class="number">3</span>], g[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (mx[v] + <span class="number">1</span> &gt; mx[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mx[u] = mx[v] + <span class="number">1</span>, ch[u] = v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> x = id[u] = ch[u] ? id[ch[u]] : ++tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	f[x].push_back(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (ch[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; <span class="number">2</span>; t++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			g[x].push_back(<span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa || v == ch[u]) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> y = id[v];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; f[x].size(); j++) <span class="keyword">if</span> (j + mx[v] &lt; g[y].size()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans += f[x][f[x].size() - j - <span class="number">1</span>] * g[y][j + mx[v]];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; f[y].size(); j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans += g[x][j + mx[u]] * f[y][f[y].size() - j - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (ch[v]) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= mx[v]; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			g[x][j - <span class="number">1</span> + mx[u] - <span class="number">1</span>] += g[y][j + mx[v] - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; f[y].size(); j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			g[x][j + mx[u]] += f[x][f[x].size() - (j + <span class="number">1</span>) - <span class="number">1</span>] * f[y][f[y].size() - j - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; f[y].size(); j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			f[x][j + f[x].size() - f[y].size() - <span class="number">1</span>] += f[y][j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (ch[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans += g[x][mx[u] - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (mx[u] - <span class="number">2</span> &gt;= <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			g[x][mx[u] - <span class="number">2</span>] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; </span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		G[u].push_back(v), G[v].push_back(u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>线段树</tag>
        <tag>长链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title>「NOI 2018」情报中心（线段树 + 虚树）</title>
    <url>/2019/10/28/20191028-NOI2018-Intelligence-Center/</url>
    <content><![CDATA[<p><img src="/images/20191028-NOI2018-Intelligence-Center.png" alt=""></p>
<a id="more"></a>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><a href="https://loj.ac/problem/2722" target="_blank" rel="noopener">「NOI 2018」情报中心（LOJ 2722）</a></p>
<p>给定一棵 $n$ 个点的树，第 $i$ 条边有权值 $c_i$。有 $m$ 条路径，第 $i$ 条路径有权值 $v_i$。求从 $m$ 条路径中选出两条<strong>至少有一条边相交</strong>的路径，得到的 $链并上的边权和 − 两条链的总费用$ 的最大值​。</p>
<p>数据范围：$\sum{n} \le 10^6, \sum {m} \le 2 \times 10^6, 0 \le c_i \le 10^9, 0 \le v_i \le 10^{10} \times n$。</p>
<p>提示：分两条路径的 LCA 相同或不同讨论。</p>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><p>发现如果两条路径的 LCA 不同，那么它们的交一定是直上直下的一段。</p>
<p><img src="https://wx4.sinaimg.cn/mw690/0060lm7Tly1fukvjr8uamj306708yq34.jpg" alt=""></p>
<p>如上图所示，我们考虑红色和蓝色两条路径。这两条路径形成的权值为：$两条链的总长度 - 两条链的总费用 - (红点到根的距离 - 绿点到根的距离)$。</p>
<p>我们考虑枚举红点，并同时维护经过红点的所有路径。具体地，我们对每个点 $x$ 维护 $f(x, y)$ 表示所有经过点 $x$ 的、LCA 为 $y$ 的路径中，$长度 - 费用$ 的最大值。这样，我们求出 $f(x)$ 后，就可以用 $\max_{i, j}\lbrace f(x, i) + f(x, j) + \max\lbrace d(i), d(j)\rbrace \rbrace - d(x)$ 更新答案，其中 $d(x)$ 表示点 $x$ 到根的距离。当然，我们发现答案要求的是最大值，所以上式就可以简化为：$\max_{i, j}\lbrace f(x, i) + f(x, j) + d(i)\rbrace - d(x)$。</p>
<p>我们考虑使用<strong>下标为结点深度</strong>的线段树来维护这样一个过程。在遍历到某个点时，我们要加入所有以它为端点的路径；在 DFS 完某个点儿子时，我们要将儿子的 $f$ 数组合并到自己身上；在某个点从 DFS 栈中出去时，我们要删除所有 LCA 恰好为它的路径。也就是说，我们只需要支持单点更新，单点清除，以及合并。在修改 / 合并过程进行的同时，我们要进行答案的更新。注意红点的下方必须分叉，所以<strong>加入某个子树之前需要先更新答案</strong>。对于修改，我们用新加入的链和原来线段树中的点更新答案；在合并两棵树 $x, y$ 的时候，我们在合并之前用 $(\text{ls}(x), \text{rs}(y))$ 以及 $(\text{rs}(x), \text{ls}(y))$ 来更新答案即可。具体实现见代码。</p>
<h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><p>如果两条路径的 LCA 相同，那么它们的交一定过 LCA。</p>
<p><img src="https://wx1.sinaimg.cn/mw690/0060lm7Tly1fukvljd5ipj30bf06twev.jpg" alt=""></p>
<p>如上图，这两条路径的权值为 $\frac{两条链的总长度 + 蓝点距离 + 绿点距离 - 两条链的总费用 \times 2}{2}$。</p>
<p>我们首先假设所有链的 LCA 都是根结点。我们还是考虑枚举红点。对于某个蓝点，我们给它对应的绿点赋值为 $链长 - 费用 + 蓝点深度$。这样，对于某个红点下面的两个在不同子树内部的蓝点就可以用 $\frac{绿点权值和 + 绿点距离 - 红点深度 \times 2}{2}$ 来更新答案了。</p>
<p>这就相当于对于每个红点子树内的蓝点求绿点的最远点对。有一个性质是如果边权为正，那么两个集合的最远点对的端点一定是某个集合中最远点对的端点。于是我们合并最远点对即可。注意到红点下面还是需要分叉，处理的方法参考第一部分。</p>
<p>那么如果我们有多个 LCA 该怎么办呢？对每个 LCA 建虚树再跑上面的算法即可。</p>
<p>这样问题就得到了全面的解决，时间复杂度 $O(n \log n)$。</p>
<p><del>这道题目，无疑是善良的出题人无私的馈赠。不仅巧妙考察了选手二合一的思维能力，还对选手的手指速度有着极高的要求。无论是 NOI 测试还是平时练习，这都是一道一个顶俩的题目。出题人相信，这道美妙的题目，可以给拼搏于逐梦之路上的你，提供一个有力的援助。</del></p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>, logn = <span class="number">16</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e18</span>, lim = <span class="number">1e17</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T, n, m, tot, dfn[maxn + <span class="number">3</span>], mn[logn + <span class="number">3</span>][maxn + <span class="number">3</span>], l_2[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num[maxn + <span class="number">3</span>], dep[maxn + <span class="number">3</span>], a[maxn + <span class="number">3</span>], b[maxn + <span class="number">3</span>], c[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll d_v[maxn + <span class="number">3</span>], val[maxn + <span class="number">3</span>], dist[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfn[u] = ++tot, mn[<span class="number">0</span>][tot] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dep[v] = dep[u] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		d_v[v] = d_v[u] + num[v];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		mn[<span class="number">0</span>][++tot] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= tot; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		l_2[i] = l_2[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; <span class="number">1</span> &lt;&lt; k &lt;= tot; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = (<span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>)) + <span class="number">1</span>; i &lt;= tot - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>; i++, j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mn[k][i] = min(mn[k - <span class="number">1</span>][i], mn[k - <span class="number">1</span>][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	x = dfn[x], y = dfn[y];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (x &gt; y) swap(x, y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> t = l_2[y - x + <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> min(mn[t][x], mn[t][y - (<span class="number">1</span> &lt;&lt; t) + <span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> sub_1 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">4e6</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> tot, rt[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll ans, res;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; S[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> ls, rs;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ll f, g;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; tr[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tr[x].f = max(tr[tr[x].ls].f, tr[tr[x].rs].f);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tr[x].g = max(tr[tr[x].ls].g, tr[tr[x].rs].g);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> y, ll f, ll g, <span class="keyword">bool</span> type)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			x = ++tot, tr[x].ls = tr[x].rs = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			tr[x].f = tr[x].g = -inf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (l == r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (type) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				tr[x].f = f, tr[x].g = g;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				tr[x].f = max(tr[x].f, f);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				tr[x].g = max(tr[x].g, g);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (y &lt;= mid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			res = max(res, f + tr[tr[x].rs].g);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			modify(tr[x].ls, l, mid, y, f, g, type);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			res = max(res, tr[tr[x].ls].f + g);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			modify(tr[x].rs, mid + <span class="number">1</span>, r, y, f, g, type);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		maintain(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!x || !y) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">return</span> x | y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		res = max(res, tr[tr[x].ls].f + tr[tr[y].rs].g);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		res = max(res, tr[tr[y].ls].f + tr[tr[x].rs].g);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tr[x].ls = merge(tr[x].ls, tr[y].ls);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tr[x].rs = merge(tr[x].rs, tr[y].rs);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tr[x].f = max(tr[x].f, tr[y].f);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tr[x].g = max(tr[x].g, tr[y].g);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> x = S[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (u == c[x]) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			res = -inf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			modify(rt[u], <span class="number">0</span>, n - <span class="number">1</span>, dep[c[x]], dist[x] - val[x], dist[x] - val[x] + d_v[c[x]], <span class="literal">false</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans = max(ans, res - d_v[u]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dfs(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			modify(rt[v], <span class="number">0</span>, n - <span class="number">1</span>, dep[u], -inf, -inf, <span class="literal">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			res = -inf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			rt[u] = merge(rt[u], rt[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans = max(ans, res - d_v[u]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function">ll <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;().swap(S[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			rt[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans = -inf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			S[a[i]].push_back(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			S[b[i]].push_back(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tot = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tr[<span class="number">0</span>].f = -inf, tr[<span class="number">0</span>].g = -inf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> sub_2 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> tot, k, top, st[maxn + <span class="number">3</span>], vis[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll num[maxn + <span class="number">3</span>], ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; S[maxn + <span class="number">3</span>], T[maxn + <span class="number">3</span>], V[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pr[maxn * <span class="number">2</span> + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x; ll w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		point(<span class="keyword">int</span> x = <span class="number">0</span>, ll w = <span class="number">0</span>): x(x), w(w) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">diameter</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		point a, b; ll w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		diameter(point a = point(), point b = point(), ll w = -inf): a(a), b(b), w(w) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> diameter &amp;x, <span class="keyword">const</span> diameter &amp;y) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">return</span> x.w &lt; y.w || (x.w == y.w &amp;&amp; !x.a.x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; f[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (vis[x] != tot) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			vis[x] = tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;().swap(T[x]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;().swap(V[x]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		clear(u), clear(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		T[u].push_back(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function">ll <span class="title">get_dist</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> d_v[x] + d_v[y] - d_v[lca(x, y)] * <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function">diameter <span class="title">func</span><span class="params">(point a, point b, ll x, <span class="keyword">bool</span> type)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!a.x || !b.x) <span class="keyword">return</span> point(!a.x ? b : a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		diameter ret = diameter(a, b, (a.w + b.w + get_dist(a.x, b.x)) / <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (type) ans = max(ans, ret.w - x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function">diameter <span class="title">merge</span><span class="params">(diameter x, diameter y, ll z)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		diameter ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ret = max(ret, func(x.a, y.a, z, <span class="literal">true</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ret = max(ret, func(x.a, y.b, z, <span class="literal">true</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ret = max(ret, func(x.b, y.a, z, <span class="literal">true</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ret = max(ret, func(x.b, y.b, z, <span class="literal">true</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ret = max(ret, max(x, y));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[u] = diameter();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x, y; i &lt; V[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			x = V[u][i], y = u ^ a[x] ^ b[x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			point p = point(y, num[x] + d_v[u]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			f[u] = merge(f[u], func(p, p, <span class="number">0</span>, <span class="literal">false</span>), d_v[u]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; T[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			v = T[u][i], dfs(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			f[u] = merge(f[u], f[v], d_v[u]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function">ll <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;().swap(S[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			vis[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			S[c[i]].push_back(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tot = <span class="number">0</span>, ans = -inf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			k = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; S[i].size(); j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> x = S[i][j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				pr[++k] = make_pair(dfn[a[x]], a[x]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				pr[++k] = make_pair(dfn[b[x]], b[x]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			sort(pr + <span class="number">1</span>, pr + k + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			top = <span class="number">0</span>, st[++top] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			++tot, clear(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, x, y; j &lt;= k; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				x = pr[j].second;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (x == st[top]) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				y = lca(x, st[top]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (y != st[top]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">while</span> (top &gt; <span class="number">1</span> &amp;&amp; dfn[y] &lt; dfn[st[top - <span class="number">1</span>]]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						add(st[top - <span class="number">1</span>], st[top]), top--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">if</span> (dfn[y] &gt; dfn[st[top - <span class="number">1</span>]]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						add(y, st[top]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">						st[top] = y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						add(y, st[top]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">						top--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				st[++top] = x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; top; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add(st[j], st[j + <span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; S[i].size(); j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> x = S[i][j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				V[a[x]].push_back(x), V[b[x]].push_back(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				num[x] = dist[x] - val[x] * <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, v; j &lt; T[i].size(); j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				v = T[i][j], dfs(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; S[i].size(); j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> x = S[i][j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">settings</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ONLINE_JUDGE</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	freopen(<span class="string">"center.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	freopen(<span class="string">"center.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	settings();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (T --&gt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tot = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;().swap(G[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u, &amp;v, &amp;w);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			G[u].push_back(v), num[v] = w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		prework();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d %lld"</span>, &amp;a[i], &amp;b[i], &amp;val[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			c[i] = lca(a[i], b[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dist[i] = d_v[a[i]] + d_v[b[i]] - d_v[c[i]] * <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ll ans = max(sub_1::main(), sub_2::main());</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (ans &lt; -lim) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">puts</span>(<span class="string">"F"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>虚树</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>「学习笔记」半平面交与凸包的对偶</title>
    <url>/2019/10/20/20191020-Half-Plane-Intersection-Notes/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以后的博客中可能会有一些计算几何的内容。</p>
<p>李超线段树已经在路上了。</p>
<p><del>又水了一篇博客呢</del></p>
<a id="more"></a>
<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>本文主要参考<a href="http://trinkle.blog.uoj.ac/blog/235" target="_blank" rel="noopener">这篇博客</a>。</p>
<p>问题：给定一些形如 $y \le kx + b$ 的半平面，求它们的交。</p>
<p><img src="/images/20191020-Half-Plane-Intersection-Notes-0.png" alt=""></p>
<p>不难发现这个图形的轮廓一定是某个上凸壳。</p>
<p>结论：将一条线视作一个点 $(k_i, b_i)$，做这些点的上凸壳，在凸壳上的点都在半平面交上。证明如下：</p>
<p>考虑怎么求半平面交。首先将斜率从大到小排序，然后将直线依次加入半平面交。发现半平面交一定满足：相邻两直线的交点横坐标单调递增。维护一个栈表示当前的半平面交，栈顶元素是其中斜率最小的。现在我们要加入一条斜率比栈中任何一个元素都小的直线。我们记新直线为 $l_1$，此时的栈顶为 $l_2$，栈顶下面的元素为 $l_3$。</p>
<p><img src="/images/20191020-Half-Plane-Intersection-Notes-1.png" alt=""></p>
<p>如图，如果 $l_1$ 和 $l_2$ 的交点在 $l_1, l_3$ 交点的右边（蓝色线），那么就直接把新的线加入栈中；否则（红色线），我们就需要弹出栈顶元素。也就是说，我们要一直弹栈，直到 $\frac{b_2 - b_1}{k_1 - k_2} &gt; \frac{b_3 - b_1}{k_1 - k_3}$。</p>
<p>相信聪明的你已经已经看出，这个式子和凸包的式子十分类似。于是我们就可以用解凸包的方法来解半平面交了。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>这里放了一道 ZR 的题目，题意转化后就变成了给定 $n$ 条直线，每次询问编号在一个区间内部的直线中某个横坐标上的最小值。考虑建出线段树，然后每个节点维护一个多条直线的最小值的轮廓（其实就是半平面交）就行了。求半平面交的内容在结构体 <code>ds</code> 内部。时间复杂度 $O(n \log^2 n)$。（其实可以 $O(n \log n)$ 但是懒得写）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> __main__ &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">typedef</span> __int128 lll;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">typedef</span> <span class="keyword">double</span> db;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>, maxm = <span class="number">1</span> &lt;&lt; <span class="number">18</span>, logn = <span class="number">17</span>, maxk = maxn * <span class="number">18</span>, inf = <span class="number">1e9</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">const</span> ll infl = ll(<span class="number">1e18</span> + <span class="number">.5</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> n, m, q, l_2[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ds</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> n, a[maxn + <span class="number">3</span>], mn[logn + <span class="number">3</span>][maxn + <span class="number">3</span>], top, st[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> tot, lft[maxm + <span class="number">3</span>], cnt[maxm + <span class="number">3</span>], id[maxk + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ll b[maxn + <span class="number">3</span>], s[maxn + <span class="number">3</span>], p[maxk + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		pair&lt;<span class="keyword">int</span>, ll&gt; pr[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="meta">#<span class="meta-keyword">define</span> ls (x &lt;&lt; 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="meta">#<span class="meta-keyword">define</span> rs (ls | 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">return</span> (lll) (b[i] - b[j]) * (a[i] - a[k]) &lt; (lll) (b[i] - b[k]) * (a[i] - a[j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">bao</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			top = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = l, id; i &lt;= r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				id = pr[i].second;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">while</span> (top &gt; <span class="number">1</span> &amp;&amp; !check(id, st[top], st[top - <span class="number">1</span>])) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					top--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				st[++top] = id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (l == r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				pr[l] = make_pair(-a[l], l);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				build(ls, l, mid);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				build(rs, mid + <span class="number">1</span>, r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				inplace_merge(pr + l, pr + mid + <span class="number">1</span>, pr + r + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			bao(l, r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			cnt[x] = top, lft[x] = tot + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				id[++tot] = st[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (i &lt; top) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					db t = <span class="number">-1.</span> * (b[st[i + <span class="number">1</span>]] - b[st[i]]) / (a[st[i + <span class="number">1</span>]] - a[st[i]]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">					p[tot] = t - <span class="number">3</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">while</span> (p[tot] * a[st[i]] + b[st[i]] &lt;= p[tot] * a[st[i + <span class="number">1</span>]] + b[st[i + <span class="number">1</span>]]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						p[tot]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125; </span></pre></td></tr><tr><td class="code"><pre><span class="line">					p[tot]--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			p[tot] = infl;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> lx, <span class="keyword">int</span> rx, <span class="keyword">int</span> k)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (l &gt;= lx &amp;&amp; r &lt;= rx) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> t = lower_bound(p + lft[x], p + lft[x] + cnt[x], k) - p;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">return</span> <span class="number">1l</span>l * k * a[id[t]] + b[id[t]];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ll ans = infl;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (lx &lt;= mid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				ans = min(ans, query(ls, l, mid, lx, rx, k));</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (rx &gt; mid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				ans = min(ans, query(rs, mid + <span class="number">1</span>, r, lx, rx, k));</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="meta">#<span class="meta-keyword">undef</span> mid</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="meta">#<span class="meta-keyword">undef</span> ls</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="meta">#<span class="meta-keyword">undef</span> rs</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				b[i] = <span class="number">2l</span>l * i * a[i] - <span class="number">2</span> * s[i - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				s[i] = s[i - <span class="number">1</span>] + a[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				mn[<span class="number">0</span>][i] = a[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; <span class="number">1</span> &lt;&lt; k &lt;= n; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = (<span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>)) + <span class="number">1</span>; i &lt;= n - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>; i++, j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					mn[k][i] = min(mn[k - <span class="number">1</span>][i], mn[k - <span class="number">1</span>][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			build(<span class="number">1</span>, <span class="number">1</span>, n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="function">ll <span class="title">sum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">return</span> s[r] - s[l - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="function"><span class="keyword">int</span> <span class="title">rmq</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> inf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> x = l_2[r - l + <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">return</span> min(mn[x][l], mn[x][r - (<span class="number">1</span> &lt;&lt; x) + <span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="function">ll <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">return</span> query(<span class="number">1</span>, <span class="number">1</span>, n, max(<span class="number">1</span>	, x - y / <span class="number">2</span>), max(<span class="number">1</span>, x - <span class="number">1</span>), y - <span class="number">2</span> * x) + <span class="number">2</span> * s[x - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; a, b, c, d;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;q);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a.n = n - <span class="number">1</span>, c.n = n - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		b.n = m - <span class="number">1</span>, d.n = m - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= max(n, m); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			l_2[i] = l_2[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a.a[i] = x, c.a[n - i] = x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt; m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			b.a[i] = x, d.a[m - i] = x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a.init(), b.init();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		c.init(), d.init();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x_1, y_1, x_2, y_2, d_a, d_b, x; i &lt;= q; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;x_1, &amp;y_1, &amp;x_2, &amp;y_2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (x_1 &gt; x_2) swap(x_1, x_2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (y_1 &gt; y_2) swap(y_1, y_2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			d_a = x_2 - x_1, d_b = y_2 - y_1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			x_2--, y_2--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ll ans = a.sum(x_1, x_2) + b.sum(y_1, y_2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (d_a &lt; d_b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				x = d_b - d_a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (x &amp; <span class="number">1</span>) x--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				ans += min(<span class="number">1l</span>l * a.rmq(x_1, x_2) * x, min(a.solve(x_1, x), c.solve(n - x_2, x)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				x = d_a - d_b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (x &amp; <span class="number">1</span>) x--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				ans += min(<span class="number">1l</span>l * b.rmq(y_1, y_2) * x, min(b.solve(y_1, x), d.solve(m - y_2, x)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	__main__::main();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title>「APIO 2019」全套题解</title>
    <url>/2019/10/18/20191018-APIO2019-Tutorial/</url>
    <content><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li><p><a href="/2019/10/18/20191018-APIO2019-Tutorial/#奇怪装置">Problem A. 奇怪装置</a></p>
</li>
<li><p><a href="/2019/10/18/20191018-APIO2019-Tutorial/#桥梁">Problem B. 桥梁</a></p>
</li>
<li><p><a href="/2019/10/18/20191018-APIO2019-Tutorial/#路灯">Problem C. 路灯</a></p>
</li>
</ul>
<a id="more"></a>
<h1 id="奇怪装置"><a href="#奇怪装置" class="headerlink" title="奇怪装置"></a>奇怪装置</h1><p><a href="https://www.luogu.org/problem/P5444" target="_blank" rel="noopener">「Luogu P5444」奇怪装置</a></p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定 $A, B$ 以及 $n$ 个时间区间，时钟在时刻 $t$ 会显示 $(t + \lfloor \frac{t}{B} \rfloor \bmod A, t \bmod B)$。问共会出现多少个不同的时刻。</p>
<p>数据范围：$n \le 10^6, 1 \le AB \le 10^{18}, 0 \le l_i \le r_i \le 10^{18}$。</p>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>考虑两个时刻什么时候显示的二元组相等。设 $t_2 = t_1  + m B$，那么有：</p>
<script type="math/tex; mode=display">t_1 + \lfloor \frac{t_1}{B} \rfloor \equiv t_1 + m B + \lfloor \frac{t_1 + mB}{B}\rfloor\pmod A</script><p>设 $\lfloor \frac{t_1}{B} \rfloor = k$，则：</p>
<script type="math/tex; mode=display">\begin{align*} t_1 + k & \equiv t_1 + m B + k + m & \pmod A \\ 0 & \equiv m(B + 1) & \pmod A \end{align*}</script><p>所以 $A \vert m(B + 1)$，那么 $m$ 的最小值就是 $\frac{A}{\gcd(A, B + 1)}$，也就是说循环节的长度为 $\frac{AB}{\gcd(A, B + 1)}$。这样我们对所有时间区间处理一下然后用扫描线求它们的交即可。时间复杂度 $O(n \log n)$。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e6</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, tot, sum[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll A, B, C, l, r, temp[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">pair&lt;ll, ll&gt; sect[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> b ? gcd(b, a % b) : a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %lld %lld"</span>, &amp;n, &amp;A, &amp;B);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	C = A / gcd(A, B + <span class="number">1</span>) * B;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>, &amp;l, &amp;r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (r - l + <span class="number">1</span> &gt;= C) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, C);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		l %= C, r %= C;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (l &lt;= r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			sect[++tot] = make_pair(l, r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			sect[++tot] = make_pair(<span class="number">0</span>, r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			sect[++tot] = make_pair(l, C - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		temp[++m] = sect[i].first;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		temp[++m] = sect[i].second + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sort(temp + <span class="number">1</span>, temp + m + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = lower_bound(temp + <span class="number">1</span>, temp + m + <span class="number">1</span>, sect[i].first) - temp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> y = lower_bound(temp + <span class="number">1</span>, temp + m + <span class="number">1</span>, sect[i].second + <span class="number">1</span>) - temp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		sum[x]++, sum[y]--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		sum[i] += sum[i - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (sum[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans += temp[i + <span class="number">1</span>] - temp[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="桥梁"><a href="#桥梁" class="headerlink" title="桥梁"></a>桥梁</h1><p><a href="https://www.luogu.org/problem/P5443" target="_blank" rel="noopener">「Luogu P5443」桥梁</a></p>
<h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个带权无向图，支持修改边权，以及询问从一个点出发只经过边权不小于 $w$ 的边能到达多少个点。</p>
<p>数据范围：$n \le 5 \times 10^4, m, q \le 10^5$。</p>
<h2 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h2><p>如果没有修改可以离线做，有了修改后我们就考虑对操作分块，之前的修改离线加入，块内的修改暴力加入。具体地，我们将所有操作分成大小为 $b$ 的块。对于某一个块，我们离线地回答块内部的所有询问。</p>
<p>这时，我们可以把边分成两类：在本块内部有修改的和没有修改的。对于没有修改的边，我们将它们排序，然后离线的做；对于有修改的，它们的数量肯定不超过 $b$，我们就对于每个询问扫一遍这些边，看一下在这个询问的时间点上，它的权值是多少。这样如果 $b = \sqrt q$，那么时间复杂度是 $O(q \sqrt q \log m)$ 的。</p>
<p>需要注意算法的常数优化。有两个小技巧：</p>
<ul>
<li>并查集在执行 $\text{fa}[u] \leftarrow v, \text{size}[v] \leftarrow \text{size}[u] + \text{size}[v]$ 后如果想要撤销，我们只需要记录 $u$，因为剩下的都可以倒推出来。</li>
<li>维护所有边按权值排序的数组时，加入每一块时不需要整体排序，只要做一次块内排序和一次归并即可。归并可以使用 <code>std::merge()</code> 函数，具体见代码。</li>
</ul>
<p>另外，经试验，分块时块的大小 $b$ 为 $750$ 时常数较为优秀。</p>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> __main__ &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span>, maxm = <span class="number">1e5</span>, b = <span class="number">750</span>, maxb = b * <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> n, m, q, w[maxm + <span class="number">3</span>], tot, vis[maxm + <span class="number">3</span>], last[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> cnt, lft[maxb + <span class="number">3</span>], rht[maxb + <span class="number">3</span>], num[maxb + <span class="number">3</span>], wei[maxb + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> all, temp[maxb + <span class="number">3</span>], cur[maxm + <span class="number">3</span>], ans[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> fa[maxn + <span class="number">3</span>], sz[maxn + <span class="number">3</span>], top, st[maxb + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; e[maxm + <span class="number">3</span>], pr[maxm + <span class="number">3</span>], t_1[maxm + <span class="number">3</span>], t_2[maxb + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">event</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> id, op, x, w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> event &amp;a, <span class="keyword">const</span> event &amp;b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">return</span> a.id &lt; b.id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; ev[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">comp_w</span><span class="params">(<span class="keyword">const</span> event &amp;a, <span class="keyword">const</span> event &amp;b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> a.w &lt; b.w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">get_mods</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		++tot, cnt = <span class="number">0</span>, all = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (ev[i].op == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (vis[ev[i].x] != tot) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					vis[ev[i].x] = tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					last[ev[i].x] = l;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					cur[ev[i].x] = w[ev[i].x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">					temp[++all] = ev[i].x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				lft[++cnt] = last[ev[i].x], rht[cnt] = i - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				num[cnt] = ev[i].x, wei[cnt] = cur[ev[i].x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				last[ev[i].x] = i + <span class="number">1</span>, cur[ev[i].x] = ev[i].w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= all; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			lft[++cnt] = last[temp[i]], rht[cnt] = r;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			num[cnt] = temp[i], wei[cnt] = cur[temp[i]];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> x == fa[x] ? x : find(fa[x]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">bool</span> flag)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		u = find(u), v = find(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (u == v) <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (sz[u] &lt; sz[v]) swap(u, v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (flag) st[++top] = v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		fa[v] = u, sz[u] += sz[v];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">bool</span> flag)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		add(e[x].first, e[x].second, flag);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> u = st[top--];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		sz[fa[u]] -= sz[u], fa[u] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y, z; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;x, &amp;y, &amp;z);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			x &gt; y ? swap(x, y) : <span class="keyword">void</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">			e[i] = make_pair(x, y), w[i] = -z;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			pr[i] = make_pair(w[i], i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		sort(pr + <span class="number">1</span>, pr + m + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;ev[i].op, &amp;ev[i].x, &amp;ev[i].w);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ev[i].id = i, ev[i].w = -ev[i].w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>, r = min(q, b); l &lt;= q; l += b, r = min(q, r + b)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			get_mods(l, r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			sort(ev + l, ev + r + <span class="number">1</span>, comp_w);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				fa[i] = i, sz[i] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			top = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> p = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (ev[i].op == <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">while</span> (p &lt;= m &amp;&amp; pr[p].first &lt;= ev[i].w) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						<span class="keyword">if</span> (vis[pr[p].second] != tot) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">							add(pr[p].second, <span class="literal">false</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">						&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						p++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">if</span> (ev[i].id &gt;= lft[j] &amp;&amp; ev[i].id &lt;= rht[j] &amp;&amp; ev[i].w &gt;= wei[j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						add(num[j], <span class="literal">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				ans[ev[i].id] = sz[find(ev[i].x)];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">while</span> (top) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					cancel();</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			sort(ev + l, ev + r + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (ev[i].op == <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (ev[i].op == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					w[ev[i].x] = ev[i].w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			cnt = <span class="number">0</span>, all = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, id; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				id = pr[i].second;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (vis[id] != tot) t_1[++cnt] = pr[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">else</span> t_2[++all] = make_pair(w[id], id);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			sort(t_2 + <span class="number">1</span>, t_2 + all + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			merge(t_1 + <span class="number">1</span>, t_1 + cnt + <span class="number">1</span>, t_2 + <span class="number">1</span>, t_2 + all + <span class="number">1</span>, pr + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	__main__::main();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="路灯"><a href="#路灯" class="headerlink" title="路灯"></a>路灯</h1><p><del>在路上了。</del></p>
<p><a href="https://www.luogu.org/problem/P5445" target="_blank" rel="noopener">「Luogu P5445」路灯</a></p>
<h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>有 $n + 1$ 个位置，$n$ 条道路，第 $i$ 条连接第 $i$ 个位置和第 $i + 1$ 个位置。一开始时有些边是不可用的，有 $q$ 次操作，每次更改一条边的可用性，或者查询某两个点在历史中联通过多少个时刻。</p>
<p>数据范围：$n, q \le 3 \times 10^5$。</p>
<h2 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h2><p>将询问看作二维平面上的点，考虑一次修改的贡献。发现两点之间连通的时刻一定是形如：$t_1$ 时刻联通，$t_2$ 时刻断开，$t_3$ 时刻联通…… 的样子，所以我们考虑差分。设总时刻数为 $T$，当前时刻为 $t$。对于一次修改，如果是将两个区间联通，我们给这两个区间对应的矩形加上 $T - t$；否则它会把某个区间断开，我们给断开后分成的两个区间对应的矩形减去 $T - t$。另外，如果询问时如果两点联通，答案要额外地减去 $T - t$。</p>
<p>这样，我们就把问题转化成了一个带修改的二维数点的问题，使用 CDQ 分治套树状数组 / 树套树 / K-D Tree 即可。时间复杂度 $O(n\log^2 n)$ 或 $O(n \sqrt n)$。</p>
<h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span>, maxm = maxn * <span class="number">8</span>, inf = <span class="number">1e9</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, q, a[maxn + <span class="number">3</span>], m, tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; S;</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll bit[maxn + <span class="number">3</span>], ans[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">event</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> id, type, x, y, z;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> event &amp;a, <span class="keyword">const</span> event &amp;b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> a.x &lt; b.x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; ev[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_ev</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	++tot, ev[tot].id = tot, ev[tot].type = type;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ev[tot].x = x, ev[tot].y = y, ev[tot].z = z;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> d, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> t)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	d++, r++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	add_ev(<span class="number">1</span>, u, l, t), add_ev(<span class="number">1</span>, d, r, t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	add_ev(<span class="number">1</span>, u, r, -t), add_ev(<span class="number">1</span>, d, l, -t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mod</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += i &amp; -i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		bit[i] += y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll y = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i ^= i &amp; -i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		y += bit[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l == r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	cdq(l, mid), cdq(mid + <span class="number">1</span>, r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	inplace_merge(ev + l, ev + mid + <span class="number">1</span>, ev + r + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (ev[i].id &lt;= mid &amp;&amp; ev[i].type == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mod(ev[i].y, ev[i].z);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ev[i].id &gt; mid &amp;&amp; ev[i].type == <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans[ev[i].z] += sum(ev[i].y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (ev[i].id &lt;= mid &amp;&amp; ev[i].type == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mod(ev[i].y, -ev[i].z);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;q);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%1d"</span>, &amp;a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	S.insert(make_pair(-inf, -inf)), S.insert(make_pair(inf, inf));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>; i &lt;= n; i = j + <span class="number">1</span>, j = i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!a[i]) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		add(i, i, i, i, q);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (j &lt; n &amp;&amp; a[j + <span class="number">1</span>] == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			j++, add(i, j, j, j, q);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		S.insert(make_pair(i, j));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">set</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;::iterator it, ti;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y, l, r; i &lt;= q; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (s[<span class="number">1</span>] == <span class="string">'t'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (a[x]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				it = S.lower_bound(make_pair(x + <span class="number">1</span>, <span class="number">0</span>)), it--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				l = it -&gt; first, r = it -&gt; second, S.erase(it);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (l &lt; x) S.insert(make_pair(l, x - <span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (x &lt; r) S.insert(make_pair(x + <span class="number">1</span>, r));</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add(l, x, x, r, i - q);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				it = S.lower_bound(make_pair(x + <span class="number">1</span>, <span class="number">0</span>)), l = r = x, ti = it, ti--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (it -&gt; first == x + <span class="number">1</span>) r = it -&gt; second, S.erase(it);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (ti -&gt; second == x - <span class="number">1</span>) l = ti -&gt; first, S.erase(ti);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				S.insert(make_pair(l, r));</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add(l, x, x, r, q - i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[x] ^= <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y), y--, ++m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">bool</span> flag = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			it = S.lower_bound(make_pair(x + <span class="number">1</span>, <span class="number">0</span>)), it--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (it -&gt; second &gt;= y) ans[m] = i - q, flag = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			add_ev(<span class="number">2</span>, x, y, m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	cdq(<span class="number">1</span>, tot);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>数论</tag>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title>「Codechef SEAARC」Sereja And Arcs（数据分治）</title>
    <url>/2019/10/16/20191016-Codechef-Sereja-And-Arcs/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><a href="https://www.codechef.com/problems/SEAARC" target="_blank" rel="noopener">「Codechef SEAARC」Sereja and Arcs</a></p>
<p>数轴上有 $n$ 个点，坐标为 $1, 2, \cdots n$。每个点有个颜色，颜色相同的点两两之间会连一条与经过数轴上方的半圆形圆弧，颜色和端点一样。问共有多少对不同色圆弧相交，答案对大素数取模。</p>
<p>数据范围：$n \le 10^5$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>考虑设定阀值 $b$，对于出现次数不超过 $b$ 的颜色，我们暴力地把每条圆弧拿出来，用树状数组来计算有多少对相交；对于剩下的颜色，我们 $O(n)$ 地计算它与剩下所有颜色圆弧的交点个数（这部分可以 dp，具体见代码）。这样总共的复杂度为 $O(nb \log {nb} + \frac{n^2}{b})$，取 $b = 100$ 即可通过。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> __main__ &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>, b = <span class="number">100</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> n, a[maxn + <span class="number">3</span>], prev[maxn + <span class="number">3</span>], last[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> cnt[maxn + <span class="number">3</span>], bit[maxn + <span class="number">3</span>], type[maxn + <span class="number">3</span>], m, temp[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> cur[maxn + <span class="number">3</span>], f[maxn + <span class="number">3</span>], g[maxn + <span class="number">3</span>], h[maxn + <span class="number">3</span>], id[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i ^= i &amp; -i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			bit[i] += y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> y = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += i &amp; -i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			y += bit[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function">ll <span class="title">solve</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ll ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (type[a[i]] == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = prev[i]; j; j = prev[j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					add(i, <span class="number">1</span>), add(j - <span class="number">1</span>, <span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = prev[i]; j; j = prev[j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					ans += sum(j);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">memset</span>(bit, <span class="number">0</span>, <span class="keyword">sizeof</span>(bit));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxn; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (type[i] == <span class="number">0</span> &amp;&amp; last[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				m = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = last[i]; j; j = prev[j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					temp[++m] = j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				reverse(temp + <span class="number">1</span>, temp + m + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> k = prev[temp[j]]; k; k = prev[k]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						add(temp[j], <span class="number">1</span>), add(k - <span class="number">1</span>, <span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> k = prev[temp[j]]; k; k = prev[k]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						ans -= sum(k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> k = prev[temp[j]]; k; k = prev[k]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						add(temp[j], <span class="number">-1</span>), add(k - <span class="number">1</span>, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> x &lt; mod ? x : x - mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>, cnt = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (a[i] == x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				cnt++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur[a[i]] == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				id[i] = cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (cur[a[i]] == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (!prev[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					f[i] = <span class="number">1</span>, g[i] = h[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">int</span> d = id[i] - id[prev[i]], p = prev[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">					f[i] = f[p] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					g[i] = (g[p] + <span class="number">1l</span>l * f[p] * d) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					h[i] = (h[p] + <span class="number">2l</span>l * g[p] * d + <span class="number">1l</span>l * f[p] * d % mod * d) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					ans = (ans + <span class="number">1l</span>l * g[i] * cnt) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					ans = func(ans - h[i] + mod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125; </span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]), cnt[a[i]]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			prev[i] = last[a[i]], last[a[i]] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxn; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			type[i] = cnt[i] &gt;= b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> ans = solve() % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">memcpy</span>(cur, type, <span class="keyword">sizeof</span>(cur));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxn; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (type[i] == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				ans = func(ans + calc(i));</span></pre></td></tr><tr><td class="code"><pre><span class="line">				cur[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	__main__::main();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>数据分治</tag>
      </tags>
  </entry>
  <entry>
    <title>「CCPC 2019 秦皇岛」部分题解</title>
    <url>/2019/10/11/20191011-CCPC2019-Tutorial/</url>
    <content><![CDATA[<h1 id="C-Sakurada-Reset"><a href="#C-Sakurada-Reset" class="headerlink" title="C. Sakurada Reset"></a>C. Sakurada Reset</h1><p><a href="https://codeforces.com/gym/102361/problem/C" target="_blank" rel="noopener">「Gym 102361C」Sakurada Reset（动态规划）</a></p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定数列 $A, B$，将数列中的每个子序列都看作一个 $1000$ 进制数，问有多少对 $(x, y)$ 满足 $x$ 是 $A$ 的某个子序列，$y$ 是 $B$ 的某个子序列，并且 $x &gt; y$。本质相同的子序列只算一次，答案对大素数取模。</p>
<p>数据范围：$n, m \le 5000, 1 \le A_i, B_i \le 100$。</p>
<a id="more"></a>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>令 $p_i$ 表示 $A$ 中满足 $j &lt; i$ 且 $A_j = A_i$ 的最大的 $j$，如果不存在则为 $0$；$q_i$ 在 $B$ 中有类似的定义。首先计算长度不等的对数，发现这时一定是 $x$ 的长度比 $y$ 的大。预处理出每个数列中特定长度的本质不同子序列个数，就可以直接计算答案了。转移方程：$f(i, j) = f(i - 1)(j) + f(i - 1)(j - 1) - f(p_i - 1)(j - 1)$。</p>
<p>之后再考虑 $x, y$ 长度相同时的贡献。$x, y$ 必定有一个 lcp，之后的第一个数一定是 $x$ 中的比 $y$ 中的大，然后就可以随便排了。将这三个阶段写成三个状态：$f, g, h$，$f(i, j)$ 表示选到 $A_i, B_j$ 为止都相同的方案数，$g, h$ 类似。那么 $f$ 要求 $A_i = B_j$，$g$ 要求 $A_i &gt; B_j$，$h$ 没有要求； $f, g$ 可以从 $f$ 转移过来，$h$ 可以从 $g, h$ 转移过来。下面列出 $f$ 的转移方程，$g, h$ 类似：</p>
<script type="math/tex; mode=display">f(x, y) = [A_x = B_y]\sum_{i = p_x}^{x - 1} \sum_{j = p_y}^{y - 1} f(i, j)</script><p>前缀和优化 dp 即可。时间复杂度 $O(\max(n, m)^2)$，注意常数优化。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> __main__ &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e3</span>, mod = <span class="number">998244353</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> n, m, a[maxn + <span class="number">3</span>], b[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> f[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], g[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> last[maxn + <span class="number">3</span>], p_a[maxn + <span class="number">3</span>], p_b[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">read_arr</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x += y, x &lt; mod ? <span class="number">0</span> : x -= mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x -= y, x &lt; <span class="number">0</span> ? x += mod : <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">get_f</span><span class="params">(<span class="keyword">int</span> f[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], <span class="keyword">int</span> p[maxn + <span class="number">3</span>], <span class="keyword">int</span> a[maxn + <span class="number">3</span>], <span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">memset</span>(last, <span class="number">0</span>, <span class="keyword">sizeof</span>(last));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">memcpy</span>(f[i], f[i - <span class="number">1</span>], <span class="keyword">sizeof</span>(f[i][<span class="number">0</span>]) * (i + <span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add(f[i][j], f[i - <span class="number">1</span>][j - <span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (last[a[i]]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					sub(f[i][j], f[last[a[i]] - <span class="number">1</span>][j - <span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			p[i] = last[a[i]];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			last[a[i]] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> x &lt; mod ? x : x - mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> f[][maxn + <span class="number">3</span>], <span class="keyword">int</span> u, <span class="keyword">int</span> d, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		u--, l--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = f[d][r];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (~u) sub(x, f[u][r]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (~l) sub(x, f[d][l]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> ((~u) &amp;&amp; (~l)) add(x, f[u][l]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>, g[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			f[i][<span class="number">0</span>] = <span class="number">1</span>, g[i][<span class="number">0</span>] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			f[<span class="number">0</span>][i] = <span class="number">1</span>, g[<span class="number">0</span>][i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				f[i][j] = <span class="number">0</span>, g[i][j] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (a[i] == b[j]) f[i][j] = sum(f, p_a[i], i - <span class="number">1</span>, p_b[j], j - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (a[i] &gt; b[j]) g[i][j] = sum(f, p_a[i], i - <span class="number">1</span>, p_b[j], j - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add(g[i][j], sum(g, p_a[i], i - <span class="number">1</span>, p_b[j], j - <span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">				add(f[i][j], func(func(f[i][j - <span class="number">1</span>] + f[i - <span class="number">1</span>][j]) - f[i - <span class="number">1</span>][j - <span class="number">1</span>] + mod));</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add(g[i][j], func(func(g[i][j - <span class="number">1</span>] + g[i - <span class="number">1</span>][j]) - g[i - <span class="number">1</span>][j - <span class="number">1</span>] + mod));</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> func(g[n][m]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		read_arr(a, n), read_arr(b, m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		get_f(f, p_a, a, n), get_f(g, p_b, b, m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i &amp;&amp; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				ans = (ans + <span class="number">1l</span>l * f[n][i] * g[m][j]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		add(ans, solve());</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	__main__::main();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="E-Escape"><a href="#E-Escape" class="headerlink" title="E. Escape"></a>E. Escape</h1><p><a href="http://codeforces.com/gym/102361/problem/E" target="_blank" rel="noopener">「Gym 102361E」Escape（最大流）</a></p>
<h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定 $n$ 行 $m$ 列的棋盘，北面某些位置有机器人头朝下，南边有某些位置有出口。棋盘中有一些障碍物，机器人不能通过。你可以在一些没有障碍物的地方放置转弯装置，共有四种（“北 $\leftrightarrow$ 东” 以及其他类似的三种）。问机器人是否能够到达某个出口。</p>
<p>数据范围：$T \le 10, n, m \le 100$。</p>
<h2 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h2><p>一个重要的观察就是每个转弯装置只能给一个人用。那么考虑网络流，给每个格子拆成两个点：横点和竖点，每排的横点连边，每列的竖点连边，机器人和出口与竖点连边。转弯装置相当于联通横点与竖点，也就是在横点和竖点之间连一条边。这样网络中的所有边都是单位容量边，网络流跑得很快。时间复杂度 $O(T \cdot \text{flow}(n \times m, n \times m))$。</p>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> __main__ &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>, maxv = <span class="number">3e4</span>, maxe = <span class="number">2e5</span>, inf = <span class="number">1e9</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> T, n, m, a[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], A, B;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> cnt, src, snk, row[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], col[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> tot, ter[maxe + <span class="number">3</span>], wei[maxe + <span class="number">3</span>], nxt[maxe + <span class="number">3</span>], lnk[maxv + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> dep[maxv + <span class="number">3</span>], cur[maxv + <span class="number">3</span>], q[maxv + <span class="number">3</span>], l, r;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add_e</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ter[++tot] = v, wei[tot] = w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		nxt[tot] = lnk[u], lnk[u] = tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		add_e(u, v, <span class="number">1</span>), add_e(v, u, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add_b</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		add(u, v), add(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">memset</span>(dep, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dep));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dep[src] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		l = r = <span class="number">0</span>, q[r++] = src;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (l &lt; r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> u = q[l++];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = lnk[u], v, w; i; i = nxt[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				v = ter[i], w = wei[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (w &amp;&amp; dep[v] == <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					dep[v] = dep[u] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					q[r++] = v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> ~dep[snk];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">adj</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> x &amp; <span class="number">1</span> ? x + <span class="number">1</span> : x - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (u == snk) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">return</span> f;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> &amp;i = cur[u], v, w; i &amp;&amp; x &lt; f; i = nxt[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			v = ter[i], w = wei[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (w &amp;&amp; dep[v] == dep[u] + <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> t = dfs(v, min(w, f - x));</span></pre></td></tr><tr><td class="code"><pre><span class="line">				wei[i] -= t, wei[adj(i)] += t, x += t;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (x &lt; f) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dep[u] = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (bfs()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">memcpy</span>(cur, lnk, <span class="keyword">sizeof</span>(cur));</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans += dfs(src, inf);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (T --&gt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;n, &amp;m, &amp;A, &amp;B);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="built_in">scanf</span>(<span class="string">"%1d"</span>, &amp;a[i][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			tot = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">memset</span>(lnk, <span class="number">0</span>, <span class="keyword">sizeof</span>(lnk));</span></pre></td></tr><tr><td class="code"><pre><span class="line">			cnt = <span class="number">2</span>, src = <span class="number">1</span>, snk = <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					row[i][j] = ++cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					col[i][j] = ++cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= A; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add(src, col[<span class="number">1</span>][x]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= B; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add(col[n][x], snk);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">if</span> (a[i][j] == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						<span class="keyword">if</span> (i &gt;= <span class="number">2</span> &amp;&amp; a[i - <span class="number">1</span>][j] == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">							add_b(col[i - <span class="number">1</span>][j], col[i][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">						&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						<span class="keyword">if</span> (j &gt;= <span class="number">2</span> &amp;&amp; a[i][j - <span class="number">1</span>] == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">							add_b(row[i][j - <span class="number">1</span>], row[i][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">						&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						add_b(row[i][j], col[i][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (dinic() == A) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="built_in">puts</span>(<span class="string">"No"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	__main__::main();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="H-Houraisan-Kaguya"><a href="#H-Houraisan-Kaguya" class="headerlink" title="H. Houraisan Kaguya"></a>H. Houraisan Kaguya</h1><p>绝对不鸽。</p>
<h1 id="K-MUV-LUV-UNLIMITED"><a href="#K-MUV-LUV-UNLIMITED" class="headerlink" title="K. MUV LUV UNLIMITED"></a>K. MUV LUV UNLIMITED</h1><p><a href="http://codeforces.com/gym/102361/problem/K" target="_blank" rel="noopener">「Gym 102361K」MUV LUV UNLIMITED（博弈论）</a></p>
<h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>有一棵树，先手和后手轮流操作，每次可以拿掉若干叶子结点（不能不拿），拿到根结点的人获胜。问先手是否必胜。</p>
<p>复杂度要求线性。</p>
<h2 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h2><p>对于某棵树，考虑在它的某个<strong>非叶结点</strong>下面加上一个叶子结点，那么：</p>
<ul>
<li>如果原树是必败态，先手第一次只取新叶子后就留下了必败态，那么新树就是必胜态。</li>
<li>如果原树是必胜态，先手第一次取下新叶子和原树必胜态中第一步应该取下的叶子，那么新树还是必胜态。</li>
</ul>
<p>也就是说，如果一个树满足一个叶子结点的父亲度数大于等于 $2$，它就是必胜态。</p>
<p>如果不是怎么办呢？我们对于每个叶子结点找到第一个祖先 $x$ 满足它的父亲度数大于等于 $2$，我们的目标就是让敌人删到 $x$ 成为叶子结点，然后自己就赢了。这样问题转化成了有 $k$ 个 $a_i$ 表示叶子结点和对应的 $x$ 结点的距离，每次可以选择若干个 $a_i$ 减去 $1$，把其中一个减到 $0$ 的人就输了。</p>
<p>发现只要有一个 $a_i$ 是偶数，你就可以在第一步把所有偶数都取掉一个，之后对手干什么你就复读，最后肯定会在对手的回合留下 $k$ 个 $1$，然后他就输了。否则这时 $a_i$ 全是奇数，对手只要复读你他就能赢。也就是说如果 $a_i$ 全是奇数，你会输；否则你会赢。这样问题就解决了，时间复杂度 $O(n)$。</p>
<h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T, n, fa[maxn + <span class="number">3</span>], deg[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">puts</span>(x ? <span class="string">"Takeru"</span> : <span class="string">"Meiya"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (T --&gt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			deg[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;fa[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			deg[fa[i]]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">bool</span> ch = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ch &amp;= deg[i] &lt;= <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (ch) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			print(n &amp; <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (deg[i] == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (deg[fa[i]] &gt;= <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				print(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				flag = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (flag) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		flag = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (deg[i] == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> x = i, c = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">while</span> (deg[x] &lt; <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				x = fa[x], c++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			flag |= c &amp; <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		print(flag);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="L-MUV-LUV-ALTERNATIVE"><a href="#L-MUV-LUV-ALTERNATIVE" class="headerlink" title="L. MUV LUV ALTERNATIVE"></a>L. MUV LUV ALTERNATIVE</h1><p>在路上了。</p>
]]></content>
      <tags>
        <tag>动态规划</tag>
        <tag>最大流</tag>
        <tag>博弈论</tag>
      </tags>
  </entry>
  <entry>
    <title>「学习笔记」支配树与 Lengauer Tarjan 算法</title>
    <url>/2019/10/10/20191010-Dominator-Tree/</url>
    <content><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>对于一张有向图，确定一个根，如果根到 $x$ 的每条路径都经过 $y$，那么称 $y$ 是 $x$ 的支配点。求出原图的一个 dfs 树，那么 $x$ 的支配点一定在 $x$ 到根的链上。如果每个点向自己深度最大的支配点（记作 $\text{idom}(u)$）连边，就构成了支配树。</p>
<a id="more"></a>
<p><strong>有向图 dfs 树的性质</strong></p>
<ol>
<li>图中所有两个端点没有祖先后代关系的非树边都从 dfn 大的点指向 dfn 小的点。</li>
<li>若 u 和 v 满足 u 的 dfn 比 v 的 dfn 小，那么图中任意从 u 到 v 的路径一定包含至少一个 u 和 v 的公共祖先。</li>
</ol>
<h1 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h1><h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>对于 DAG，可以直接 LCA 做，复杂度 $O(n \log n)$。下面介绍对于所有图适用的算法：Lengauer Tarjan 算法，它的时间复杂度是 $O(n\cdot\alpha(n))$。</p>
<p>如果 $y$ 不是 $x$ 的后代，且满足存在 $y$ 到 $x$ 的一条路径，使得路径上的点（除 $x, y$）dfn 都大于 $\text{dfn}(x)$，那么称 $y$ 是 $x$ 的一个半支配点。可以证明 $x$ 的半支配点一定是 $x$ 的祖先，我们记 $\text{sdom}(x)$ 为 $x$ 半支配点中深度最小的点。</p>
<p>我们考虑先求出 $\text{sdom}$ 后再求出 $\text{idom}$。</p>
<h2 id="求半支配点"><a href="#求半支配点" class="headerlink" title="求半支配点"></a>求半支配点</h2><p>考虑枚举路径上 $x$ 之前的那个点 $y$（满足 $\text{dfn}(y) &gt; \text{dfn}(x)$）。$x$ 的半支配点是某个 $z$ 点的半支配点，其中 $z$ 是 $y$ 的祖先且 $\text{dfn}(z) &gt; \text{dfn}(x)$。我们要求的就是 $z$ 点的最小值。考虑把所有点按照 $\text{dfn}(x)$ 从大到小排序，一一加入一个维护树结构的并查集，并查集中的每个点维护它到当前根的最小值即可。</p>
<h2 id="求支配点"><a href="#求支配点" class="headerlink" title="求支配点"></a>求支配点</h2><p>对于某点 $x$，记 $P_x$ 表示对于 $x$ 祖先链上的每个 $y$，树上路径 $\text{semi}(y) \rightarrow y$ 的并集。找到 $P_x$ 中深度最小的点 $z$，则：</p>
<ul>
<li>semi(x) = semi(z) 时，idom(x) = semi(x)；</li>
<li>否则，idom(x) = idom(z)。</li>
</ul>
<p>类似地，将点按照 $\text{semi}(x)$ 的深度从大到小排序，使用带权并查集维护即可。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Luogu P5180 支配树模版</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> __main__ &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> n, m, tot, dfn[maxn + <span class="number">3</span>], o[maxn + <span class="number">3</span>], dep[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> fa[maxn + <span class="number">3</span>], num[maxn + <span class="number">3</span>], lnk[maxn + <span class="number">3</span>], cnt[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> sdom[maxn + <span class="number">3</span>], idom[maxn + <span class="number">3</span>], ans[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>], T[maxn + <span class="number">3</span>], B[maxn + <span class="number">3</span>], D[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		G[u].push_back(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		B[v].push_back(u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfn[u] = ++tot, o[tot] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		D[dep[u]].push_back(u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (dfn[v]) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			T[u].push_back(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dep[v] = dep[u] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dfs(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">min_1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!a || !b) <span class="keyword">return</span> a | b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> dfn[a] &lt; dfn[b] ? a : b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">min_2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> dfn[sdom[a]] &lt; dfn[sdom[b]] ? a : b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (fa[x] == x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">return</span> x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> y = fa[x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		fa[x] = find(y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (y != fa[x]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			num[x] = min_2(num[x], num[y]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> fa[x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			add(u, v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dep[<span class="number">1</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			fa[i] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = n, u; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			u = o[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, v; j &lt; B[u].size(); j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				v = B[u][j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				sdom[u] = min_1(sdom[u], v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				find(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				sdom[u] = min_1(sdom[u], min_1(sdom[num[v]], sdom[num[fa[v]]]));</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			num[u] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; T[u].size(); j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				fa[T[u][j]] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			cnt[dep[sdom[i]]]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			cnt[i] += cnt[i + <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			o[cnt[dep[sdom[i]]]--] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			fa[i] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> p = n + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			u = o[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">while</span> (p &gt; dep[sdom[u]]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				p--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, v; j &lt; D[p].size(); j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					v = D[p][j], num[v] = v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; T[v].size(); k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						fa[T[v][k]] = v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			find(u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (sdom[num[u]] == sdom[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				idom[u] = sdom[u];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				lnk[u] = num[u];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		idom[<span class="number">1</span>] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, u; j &lt; D[i].size(); j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				u = D[i][j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (!idom[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					idom[u] = idom[lnk[u]];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans[i] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, u; j &lt; D[i].size(); j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				u = D[i][j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				ans[idom[u]] += ans[u];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], <span class="string">" \n"</span>[i == n]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	__main__::main();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://blog.csdn.net/DT_Kang/article/details/86929599" target="_blank" rel="noopener">DT_Kang 的博客</a></li>
<li><a href="https://www.cnblogs.com/fenghaoran/p/dominator_tree.html" target="_blank" rel="noopener">Fenghr 的博客</a></li>
</ul>
]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>支配树</tag>
      </tags>
  </entry>
  <entry>
    <title>「ARC 096E」Everything On It（容斥原理）</title>
    <url>/2019/10/03/20191003-ARC096E-Everything-On-It/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://arc096.contest.atcoder.jp/tasks/arc096_c" target="_blank" rel="noopener">「ARC 096E」Everything On It</a></p>
<p>求有多少个子集族，满足：</p>
<ul>
<li>其中的每个子集都是 $[n]$ 的一个子集；</li>
<li>任意两个子集互不相同；</li>
<li>$1, 2, \cdots, n$ 都在其中出现了至少两次。</li>
</ul>
<p>答案对素数 $m$ 取模。</p>
<p>数据范围：$n \le 3000, 10^8 \le m \le 10^9 + 9$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>我们考虑容斥，枚举出现了不超过一次的数的个数 $i$，这样答案就是 $\sum_{i = 0}^{n} (-1)^i \binom{n}{i} A_i$。</p>
<p>对于某个 $i$，我们不妨假定出现次数不超过一次的数是 $1, 2, \cdots, i$。考虑继续枚举包含 $[1, i]$ 中数的子集个数 $j$。对于除了这 $j$ 个集合以外的集合，它们都不包含前 $i$ 个数，所以方案数是 $2^{2^{n - i}}$。而对于这 $j$ 个集合，发现它们必定两两不同。它们的后 $n - i$ 位共有 $(2^{n - i})^j$ 种可能的取值，而前 $i$ 位每一位都出现了不超过 $1$ 次。这相当于从前 $i$ 个数中选出 $k$ 个数钦定它们没有出现，然后把剩下 $i - k$ 个数分给 $j$ 个集合（第二类斯特林数）。这样，我们已经可以得到答案的式子：</p>
<script type="math/tex; mode=display">\sum_{i=0}^{n} (-1)^i \binom{n}{i} \sum_{j = 0}^{i} 2^{2^{n - i}} \cdot (2^{n - i})^j \sum_{k = 0}^{i} \binom{i}{k} \begin{Bmatrix} i - k \\ j \end{Bmatrix}</script><p>直接计算的时间复杂度是 $O(n^3)$，不能通过。我们考虑把枚举 $k$ 变为直接计算某个式子。发现下面的等式始终成立：</p>
<script type="math/tex; mode=display">\sum_{i = 0}^{n} \binom{n}{i} \begin{Bmatrix} n - i \\ k \end{Bmatrix} = \begin{Bmatrix} n + 1 \\ k + 1 \end{Bmatrix}</script><p>考虑该等式的组合意义：左边是将 $n$ 个不同的小球选一些出来，然后划成 $k$ 个集合；右边是将 $n + 1$ 个小球划成 $k + 1$ 个集合。我们把第 $n + 1$ 个小球看作特殊小球，它被划分到的集合中的所有球都会被扔掉，这样两边的组合意义就相同了，我们就证明了这个等式。</p>
<p>于是原式可以简化为：</p>
<script type="math/tex; mode=display">\sum_{i=0}^{n} (-1)^i \binom{n}{i} \sum_{j = 0}^{i} 2^{2^{n - i}} \cdot (2^{n - i})^j\begin{Bmatrix} i + 1 \\ j + 1 \end{Bmatrix}</script><p>枚举 $i, j$ 直接计算即可，时间复杂度 $O(n^2)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e3</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, mod, C[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], S[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x &lt; mod ? x : x - mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> m = mod)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> c = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="number">1l</span>l * a * a % m) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = <span class="number">1l</span>l * a * c % m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	C[<span class="number">0</span>][<span class="number">0</span>] = S[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		C[i][<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			C[i][j] = func(C[i - <span class="number">1</span>][j - <span class="number">1</span>] + C[i - <span class="number">1</span>][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			S[i][j] = (<span class="number">1l</span>l * S[i - <span class="number">1</span>][j] * j + S[i - <span class="number">1</span>][j - <span class="number">1</span>]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;mod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	prework(n + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = i &amp; <span class="number">1</span> ? mod - C[n][i] : C[n][i], s = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x = <span class="number">1l</span>l * x * qpow(<span class="number">2</span>, qpow(<span class="number">2</span>, n - i, mod - <span class="number">1</span>)) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> y = qpow(<span class="number">2</span>, (n - i) * j);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			y = <span class="number">1l</span>l * y * S[i + <span class="number">1</span>][j + <span class="number">1</span>] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			s = func(s + y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans = (ans + <span class="number">1l</span>l * x * s) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>容斥原理</tag>
      </tags>
  </entry>
  <entry>
    <title>「Codeforces 1043F」Make It One（数论）</title>
    <url>/2019/08/02/20190802-CF1043F-Make-It-One/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://codeforces.com/problemset/problem/1043/F" target="_blank" rel="noopener">「Codeforces 1043F」Make It One</a></p>
<p>有 $n$ 个数 $a_1, a_2, \cdots, a_n$。要选出一个子集，使得集合内部的 $\gcd$ 为 $1$，问集合大小的最小值。</p>
<p>数据范围：$n, a_i \le 3 \times 10^5$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>这题看似是个神仙题，实际上是个脑筋急转弯题。</p>
<p>由于 $2 \times 3 \times 5 \times 7 \times 11 \times 13 \times 17 &gt; 3 \times 10^5$，所以答案一定不超过 $7$。</p>
<p>这样，我们就可以令 $\text{dp}(i, j)$ 表示集合大小为 $i$，$\gcd$ 为 $j$ 的方案数。转移时我们只需要枚举每个数的倍数的复杂度，可以证明这是 $O(n \log n)$ 的，所以总共的复杂度也是 $O(n \log n)$ 的。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span>, mod = <span class="number">1926081733</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, d, a[maxn + <span class="number">3</span>], b[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> b ? gcd(b, a % b) : a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a[x] = b[x] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		m = max(m, x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		d = gcd(d, x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (d &gt; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i * <span class="number">2</span>; j &lt;= m; j += i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[i] += a[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> _ = <span class="number">1</span>; ; _++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b[<span class="number">1</span>]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, _);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ll sum = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= m; j += i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				sum += b[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			x = sum % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			b[i] = <span class="number">1l</span>l * a[i] * x % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = m; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ll x = <span class="number">1l</span>l * mod * mod + b[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i * <span class="number">2</span>; j &lt;= m; j += i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				x -= b[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			b[i] = x % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>「NEERC 2016」Mole Tunnels（费用流）</title>
    <url>/2019/08/02/20190802-NEERC2016-Mole-Tunnels/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="http://darkbzoj.tk/problem/4849" target="_blank" rel="noopener">「NEERC 2016」Mole Tunnels（BZOJ 4849）</a></p>
<p>有 $n$ 个洞，$m$ 只鼠，第 $i$ 个洞里有 $c_i$ 份食物。如果 $i &gt; 1$，那么第 $i$ 个洞向 $\lfloor \frac{i}{2} \rfloor$ 个洞连一条无向边。对于每个 $k$，你要为前 $k$ 只鼠制定一个移动方案，使得它们各自移动到某个洞穴后，每个洞穴的鼠的数量不超过该洞中食物的数量（只算前 $k$ 只鼠）。在合法的情况下，要求鼠移动的距离总和最小，你只需输出最小的距离和。</p>
<p>数据范围：$n, m \le 10^5$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>首先想到一个费用流的做法：可以将老鼠到某个洞里看作一个匹配，代价为它们在树上的距离。具体地：</p>
<ul>
<li>从 $S$ 向 $i$ 连边，容量为 $i$ 号洞中的老鼠个数，花费为 $0$。</li>
<li>从 $i$ 向 $T$ 连边，容量为 $c_i$，花费为 $0$。 </li>
<li>对于树上的边 $(u, v)$，从 $u$ 向 $v$ 连一条容量为 $+ \infty$，花费为 $1$ 的边，并从 $v$ 向 $u$ 也连一条容量，花费相同的边。</li>
</ul>
<p>发现这样复杂度太高，不能通过。考虑模拟费用流的过程。对于每个点，我们记录它和它父亲在做费用流时边的状态（需要记录反向边），并维护它的子树内部最近的有食物的点。每次加入一只鼠的时候，我们暴力地向上跳，找到一个最近的点。之后，将它到这个点的路径增广，同时修改边的花费即可，具体过程可以看代码。由于保证树高 $\log n$，所以总时间复杂度为 $O(n \log n)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>, inf = <span class="number">1e9</span> + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, ans, c[maxn + <span class="number">3</span>], w[maxn + <span class="number">3</span>][<span class="number">2</span>], p[maxn + <span class="number">3</span>], dp[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (c[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dp[u] = <span class="number">0</span>, p[u] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dp[u] = inf, p[u] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; <span class="number">2</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = u * <span class="number">2</span> + i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v &lt;= n) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dfs(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (p[v] &amp;&amp; dp[v] + <span class="number">1</span> &lt; dp[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				dp[u] = dp[v] + <span class="number">1</span>, p[u] = p[v];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (!u) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (c[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dp[u] = <span class="number">0</span>, p[u] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dp[u] = inf, p[u] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; <span class="number">2</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = u * <span class="number">2</span> + i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v &lt;= n) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (p[v] &amp;&amp; dp[v] + (w[v][<span class="number">0</span>] ? <span class="number">-1</span> : <span class="number">1</span>) &lt; dp[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				dp[u] = dp[v] + (w[v][<span class="number">0</span>] ? <span class="number">-1</span> : <span class="number">1</span>), p[u] = p[v];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	update(u &gt;&gt; <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> res = inf, pnt = <span class="number">0</span>, lca = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = u, j = <span class="number">0</span>; i; j += (w[i][<span class="number">1</span>] ? <span class="number">-1</span> : <span class="number">1</span>), i &gt;&gt;= <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (p[i] &amp;&amp; dp[i] + j &lt; res) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			res = dp[i] + j, pnt = p[i], lca = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = u; i != lca; i &gt;&gt;= <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		w[i][<span class="number">1</span>] ? w[i][<span class="number">1</span>]-- : w[i][<span class="number">0</span>]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = pnt; i != lca; i &gt;&gt;= <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		w[i][<span class="number">0</span>] ? w[i][<span class="number">0</span>]-- : w[i][<span class="number">1</span>]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	c[pnt]--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	update(u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	update(pnt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, t; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans += insert(t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans, <span class="string">" \n"</span>[i == m]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title>「PKUWC 2018」随机游走（容斥原理 + 高斯消元）</title>
    <url>/2019/08/01/20190801-PKUWC2018-Random-Walk/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://loj.ac/problem/2542" target="_blank" rel="noopener">「PKUWC 2018」随机游走（LOJ 2542）</a></p>
<p>给定一棵 $n$ 个结点的树，根为 $r$。有 $Q$ 个询问，每次给定一个点集，问从根开始随机游走，到达这个点集中的所有点的期望步数。</p>
<p>数据范围：$n \le 18, Q \le 5 \times 10^3$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>这个 $Q \le 5 \times 10^3$ 好像没什么用啊 QwQ</p>
<p>考虑预处理出每个点集的答案，然后对于每个询问直接查表。</p>
<p>这里介绍一下 Min-Max 容斥：</p>
<script type="math/tex; mode=display">
\begin {align*}
& \max\{x_1, x_2, \cdots, x_n\} \\
= & \sum_{i} x_i - \sum_{i < j} \min \{x_i, x_j\} + \sum_{i < j < k}\min \{x_i, x_j, x_k\} - \cdots \\
= & \sum_{S \subseteq \{x_1, x_2, \cdots, x_n\}} (-1)^{\vert S \vert - 1} \cdot \min \{S_i\} \\
\end {align*}</script><p>这么算 $n$ 个数的最大值有什么好处呢？考虑 $x_i$ 是随机变量，并且某个子集的最小值的期望比较好计算的情况。由于期望的线性性，我们可以使用 Min-Max 容斥，分别计算每个子集最小值的期望即可得到它们最大值的期望。注意到对于<strong>任意的</strong>两个随机变量 $x, y$，都有 $E(x + y) = E(x) + E(y)$，不要求 $x, y$ 独立。</p>
<p>对于这个问题，我们设共有 $m$ 个点，到达第 $i$ 个点的时间为 $t_i$，我们要求的就是 $E(\max {t_i})$。考虑计算 $E(\min {S_i}) (S \subseteq { t_i })$，也就是第一次到达一个点集的期望时间。</p>
<p>对于一个子集中的点，如果它到根的路径上已经存在点了，那么它就没有用了。我们扔掉没用的点以后，树的所有叶子结点一定都在点集中了。我们列出随机游走的方程，使用高斯消元法求解即可。最后，将每个点集的答案乘上容斥系数，再使用一遍高维前缀和，就可以求出原问题的答案了。</p>
<p>共要枚举 $2^n$ 个点集，暴力高斯消元的复杂度是 $O(n^3)$ 的，总复杂度 $O(2^n n^3)$，似乎不可通过。考虑图的结构是一棵树，我们可以 “手动高斯消元”。设 $L$ 是叶子结点集合，第 $u$ 个结点的度数是 $d(u)$，答案是 $f(u)$，那么有：</p>
<script type="math/tex; mode=display">
\begin {cases}
f(u) = 0 & (u \in L) \\
f(u) = 1 + \displaystyle \frac{\sum_{(u, v) \in E} f(v)}{d(u)} & (\text{otherwise})
\end {cases}</script><p>发现 $f(u)$ 肯定能表示成 $a(u) \times f(\text{fa}(u)) + b(u)$ 的形式。这样，我们从下往上递推，就可以直接算出 $a(u), b(u)$。算到根结点时，因为它没有父亲，所以 $b(u)$ 就是答案。这样，时间复杂度降低到了 $O(2^n n)$，可以通过本题。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">18</span>, maxm = <span class="number">1</span> &lt;&lt; maxn, mod = <span class="number">998244353</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, Q, rt, cur, inv[maxn + <span class="number">3</span>], deg[maxn + <span class="number">3</span>], a[maxn + <span class="number">3</span>], b[maxn + <span class="number">3</span>], f[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> c = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="number">1l</span>l * a * a % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = <span class="number">1l</span>l * a * c % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	G[u].push_back(v), deg[u]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (cur &gt;&gt; (u - <span class="number">1</span>) &amp; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a[u] = b[u] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	a[u] = inv[deg[u]], b[u] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> x = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		b[u] = (b[u] + <span class="number">1l</span>l * inv[deg[u]] * b[v]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x = (x + <span class="number">1l</span>l * (mod - inv[deg[u]]) * a[v]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	x = qpow(x, mod - <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	a[u] = <span class="number">1l</span>l * a[u] * x % mod, b[u] = <span class="number">1l</span>l * b[u] * x % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;Q, &amp;rt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		inv[i] = qpow(i, mod - <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		add(u, v), add(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> msk = <span class="number">1</span>; msk &lt; <span class="number">1</span> &lt;&lt; n; msk++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cur = msk;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(rt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> num = mod - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (msk &gt;&gt; (i - <span class="number">1</span>) &amp; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				num = mod - num;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[msk] = <span class="number">1l</span>l * num * b[rt] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> msk = <span class="number">0</span>; msk &lt; <span class="number">1</span> &lt;&lt; n; msk++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (msk &gt;&gt; (i - <span class="number">1</span>) &amp; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				f[msk] += f[msk ^ (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				f[msk] &lt; mod ? <span class="number">0</span> : f[msk] -= mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k, x, msk; Q--; ) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		msk = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (k--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			msk |= <span class="number">1</span> &lt;&lt; (x - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[msk]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>容斥原理</tag>
        <tag>高斯消元</tag>
      </tags>
  </entry>
  <entry>
    <title>「TJOI 2019」唱、跳、rap 和篮球（容斥原理）</title>
    <url>/2019/08/01/20190801-TJOI2019-CTRL/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.luogu.org/problem/P5339" target="_blank" rel="noopener">「TJOI 2019」唱、跳、rap 和篮球（Luogu 5339）</a></p>
<p>共有 $a + b + c + d$ 个人，有 $a$ 个人喜欢唱，有 $b$ 个人喜欢跳，有 $c$ 个人喜欢 rap，有 $d$ 个人喜欢篮球。要求选出 $n$ 个人排队，使得不存在一个位置 $i$，满足位置 $i, i + 1, i + 2, i + 3$ 上的人同时喜欢唱、跳、rap 和篮球。我们称两种方案不同当且仅当有一个位置上的人的爱好不同，求共有多少不同的方案 $\bmod 998244353$ 的结果。</p>
<p>数据范围：$n \le 10^3, a, b, c, d \le 500$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>网上好多题解都是 $O(n^2 \log n)$ 的，这里讲一个 $O(n^2)$ 的做法。</p>
<p>我们记唱为 C，跳为 T，rap 为 R，篮球为 L，位置 $i, i + 1, i + 2, i + 3$ 上的人同时喜欢唱、跳、rap 和篮球的组叫坤坤组。考虑枚举坤坤组的数量 $k$，然后除了 $k$ 个坤坤组的位置随便选，最后的答案就是 $\sum_{k} (-1)^k \times \sum_{\text{queue}} [\text{cnt_kun(queue)} = k]$。</p>
<p>对于某个 $k$，我们先要选出 $k$ 个坤坤组的位置。考虑 $k$ 个坤坤组形成的位置集合 ${ p_1, p_2, \cdots, p_k }$，我们将 $p_i \leftarrow p_i - 3(i - 1)$ 后，限制就变成了 $1 \le p_1 &lt; p_2 &lt; \cdots &lt; p_k \le n - 3k$，所以方案数就是 $\binom{n - 3k}{k}$。</p>
<p>接下来我们考虑剩下的位置。此时，假设我们还剩 $C = a - k$ 个 C，$T = b - k$ 个 T，$R = c - k$ 个 R，$L = d - k$ 个 L，要把他们放到 $m = n - 4k$ 个位置中。我们可以将其看作是一个多项式 $A = (x + y + z + w)^m$，将计算结果中 $x$ 次数不超过 $C$，$y$ 次数不超过 $T$，$z$ 次数不超过 $R$，$w$ 次数不超过 $L$，的所有项的系数相加就可以得到答案。我们将其展开，得到答案为：</p>
<script type="math/tex; mode=display">\sum_{i = 0}^{m} \binom{m}{i} \left( \sum_{j = 0}^{i} \binom{i}{j} \cdot [j \le C] \cdot [i - j \le T] \right) \left( \sum_{j = 0}^{m - i} \binom{m - i}{j} \cdot [j \le R] \cdot [m - i - j \le L] \right)</script><p>对于外层的求和可以枚举，对于内层的求和，发现一定可以写成 $\sum_{i = l}^{r} \binom{x}{i}$ 的形式。预处理组合数前缀和即可，时间复杂度 $O(n^2)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>一个坑点是 $k$ 必须循环到 $\min {\displaystyle \frac{n}{4}, a, b, c, d}$，如果再大会出错。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr, __VA_ARGS__)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>, mod = <span class="number">998244353</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, a, b, c, d, lim, ans, num[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], sum[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], f[maxn + <span class="number">3</span>], g[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">settings</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	freopen(<span class="string">"output.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	lim = min(n / <span class="number">4</span>, min(min(a, b), min(c, d)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		num[i][<span class="number">0</span>] = num[i][i] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			num[i][j] = num[i - <span class="number">1</span>][j - <span class="number">1</span>] + num[i - <span class="number">1</span>][j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			num[i][j] &lt; mod ? <span class="number">0</span> : num[i][j] -= mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		sum[i][<span class="number">0</span>] = num[i][<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			sum[i][j] = sum[i][j - <span class="number">1</span>] + num[i][j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			sum[i][j] &lt; mod ? <span class="number">0</span> : sum[i][j] -= mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	l &lt; <span class="number">0</span> ? l = <span class="number">0</span> : <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	r &gt; i ? r = i : <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> t = sum[i][r] - (l ? sum[i][l - <span class="number">1</span>] : <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> t &lt; <span class="number">0</span> ? t + mod : t;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	settings();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d %d %d %d"</span>, &amp;n, &amp;a, &amp;b, &amp;c, &amp;d);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	prework(n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lim; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> tot = n - i * <span class="number">4</span>, cnt = num[n - i * <span class="number">3</span>][i], res = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> C = a - i, T = b - i, R = c - i, L = d - i; <span class="comment">// Chang, Tiao, Rap, Lanqiu</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, CT, RL; j &lt;= tot; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			CT = j, RL = tot - j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			res = (res + <span class="number">1l</span>l * func(CT, CT - T, C) * func(RL, RL - L, R) % mod * num[tot][j]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans = (ans + <span class="number">1l</span>l * (i &amp; <span class="number">1</span> ? mod - <span class="number">1</span> : <span class="number">1</span>) * cnt % mod * res) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>容斥原理</tag>
      </tags>
  </entry>
  <entry>
    <title>「LOJ 121」动态图连通性（分治 + 并查集）</title>
    <url>/2019/07/31/20190731-LOJ121-Dynamic-Graph/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://loj.ac/problem/121" target="_blank" rel="noopener">「LOJ 121」动态图连通性</a></p>
<p>给定一个 $n$ 个点的图和 $m$ 个操作。图一开始是空的，每次操作可以在图中加上一条边，删去一条边或者询问两个点是否连通。你要对于所有询问求出答案。</p>
<p>数据范围：$n \le 5 \times 10^3, m \le 5 \times 10^5$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>不知道这个 $n \le 5 \times 10^3$ 有什么用 \kel。</p>
<p>如果只有加边的话，我们可以直接使用并查集来做。如果带上删边，我们就可以使用按时间分治的技巧。具体地，我们将每条边出现的时间和被删除的时间处理出来，然后在时间的线段树上插入对应的区间。最后，我们 DFS 一遍线段树就可以求出所有答案了。</p>
<p>那么我们需要支持的操作就是连边和撤销上一次连边。发现并不需要可持久化，我们只需要可回退的并查集就行了。对于一次 merge 操作，我们将它的信息记录下来，撤销的时候再还原即可。注意我们不能路径压缩，所以需要启发式合并来优化。时间复杂度 $O(m \log^2 m)$，具体见代码。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (rt &lt;&lt; 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (ls | 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span>, maxm = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, o[maxn + <span class="number">3</span>], u[maxn + <span class="number">3</span>], v[maxn + <span class="number">3</span>], fa[maxn + <span class="number">3</span>], sz[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> top, st_u[maxn + <span class="number">3</span>], st_v[maxn + <span class="number">3</span>], st_o[maxn + <span class="number">3</span>], st_s[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> ans[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; S[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt; mp;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> lx, <span class="keyword">int</span> rx, <span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l &gt;= lx &amp;&amp; r &lt;= rx) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		S[rt].push_back(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (lx &lt;= mid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		modify(ls, l, mid, lx, rx, x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (rx &gt; mid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		modify(rs, mid + <span class="number">1</span>, r, lx, rx, x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> fa[x] == x ? x : find(fa[x]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	u = find(u), v = find(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (sz[u] &gt; sz[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		swap(u, v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	++top, st_u[top] = u, st_v[top] = v, st_o[top] = fa[u], st_s[top] = sz[u];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (u != v) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		fa[u] = v, sz[v] += sz[u], sz[u] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> u = st_u[top], v = st_v[top], o = st_o[top], s = st_s[top];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (u != v) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		fa[u] = o, sz[v] -= s, sz[u] = s;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	top--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S[x].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		merge(u[S[x][i]], v[S[x][i]]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = S[x].size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		split();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	insert(rt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l == r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (o[l] == <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans[l] = find(u[l]) == find(v[l]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		erase(rt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	solve(ls, l, mid);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	solve(rs, mid + <span class="number">1</span>, r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	erase(rt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;o[i], &amp;u[i], &amp;v[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (u[i] &gt; v[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			swap(u[i], v[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!o[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mp[make_pair(u[i], v[i])] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (o[i] == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			modify(<span class="number">1</span>, <span class="number">1</span>, m, mp[make_pair(u[i], v[i])], i - <span class="number">1</span>, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mp[make_pair(u[i], v[i])] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="built_in">map</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt;::iterator it = mp.begin(); it != mp.end(); it++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (it -&gt; second) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			modify(<span class="number">1</span>, <span class="number">1</span>, m, it -&gt; second, m, it -&gt; second);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		fa[i] = i, sz[i] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	solve(<span class="number">1</span>, <span class="number">1</span>, m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (o[i] == <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">puts</span>(ans[i] ? <span class="string">"Y"</span> : <span class="string">"N"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>分治</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>「LOJ 575」不等关系（容斥原理 + 多项式）</title>
    <url>/2019/07/30/20190730-LOJ575-Unequal-Relations/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://loj.ac/problem/575" target="_blank" rel="noopener">「LOJ 575」不等关系</a></p>
<p>给定一个长度为 $n$ 的字符串 $s$，$s_i \in {&lt;, &gt;}$。要求计数长度为 $n + 1$ 的排列 $a$，满足 $a_i &lt; a_{i + 1}$ 当且仅当 $s_i$ 为 $&lt;$，模数为 $998244353$。</p>
<p>数据范围：$n \le 10^5$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>首先想到一个状态数为 $n^2$ 的 $\text{dp}$，但是发现它不能优化。于是考虑容斥。</p>
<p>对于所有 $&lt;$，我们考虑把它容斥成 $\neq$ 的方案数减去 $&gt;$ 的方案数。这样容斥后，问题就变成了字符串的每一位都是无限制或大于号，求方案数。假设第 $i$ 个大于号的连续段长度为 $\text{len}_i - 1$，则总方案数为 $\displaystyle \frac{n!}{\prod \text{len}_i!}$。这样，我们就得到了一个 $O(2^n)$ 的做法。</p>
<p><img src="/images/20190730-LOJ575-Unequal-Relations-1.jpg" alt="图一"></p>
<p>我们发现我们可以使用带容斥系数的 $\text{dp}$ 来解决这个问题。那么：</p>
<script type="math/tex; mode=display">
dp_{n} = 
\begin {cases}
1 & (n = 0)\\
\displaystyle \sum_{i = 0}^{n - 1} [i = 0 \text{ or } s_i = \text{<}] \cdot dp_{i} \cdot \frac{(-1) ^ {\text{cnt}_{n - 1} - \text{cnt}_i}}{(n - i)!} & (n \ge 1)
\end {cases}</script><p>其中 $\text{cnt}_i$ 表示前 $i$ 个位置有多少个 $\text{&lt;}$，而答案就等于 $dp_{n + 1} \times (n + 1)!$。这样做的时间复杂度为 $O(n^2)$。</p>
<p>发现这个式子可以使用分治 FFT 优化。时间复杂度 $O(n \log^2 n)$，可以通过本题。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">18</span>, mod = <span class="number">998244353</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, k, cnt[maxn + <span class="number">3</span>], fact[maxn + <span class="number">3</span>], finv[maxn + <span class="number">3</span>], num[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> f[maxn + <span class="number">3</span>], g[maxn + <span class="number">3</span>], a[maxn + <span class="number">3</span>], b[maxn + <span class="number">3</span>], rev[maxn + <span class="number">3</span>], dp[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> s[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	x += y, x &lt; mod ? <span class="number">0</span> : x -= mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	b &lt; <span class="number">0</span> ? b += mod - <span class="number">1</span> : <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> c = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="number">1l</span>l * a * a % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = <span class="number">1l</span>l * a * c % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cnt[i] = cnt[i - <span class="number">1</span>] + (s[i] == <span class="string">'&lt;'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	fact[<span class="number">0</span>] = finv[<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		fact[i] = <span class="number">1l</span>l * fact[i - <span class="number">1</span>] * i % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	finv[n] = qpow(fact[n], mod - <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		finv[i - <span class="number">1</span>] = <span class="number">1l</span>l * finv[i] * i % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	num[<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		num[i] = mod - num[i - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dft</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n, <span class="keyword">int</span> type)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (i &lt; rev[i]) swap(a[i], a[rev[i]]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n; k &lt;&lt;= <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = qpow(<span class="number">3</span>, (mod - <span class="number">1</span>) / (k &lt;&lt; <span class="number">1</span>) * type);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += k &lt;&lt; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> y = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + k; j++, y = <span class="number">1l</span>l * x * y % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> p = a[j], q = <span class="number">1l</span>l * y * a[j + k] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				a[j] = p + q, a[j] &lt; mod ? <span class="number">0</span> : a[j] -= mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				a[j + k] = p - q, a[j + k] &lt; <span class="number">0</span> ? a[j + k] += mod : <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (type == <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = qpow(n, mod - <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[i] = <span class="number">1l</span>l * a[i] * x % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l == r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!l) f[l] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[l] = <span class="number">1l</span>l * f[l] * num[cnt[l - <span class="number">1</span>]] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dp[l] = f[l];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[l] = <span class="number">1l</span>l * f[l] * num[cnt[l]] % mod * (!l || s[l] == <span class="string">'&lt;'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	cdq(l, mid);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= mid; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a[i - l] = f[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= r - l; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		b[i] = g[i]; </span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> x = mid - l, y = r - l;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (k = <span class="number">0</span>, m = <span class="number">1</span>; m &lt;= x + y; m &lt;&lt;= <span class="number">1</span>) k++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = x + <span class="number">1</span>; i &lt; m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = y + <span class="number">1</span>; i &lt; m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		b[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (k - <span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dft(a, m, <span class="number">1</span>), dft(b, m, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a[i] = <span class="number">1l</span>l * a[i] * b[i] % mod; </span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dft(a, m, <span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt;= r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		add(f[i], a[i - l]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	cdq(mid + <span class="number">1</span>, r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	n = <span class="built_in">strlen</span>(s + <span class="number">1</span>) + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	prework(n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		g[i] = finv[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	cdq(<span class="number">0</span>, n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">1l</span>l * dp[n] * fact[n] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>多项式</tag>
        <tag>容斥原理</tag>
      </tags>
  </entry>
  <entry>
    <title>「BZOJ 2169」连边（组合计数）</title>
    <url>/2019/07/30/20190730-BZOJ2169-Adding-Edges/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2169" target="_blank" rel="noopener">「BZOJ 2169」连边</a></p>
<p>给定一个 $n$ 个点 $m$ 条边的图，要在图上加 $k$ 条互不相同的边（新边可以和旧边相同），使得新图的每个点的度数都是偶数。求方案数 $\bmod 10^4 + 7$ 的结果。</p>
<p>数据范围：$m \le  n \le 10^3, k \le 10^3$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>首先发现加的边只和原图每个点度数的奇偶性有关。所以先求出旧图每个点度数的奇偶性，假设 $n$ 个点中有 $m$ 个点的度数是奇数。</p>
<p>令 $f(i, j)$ 表示加了 $i$ 条边，有 $j$ 个点度数为奇数的方案数。假设第 $i$ 条边可以和之前的重复，那么我们有：</p>
<script type="math/tex; mode=display">
\begin {align*}
f(i, j) & = f(i - 1, j -2) \times \binom{n - j + 2}{2} \\
    & + f(i - 1, j) \times j \cdot (n - j) \\
    & + f(i - 1, j + 2) \times \binom{j + 2}{2}
\end{align*}</script><p>考虑减去重复的方案数。$i$ 与之前的边重复等价于从前 $i - 1$ 条边中选一条和第 $i$ 条相同，然后确定第 $i$ 条边是什么。由于第 $i$ 条边和选中的那条边不能和前 $i - 1$ 条边中没被选中的边相同，所以共有 $\binom{n}{2} - (i - 2)$ 种选法。而从 $i - 1$ 条边中选一条边的方案数为 $i - 1$。所以重复的总方案数是 $(i - 1) \times (\binom{n}{2} - (i - 2)) \times f(i - 2, j)$，我们把 $f(i, j)$ 减去这个数即可。时间复杂度 $O(nk)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>, mod = <span class="number">1e4</span> + <span class="number">7</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, k, c, a[maxn + <span class="number">3</span>], dp[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> j &lt; <span class="number">0</span> || j &gt; n ? <span class="number">0</span> : dp[i][j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> c = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = a * a % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = a * c % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> u, v; m--; ) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a[u] ^= <span class="number">1</span>, a[v] ^= <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		c += a[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dp[<span class="number">0</span>][c] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dp[i][j] = ((n - j + <span class="number">2</span>) * (n - j + <span class="number">1</span>) / <span class="number">2</span> % mod * f(i - <span class="number">1</span>, j - <span class="number">2</span>) + (n - j) * j % mod * f(i - <span class="number">1</span>, j) + (j + <span class="number">1</span>) * (j + <span class="number">2</span>) / <span class="number">2</span> % mod * f(i - <span class="number">1</span>, j + <span class="number">2</span>)) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (i &gt; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				dp[i][j] = (dp[i][j] + ((n * (n - <span class="number">1</span>) / <span class="number">2</span>) - (i - <span class="number">2</span>)) % mod * (mod - (i - <span class="number">1</span>)) % mod * f(i - <span class="number">2</span>, j)) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = dp[k][<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans = ans * qpow(i, mod - <span class="number">2</span>) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>组合计数</tag>
      </tags>
  </entry>
  <entry>
    <title>「Codeforces 888G」Xor MST（分治 + 字典树）</title>
    <url>/2019/07/30/20190730-CF888G-Xor-MST/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://codeforces.com/problemset/problem/888/G" target="_blank" rel="noopener">「Codeforces 888G」Xor MST</a></p>
<p>给定一个长度为 $n$ 的数列 $a_1, a_2, \cdots, a_n$，构造带权完全图 $G$，边 $(i, j)$ 的边权是 $a_i \oplus a_j$，其中 $\oplus$ 表示异或运算。求图 $G$ 的最小生成树。</p>
<p>数据范围：$n \le 2 \times 10^5, a_i \le 2^{30}$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>暴力建图是不可取的。我们考虑异或运算的性质。</p>
<p>假设当前所有 $a_i$ 的最高位为 $k$。我们将 $a_i$ 分成两组：这位是 $0$ 的和这位是 $1$ 的。如果两组中都有数，那么生成树上至少要在两组之间连一条边。</p>
<p>两组之间连的边的权值的最高位肯定为 $k$，所以我们要连尽可能少的边，也就是只连一条。我们对于某一组的所有数建立 Trie，然后对于另一组的每个数都去查它与第一组数的最小异或和，这样我们就找到了一条权值最小的边。</p>
<p>接着，我们递归求解两组内部的最小生成树，也就是递归到一个子问题。这样，我们就求出了整个图的最小生成树。</p>
<p>由于递归层数为 $\log a_i$，Trie 树的复杂度为 $O(\log a_i)$，所以总时间复杂度 $O(n \log^2 a_i)$，可以通过本题。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>, logv = <span class="number">30</span>, maxm = maxn * logv;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, a[maxn + <span class="number">3</span>], ch[maxm + <span class="number">3</span>][<span class="number">2</span>], cur;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ch[i][<span class="number">0</span>] = ch[i][<span class="number">1</span>] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	m = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> d, <span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> u = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = d, k; ~i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		k = x &gt;&gt; i &amp; <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!ch[u][k]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ch[u][k] = ++m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		u = ch[u][k];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> d, <span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> u = <span class="number">1</span>, res = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = d, k; ~i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		k = x &gt;&gt; i &amp; <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (ch[u][k]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			u = ch[u][k];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			u = ch[u][k ^ <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			res |= <span class="number">1</span> &lt;&lt; i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">comp</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> (i &gt;&gt; cur &amp; <span class="number">1</span>) &lt; (j &gt;&gt; cur &amp; <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(<span class="keyword">int</span> d, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (d &lt; <span class="number">0</span> || l &gt;= r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> t = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (a[i] &gt;&gt; d &amp; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			t |= <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			t |= <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (t &lt; <span class="number">3</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> solve(d - <span class="number">1</span>, l, r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (a[i] &gt;&gt; d &amp; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			insert(d - <span class="number">1</span>, a[i] ^ (<span class="number">1</span> &lt;&lt; d));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll ans = <span class="number">1</span> &lt;&lt; logv;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (~a[i] &gt;&gt; d &amp; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			cnt++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans = min(ans, <span class="number">1l</span>l * query(d - <span class="number">1</span>, a[i]));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ans += <span class="number">1</span> &lt;&lt; d;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	cur = d;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sort(a + l, a + r + <span class="number">1</span>, comp);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ans += solve(d - <span class="number">1</span>, l, l + cnt - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ans += solve(d - <span class="number">1</span>, l + cnt, r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, solve(logv - <span class="number">1</span>, <span class="number">1</span>, n));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>字典树</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>「学习笔记」弦图与完美消除序列</title>
    <url>/2019/07/29/20190729-Chordal-Graph/</url>
    <content><![CDATA[<h1 id="弦图"><a href="#弦图" class="headerlink" title="弦图"></a>弦图</h1><p>弦图是一类特殊的无向图。弦图上的所有简单环上都至少有一条弦，其中弦是联结环上两个不相邻的点的边。</p>
<p>这个限制等价于图中存在至少一个完美消除序列。</p>
<p>（好像学了一个没啥用的东西）</p>
<a id="more"></a>
<h1 id="完美消除序列"><a href="#完美消除序列" class="headerlink" title="完美消除序列"></a>完美消除序列</h1><p>一个完美消除序列是一个排列 $a_1, a_2, \cdots, a_n$，满足对于任意的 $i$，都有 $a_i, a_{i + 1}, \cdots, a_n$ 形成的导出子图中与 $a_i$ 相邻的点两两之间有边。</p>
<p>如何求完美消除序列呢？共有两种算法，可以在 <a href="https://wenku.baidu.com/view/6f9f2223dd36a32d73758126.html" target="_blank" rel="noopener">CDQ 的 PPT</a> 中学习，时间复杂度可以做到 $O(n + m)$。</p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个 $n$ 个点 $m$ 条边的弦图，求它的色数。</p>
<p>数据范围：$n \le 10^4, m \le 10^6$。</p>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>求出一个完美消除序列，然后贪心地倒着染色。不难发现这肯定是对的，因为与当前点相邻的染过色的点的颜色互不相同。</p>
<p>因为图的色数是 $O(\sqrt m)$ 的，所以总共染色的复杂度是 $O(n \sqrt m)$，可以通过本题。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e4</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, a[maxn + <span class="number">3</span>], c[maxn + <span class="number">3</span>], l[maxn + <span class="number">3</span>], r[maxn + <span class="number">3</span>], col[maxn + <span class="number">3</span>], vis[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> b[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_array</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span> * n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		l[i] = r[i] = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, t = <span class="number">0</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		l[n + i] = t, r[t] = n + i, t = n + i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> mx = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (r[mx] == <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mx--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> u = r[mx] - n, t = r[u + n];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		l[t] = mx, r[mx] = t;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a[k] = u, b[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v, lx, rx; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (b[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			lx = l[n + v], rx = r[n + v];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			r[lx] = rx, l[rx] = lx, c[v]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			l[n + v] = r[n + v] = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (~r[c[v]]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				l[r[c[v]]] = n + v, r[n + v] = r[c[v]];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			r[c[v]] = n + v, l[n + v] = c[v];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		mx++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		G[u].push_back(v), G[v].push_back(u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	get_array();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> _ = <span class="number">1</span>, i; _ &lt;= n; _++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		i = a[_];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; G[i].size(); j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			vis[col[G[i][j]]] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans = max(ans, j);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (vis[j] != i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				col[i] = j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>「学习笔记」分治算法入门</title>
    <url>/2019/07/29/20190729-Divide-And-Conquer/</url>
    <content><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li><a href="/2019/07/29/20190729-Divide-And-Conquer/#按时间分治">按时间分治</a></li>
<li><a href="/2019/07/29/20190729-Divide-And-Conquer/#CDQ-分治">CDQ 分治</a></li>
<li><a href="/2019/07/29/20190729-Divide-And-Conquer/#整体二分">整体二分</a></li>
</ul>
<a id="more"></a>
<h1 id="按时间分治"><a href="#按时间分治" class="headerlink" title="按时间分治"></a>按时间分治</h1><p>不多说了，直接看题吧。</p>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>有 $n$ 个时间点，每个时间点都有某个数 $x$ 出现或消失，对于每个时间点，求当前数的子集最大异或和。</p>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>可以把问题看作每个数都有一个出现时间和消失时间。考虑对时间建线段树，每个结点是一个 <code>std::vector</code>。然后对于每一个元素，我们在线段树上将它对应的区间 <code>push_back</code> 进这个元素。最后回答询问的时候，我们将线段树 DFS 一遍，求出每个结点到根上的所有数的线性基即可。时间复杂度 $O(n \log n)$。</p>
<p>其实这个做法运用的思想就是对时间进行分治。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (rt &lt;&lt; 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (ls | 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span>, maxm = <span class="number">1</span> &lt;&lt; <span class="number">20</span>, logn = <span class="number">31</span>, logm = <span class="number">20</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, a[maxn + <span class="number">3</span>], b[logm + <span class="number">3</span>][logn + <span class="number">3</span>], ans[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; seg[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> lx, <span class="keyword">int</span> rx, <span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l &gt;= lx &amp;&amp; r &lt;= rx) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		seg[rt].push_back(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (lx &lt;= mid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		modify(ls, l, mid, lx, rx, x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (rx &gt; mid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		modify(rs, mid + <span class="number">1</span>, r, lx, rx, x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> b[], <span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = logn - <span class="number">1</span>; ~i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (x &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (!b[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				b[i] = x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			x ^= b[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> b[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = logn - <span class="number">1</span>; ~i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x = max(x, x ^ b[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> dep = <span class="number">1</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; seg[rt].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		insert(b[dep], seg[rt][i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l == r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans[l] = query(b[dep]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">memcpy</span>(b[dep + <span class="number">1</span>], b[dep], <span class="keyword">sizeof</span>(b[dep]));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	solve(ls, l, mid, dep + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">memcpy</span>(b[dep + <span class="number">1</span>], b[dep], <span class="keyword">sizeof</span>(b[dep]));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	solve(rs, mid + <span class="number">1</span>, r, dep + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (a[i] &gt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mp[a[i]] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[i] = -a[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			modify(<span class="number">1</span>, <span class="number">1</span>, n, mp[a[i]], i - <span class="number">1</span>, a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mp[a[i]] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it = mp.begin(); it != mp.end(); it++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (it -&gt; second) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			modify(<span class="number">1</span>, <span class="number">1</span>, n, it -&gt; second, n, it -&gt; first);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	solve(<span class="number">1</span>, <span class="number">1</span>, n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="CDQ-分治"><a href="#CDQ-分治" class="headerlink" title="CDQ 分治"></a>CDQ 分治</h1><p>CDQ 分治是一类特殊的分治，指的是在分治过程中计算左半部分对右半部分产生的贡献。</p>
<p>偏序问题是 CDQ 分治的经典例题。</p>
<h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5126" target="_blank" rel="noopener">「HDU 5126」Stars</a></p>
<p>有 $n$ 次操作，分为两种：</p>
<ul>
<li><code>1 x y z</code> 添加一颗坐标为 $(x, y, z)$ 的星星。</li>
<li><code>2 lx ly lz rx ry rz</code> 询问以 $(lx, ly, lz)$ 为左下角，$(rx, ry, rz)$ 为右上角的长方体内有多少星星。</li>
</ul>
<p>数据范围：$n \le 5 \times 10^4$。</p>
<h2 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h2><p>这题的本质是四维偏序问题（前三维是显然的，另一维是时间），可以使用两次 CDQ 分治 + 树状数组解决（当然你也可以写树套树套树）。</p>
<p>先将每个长方体询问转化成 $8$ 个前缀询问，这样我们只需考虑在某个前缀询问之前，三维坐标都不大于它的星星个数。我们可以把每个操作看作一个五元组 $(i, x, y, z, \text{type})$，$i$ 表示操作的标号，$(x, y, z)$ 表示坐标，$\text{type}$ 表示操作类型。</p>
<p>我们对操作的标号 $i$ 做一遍分治。假设一次分治时左端点是 $l$，右端点是 $r$。我们令 $\text{mid} = \lfloor \frac{l + r}{2} \rfloor$，那么我们只考虑 $i \le \text{mid}$ 的修改对 $i &gt; \text{mid}$ 询问的贡献。这样做完后，我们发现对于每个询问，它之前的修改都恰好对它自己做了一次贡献，也就是答案的计算不重复也不遗漏。这样分治以后，总共的时间复杂度多了一个 $\log$，但是问题的维数减少了一。</p>
<p>将 $i$ 这一维去掉以后，问题就变成了对于每个询问，求三维坐标都不大于它的星星个数，不用再考虑星星和询问的相对位置了。之后，我们用同样的方法去掉 $x$，这样问题就从三维降到了二维。对于二维的问题，我们将二元组按照第一维排序，然后使用树状数组计算答案即可。总共的复杂度为 $O(n\log^3 n)$。</p>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T, Q, n, m, q, sz, tmp[maxn + <span class="number">3</span>], ans[maxn + <span class="number">3</span>], bit[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> bel[maxn + <span class="number">3</span>], tb[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">event</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> type, x, y, z;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	event(<span class="keyword">int</span> type = <span class="number">0</span>, <span class="keyword">int</span> x = <span class="number">0</span>, <span class="keyword">int</span> y = <span class="number">0</span>, <span class="keyword">int</span> z = <span class="number">0</span>): type(type), x(x), y(y), z(z) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; eve[maxn + <span class="number">3</span>], cur[maxn + <span class="number">3</span>], mrg[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_event</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	n++, eve[n] = event(type, x, y, z);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= sz; i += i &amp; -i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		bit[i] += y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> y = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i ^= i &amp; -i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		y += bit[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l == r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	solve(l, mid);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	solve(mid + <span class="number">1</span>, r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> p = l, q = mid + <span class="number">1</span>, cnt = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (p &lt;= mid || q &lt;= r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (q &gt; r || (p &lt;= mid &amp;&amp; cur[p].y &lt;= cur[q].y)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (bel[p] == <span class="literal">false</span> &amp;&amp; !cur[p].type) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add(cur[p].z, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			tb[++cnt] = bel[p];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mrg[cnt] = cur[p++];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (bel[q] == <span class="literal">true</span> &amp;&amp; cur[q].type) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> x = cur[q].type &gt; <span class="number">0</span> ? cur[q].type : -cur[q].type, y = cur[q].type &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				ans[x] += y * sum(cur[q].z);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			tb[++cnt] = bel[q];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mrg[cnt] = cur[q++];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= mid; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (bel[i] == <span class="literal">false</span> &amp;&amp; !cur[i].type) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			add(cur[i].z, <span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		bel[i] = tb[i - l + <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cur[i] = mrg[i - l + <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l == r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	cdq(l, mid);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	cdq(mid + <span class="number">1</span>, r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> p = l, q = mid + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	m = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (p &lt;= mid || q &lt;= r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (q &gt; r || (p &lt;= mid &amp;&amp; eve[p].x &lt;= eve[q].x)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			cur[++m] = eve[p++], bel[m] = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			cur[++m] = eve[q++], bel[m] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		eve[i] = cur[i - l + <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	solve(<span class="number">1</span>, m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (T--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Q);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		n = q = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, type, x, y, z, lx, ly, lz, rx, ry, rz; i &lt;= Q; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;type);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;x, &amp;y, &amp;z);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add_event(<span class="number">0</span>, x, y, z);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="built_in">scanf</span>(<span class="string">"%d %d %d %d %d %d"</span>, &amp;lx, &amp;ly, &amp;lz, &amp;rx, &amp;ry, &amp;rz);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				lx--, ly--, lz--, q++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add_event(q, rx, ry, rz);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add_event(-q, lx, ry, rz);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add_event(-q, rx, ly, rz);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add_event(-q, rx, ry, lz);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add_event(q, rx, ly, lz);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add_event(q, lx, ry, lz);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add_event(q, lx, ly, rz);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add_event(-q, lx, ly, lz);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			tmp[i] = eve[i].z;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		sort(tmp + <span class="number">1</span>, tmp + n + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		sz = unique(tmp + <span class="number">1</span>, tmp + n + <span class="number">1</span>) - (tmp + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			eve[i].z = lower_bound(tmp + <span class="number">1</span>, tmp + sz + <span class="number">1</span>, eve[i].z) - tmp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cdq(<span class="number">1</span>, n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="整体二分"><a href="#整体二分" class="headerlink" title="整体二分"></a>整体二分</h1><p>整体二分是一种分治算法，让我们直接看题吧。</p>
<h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p><a href="https://www.luogu.org/problem/P3332" target="_blank" rel="noopener">「ZJOI 2013」K 大数查询（Luogu 3332）</a></p>
<p>有 $n$ 个栈，一开始为空。有 $m$ 次操作，共分两种：</p>
<ul>
<li><code>1 a b c</code> 表示在第 $a$ 个栈到第 $b$ 个栈中各添加一个权值为 $c$ 的元素。</li>
<li><code>2 l r k</code> 表示询问第 $l$ 个栈到第 $r$ 个栈中第 $k$ 大的元素。</li>
</ul>
<p>数据范围：$n, m \le 5 \times 10^4$。</p>
<h2 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h2><p>想要求一个集合的第 $k$ 大，考虑使用二分的方法。每次查询 $&gt; x$ 的数的个数，设结果为 $y$。如果 $y &lt; k$，则答案 $\le x$；否则，答案 $&gt;x$。</p>
<p>但是发现 $1$ 操作不好用数据结构维护，不能在线地做二分。考虑离线，然后使用整体二分的方法。具体地，我们定义函数 <code>solve(A[], L, R)</code>，其中 $A$ 表示所有操作形成的序列，$L, R$ 表示 $A$ 中所有的修改涉及到的数，以及所有询问的答案都在区间 $[L, R]$ 内部，也就是分治的子问题。为了方便起见，我们令 $M$ 表示区间 $[L, R]$ 的中点，也就是 $\lfloor \frac{L + R}{2} \rfloor$。</p>
<p>我们考虑通过 <code>solve</code> 函数把原问题递归到它的子问题。也就是说，我们要判断 $A$ 中的每个询问的答案是否 $\le M$。对 $c_i &gt; M$ 的修改和所有询问按照发生的时间依次考虑，我们要计算对于每个询问，有多少 $&gt; M$ 的数在它的区间内部。使用支持区间加法，区间查询的线段树即可。我们将计算结果记作 $\text{res}(i)$，并新建两个序列 $A_l, A_r$，表示递归到左边的序列和递归到右边的序列。</p>
<p>之后，扫一遍 $A$。如果某个元素是修改，则根据它的 $c$ 将其加入 $A_l$ 或 $A_r$ 中。如果是询问，就将 $\text{res(i)}$ 和 $k_i$ 做比较。如果 $\text{res(i)} \ge k_i$，则将它放入 $A_{r}$ 中；否则将它放到 $A_l$ 中，并将 $k_i \leftarrow k_i - \text{res}(i)$，因为已经有 $\text{res}(i)$ 个数排在它前面了。最后，递归求解 <code>solve(Al, L, M)</code> 以及 <code>solve(Ar, M + 1, R)</code> 即可。不难发现最多递归的层数是 $\log c$，并且每层最多有 $m$ 个元素。再加上线段树的复杂度 $O(\log n)$，总共的复杂度是 $O(m \log n \log c)$，可以通过本题。</p>
<h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (rt &lt;&lt; 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (ls | 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span>, maxm = maxn &lt;&lt; <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, q, ans[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll tag[maxm + <span class="number">3</span>], sum[maxm + <span class="number">3</span>], res[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">event</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> id, a, b, c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; e[maxn + <span class="number">3</span>], tmp[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	tag[ls] += tag[rt], sum[ls] += tag[rt] * (mid - l + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	tag[rs] += tag[rt], sum[rs] += tag[rt] * (r - mid);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	tag[rt] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sum[rt] = sum[ls] + sum[rs];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> lx, <span class="keyword">int</span> rx)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l &gt;= lx &amp;&amp; r &lt;= rx) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> sum[rt];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	push_down(rt, l, r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (lx &lt;= mid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans += query(ls, l, mid, lx, rx);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (rx &gt; mid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans += query(rs, mid + <span class="number">1</span>, r, lx, rx);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;	<span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> lx, <span class="keyword">int</span> rx, <span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l &gt;= lx &amp;&amp; r &lt;= rx) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tag[rt] += x, sum[rt] += (r - l + <span class="number">1</span>) * x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	push_down(rt, l ,r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (lx &lt;= mid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		modify(ls, l, mid, lx, rx, x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (rx &gt; mid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		modify(rs, mid + <span class="number">1</span>, r, lx, rx, x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	maintain(rt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l &gt; r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (L == R) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (e[i].id) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				ans[e[i].id] = L;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> M = (L + R) / <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!e[i].id &amp;&amp; e[i].c &gt; M) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			modify(<span class="number">1</span>, <span class="number">1</span>, n, e[i].a, e[i].b, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			res[i] = query(<span class="number">1</span>, <span class="number">1</span>, n, e[i].a, e[i].b);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!e[i].id &amp;&amp; e[i].c &gt; M) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			modify(<span class="number">1</span>, <span class="number">1</span>, n, e[i].a, e[i].b, <span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> p = l, q = r;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!e[i].id) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (e[i].c &lt;= M) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				tmp[p++] = e[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				tmp[q--] = e[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (res[i] &lt; e[i].c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				tmp[p] = e[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				tmp[p++].c -= res[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				tmp[q--] = e[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	reverse(tmp + q + <span class="number">1</span>, tmp + r + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		e[i] = tmp[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	solve(l, p - <span class="number">1</span>, L, M);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	solve(p, r, M + <span class="number">1</span>, R);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, t; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;t, &amp;e[i].a, &amp;e[i].b, &amp;e[i].c);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		e[i].id = t == <span class="number">1</span> ? <span class="number">0</span> : ++q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	solve(<span class="number">1</span>, m, <span class="number">0</span>, n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>「LOJ 6686」Stupid GCD（数论）</title>
    <url>/2019/07/28/20190728-LOJ6686-Stupid-GCD/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://loj.ac/problem/6686" target="_blank" rel="noopener">「LOJ 6686」Stupid GCD</a></p>
<p>求下列式子的值：</p>
<script type="math/tex; mode=display">\sum_{i = 1}^{n} \gcd(\lfloor \sqrt[3]{i} \rfloor, i)</script><p>数据范围：$n \le 10^{30}$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>Siyuan 太强啦 QwQ</p>
<p>先枚举 $\sqrt[3]i$ 的值：</p>
<script type="math/tex; mode=display">
\begin {align*}
  & \sum_{i = 1}^{n} \gcd(\lfloor \sqrt[3]{i} \rfloor, i) \\
= & \sum_{i = 1}^{\lfloor \sqrt[3]{n} \rfloor} \sum_{j = i^3}^{\min\{n, i ^ 3 + 3i^2 + 3i\}}\gcd(i, j) \\
= & \color{green}{\sum_{i = \lfloor \sqrt[3]{n} \rfloor^3}^{n} \gcd(\lfloor \sqrt[3]{n} \rfloor, i)} + \color{purple}{\sum_{i = 1}^{\lfloor \sqrt[3]{n} \rfloor - 1} \sum_{j = 0}^{3i^2 + 3i}\gcd(i, j)} \\
\end {align*}</script><p>考虑子问题：</p>
<script type="math/tex; mode=display">
\begin {align*}
  & \sum_{i = 1}^{n} \gcd(m, i) \\
= & \sum_{d} d \sum_{i = 1}^{n} [\gcd(m, i) = d]\\
= & \sum_{d | m} d \sum_{td | m, td | i} \mu(t) \\
= & \sum_{T | m} \lfloor \frac{n}{T}\rfloor \sum_{d | T} d \cdot \mu(\frac{T}{d}) \\
= & \sum_{T | m} \lfloor \frac{n}{T} \rfloor \varphi(T)
\end {align*}</script><p>考虑计算绿色部分：</p>
<script type="math/tex; mode=display">
\begin {align*}
  & \color{green}{\sum_{i = \lfloor \sqrt[3]{n} \rfloor^3}^{n} \gcd(\lfloor \sqrt[3]{n} \rfloor, i)} \\
= & \sum_{i = \lfloor \sqrt[3]{n} \rfloor^3}^{n} \gcd(\lfloor \sqrt[3]{n} \rfloor, i) \\
= & \sum_{i = 0}^{n - \lfloor \sqrt[3]{n} \rfloor^3} \gcd( \lfloor \sqrt[3]{n} \rfloor, i)
\end {align*}</script><p>枚举 $\lfloor \sqrt[3]n \rfloor$ 的因数，递归计算 $\varphi$ 值即可。时间复杂度 $O(n^{\frac{1}{6}})$。</p>
<p>再考虑计算紫色部分。令 $m = \lfloor \sqrt[3]n \rfloor - 1$，得：</p>
<script type="math/tex; mode=display">
\begin {align*}
  & \color{purple}{\sum_{i = 1}^{\lfloor \sqrt[3]{n} \rfloor - 1} \sum_{j = 0}^{3i^2 + 3i}\gcd(i, j)} \\ 
= & \sum_{i = 1}^{m} \sum_{j = 0}^{3i^2 + 3i}\gcd(i, j) \\
= & \frac{m \cdot (m + 1)}{2} + \sum_{i = 1}^{m} \sum_{T | i} \lfloor \frac{3i^2 + 3i}{T} \rfloor \cdot \varphi(T) \\
= & \frac{m \cdot (m + 1)}{2} + \sum_{T = 1}^{m}\varphi(T) \sum_{i = 1}^{\lfloor \frac{m}{T} \rfloor} \frac{3T^2i^2 + 3Ti}{T} \\
= & \frac{m \cdot (m + 1)}{2} + 3 \sum_{T = 1}^{m} \varphi(T) \sum_{i = 1}^{\lfloor \frac{m}{T} \rfloor} Ti^2 + i \\
= & \frac{m \cdot (m + 1)}{2} + 3 \cdot (\sum_{T = 1}^{m} \varphi(T) \cdot T \sum_{i = 1}^{\lfloor \frac{m}{T} \rfloor} i^2) +  3 \cdot (\sum_{T = 1}^{m} \varphi(T) \cdot \sum_{i = 1}^{\lfloor \frac{m}{T}\rfloor} i) \\
\end {align*}</script><p>使用整除分块 + 杜教筛即可做到 $O(n^\frac{2}{9})$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr, __VA_ARGS__)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> __int128 lll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e7</span>, maxk = <span class="number">10</span>, mod = <span class="number">998244353</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">lll n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll m, a[maxk + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> k, p[maxn + <span class="number">3</span>], phi[maxn + <span class="number">3</span>], iphi[maxn + <span class="number">3</span>], c, b[maxk + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;ll, <span class="keyword">int</span>&gt; mp_phi, mp_iphi, mp_m;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scan_lll</span><span class="params">(lll &amp;n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	n = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">char</span> ch = getchar();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ch = getchar();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		n = n * <span class="number">10</span> + (ch ^ <span class="string">'0'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ch = getchar();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	phi[<span class="number">1</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!phi[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			phi[i] = i - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			p[++k] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k &amp;&amp; i * p[j] &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				phi[i * p[j]] = phi[i] * p[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			phi[i * p[j]] = phi[i] * (p[j] - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		iphi[i] = <span class="number">1l</span>l * phi[i] * i % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		phi[i] += phi[i - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		phi[i] &lt; mod ? <span class="number">0</span> : phi[i] -= mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		iphi[i] += iphi[i - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		iphi[i] &lt; mod ? <span class="number">0</span> : iphi[i] -= mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum_id</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">1l</span>l * n * (n + <span class="number">1</span>) / <span class="number">2</span> % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum_sqr</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> (lll) n * (n + <span class="number">1</span>) * (<span class="number">2</span> * n + <span class="number">1</span>) / <span class="number">6</span> % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum_phi</span><span class="params">(ll n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (n &lt;= maxn) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> phi[n];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (mp_phi.count(n)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> mp_phi[n];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> &amp;x = mp_phi[n] = sum_id(n % mod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (ll i = <span class="number">2</span>, j = i; i &lt;= n; i = j + <span class="number">1</span>, j = i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		j = n / (n / i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x = (x + (j - i + <span class="number">1</span>) % mod * (mod - sum_phi(n / i))) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum_iphi</span><span class="params">(ll n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (n &lt;= maxn) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> iphi[n];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (mp_iphi.count(n)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> mp_iphi[n];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> &amp;x = mp_iphi[n] = sum_sqr(n % mod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (ll i = <span class="number">2</span>, j = i; i &lt;= n; i = j + <span class="number">1</span>, j = i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		j = n / (n / i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x = (x + <span class="number">1l</span>l * (sum_id(j % mod) - sum_id((i - <span class="number">1</span>) % mod) + mod) * (mod - sum_iphi(n / i))) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> &amp;ans, ll m, lll n, <span class="keyword">int</span> b[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (mp_m.count(m)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> mp_m[m];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> &amp;res = mp_m[m] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (m == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans = (ans + n) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> res = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> t[maxk + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		t[i] = b[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b[i] &gt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			t[i]--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dfs(ans, m / a[i], n, t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			t[i]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b[i] &gt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			t[i]--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			res = <span class="number">1l</span>l * dfs(ans, m / a[i], n, t) * (a[i] - !t[i]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans = (ans + (n / m) % mod * res) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve_1</span><span class="params">(lll n, ll m)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = m % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	c = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll t = m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; <span class="number">1l</span>l * i * i &lt;= t; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (t % i == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[++c] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">while</span> (t % i == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				t /= i, b[c]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (t &gt; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a[++c] = t, b[c] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs(ans, m, n, b);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve_2</span><span class="params">(ll n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = sum_id(n % mod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (ll i = <span class="number">1</span>, j = i; i &lt;= n; i = j + <span class="number">1</span>, j = i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		j = n / (n / i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans = (ans + <span class="number">3l</span>l * (sum_phi(j) - sum_phi(i - <span class="number">1</span>) + mod) * sum_id(n / i % mod)) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans = (ans + <span class="number">3l</span>l * (sum_iphi(j) - sum_iphi(i - <span class="number">1</span>) + mod) * sum_sqr(n / i % mod)) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	scan_lll(n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	m = powl(n, <span class="number">1.</span> / <span class="number">3</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> ((lll) (m + <span class="number">1</span>) * (m + <span class="number">1</span>) * (m + <span class="number">1</span>) &lt;= n) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		m++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	prework(min(<span class="number">1l</span>l * maxn, m));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (solve_1(n - (lll) m * m * m, m) + solve_2(m - <span class="number">1</span>)) % mod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>「学习笔记」挑战多项式</title>
    <url>/2019/07/27/20190727-Polynomial-Algorithms/</url>
    <content><![CDATA[<p>挑战失败 :(</p>
<p>暂时只会多项式加法，多项式减法，多项式乘法，多项式除法，多项式求逆，多项式积分，多项式求导。</p>
<p>还不会的：多项式对数函数，多项式指数函数，多项式开根，多项式快速幂，多项式多点求值，多项式快速插值。</p>
<a id="more"></a>
<p>部分多项式算法模版：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr, __VA_ARGS__)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">18</span>, mod = <span class="number">998244353</span>, rt = <span class="number">3</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> mx, lg, rev[maxn + <span class="number">3</span>], n, m, a[maxn + <span class="number">3</span>], b[maxn + <span class="number">3</span>], q[maxn + <span class="number">3</span>], r[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">settings</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	freopen(<span class="string">"output.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	b &lt; <span class="number">0</span> ? b += mod - <span class="number">1</span> : <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> c = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="number">1l</span>l * a * a % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = <span class="number">1l</span>l * a * c % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dft</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n, <span class="keyword">int</span> type)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (i &lt; rev[i]) swap(A[i], A[rev[i]]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n; k &lt;&lt;= <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = qpow(rt, type * (mod - <span class="number">1</span>) / (k &lt;&lt; <span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += k &lt;&lt; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> y = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + k; j++, y = <span class="number">1l</span>l * x * y % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> p = A[j], q = <span class="number">1l</span>l * A[j + k] * y % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				A[j] = p + q, A[j] &lt; mod ? <span class="number">0</span> : A[j] -= mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				A[j + k] = p - q, A[j + k] &lt; <span class="number">0</span> ? A[j + k] += mod : <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (type == <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = qpow(n, mod - <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			A[i] = <span class="number">1l</span>l * A[i] * x % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poly_conv</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> B[], <span class="keyword">int</span> C[], <span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> X[maxn + <span class="number">3</span>], Y[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	copy(A, A + n + <span class="number">1</span>, X), copy(B, B + n + <span class="number">1</span>, Y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (lg = <span class="number">0</span>, mx = <span class="number">1</span>; mx &lt;= n &lt;&lt; <span class="number">1</span>; mx &lt;&lt;= <span class="number">1</span>) lg++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; mx; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (lg - <span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	fill(X + n + <span class="number">1</span>, X + mx, <span class="number">0</span>), fill(Y + n + <span class="number">1</span>, Y + mx, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dft(X, mx, <span class="number">1</span>), dft(Y, mx, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mx; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		C[i] = <span class="number">1l</span>l * X[i] * Y[i] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dft(C, mx, <span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poly_add</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> B[], <span class="keyword">int</span> C[], <span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		C[i] = A[i] + B[i], C[i] &lt; mod ? <span class="number">0</span> : C[i] -= mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poly_sub</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> B[], <span class="keyword">int</span> C[], <span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		C[i] = A[i] - B[i], C[i] &lt; <span class="number">0</span> ? C[i] += mod : <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poly_inv</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> B[], <span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		B[<span class="number">0</span>] = qpow(A[<span class="number">0</span>], mod - <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	poly_inv(A, B, n &gt;&gt; <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> X[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (lg = <span class="number">0</span>, mx = <span class="number">1</span>; mx &lt;= n &lt;&lt; <span class="number">1</span>; mx &lt;&lt;= <span class="number">1</span>) lg++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; mx; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (lg - <span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	copy(A, A + n + <span class="number">1</span>, X), fill(X + n + <span class="number">1</span>, X + mx, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dft(X, mx, <span class="number">1</span>), dft(B, mx, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mx; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		B[i] = <span class="number">1l</span>l * (<span class="number">2</span> + mod - <span class="number">1l</span>l * X[i] * B[i] % mod) * B[i] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dft(B, mx, <span class="number">-1</span>), fill(B + n + <span class="number">1</span>, B + mx, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poly_div</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> B[], <span class="keyword">int</span> Q[], <span class="keyword">int</span> R[], <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> X[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	fill(X, X + maxn, <span class="number">0</span>), reverse(A, A + n + <span class="number">1</span>), reverse(B, B + m + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	poly_inv(B, X, n - m), poly_conv(A, X, Q, n - m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	reverse(A, A + n + <span class="number">1</span>), reverse(B, B + m + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	fill(Q + n - m + <span class="number">1</span>, Q + maxn, <span class="number">0</span>), reverse(Q, Q + n - m + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	poly_conv(B, Q, X, n), poly_sub(A, X, R, n), fill(R + m, R + maxn, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poly_int</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> B[], <span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	B[<span class="number">0</span>] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		B[i] = <span class="number">1l</span>l * A[i - <span class="number">1</span>] * qpow(i, mod - <span class="number">2</span>) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poly_deriv</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> B[], <span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		B[i - <span class="number">1</span>] = <span class="number">1l</span>l * A[i] * i % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	B[n] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	settings();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	poly_div(a, b, q, r, n, m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d%c"</span>, q[i], <span class="string">" \n"</span>[i == n - m]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d%c"</span>, r[i], <span class="string">" \n"</span>[i == m - <span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title>「Luogu U71500 / EOJ 191C」星空夜 命题报告</title>
    <url>/2019/07/26/20190726-EOJ191C-LCM2/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.luogu.org/problem/U71500" target="_blank" rel="noopener">「Luogu U71500」星空夜</a></p>
<p><a href="https://acm.ecnu.edu.cn/contest/191/problem/C/" target="_blank" rel="noopener">「EOJ 191C」最小公倍数 2</a></p>
<p>有 $n$ 颗星星，每颗可以用有序数对 $(a_i, b_i)$ 表示，意为它会在时刻 $a_i + k \times b_i (k \in N)$ 闪烁。给定 $q$ 组询问，每次指定一个区间 $[l, r]$，询问编号在这个区间中的星星是否可能在某时刻同时闪烁一次。</p>
<p>数据范围：$n, q \le 10^6, b_i \le 10^7$。</p>
<p>预计难度：提高组（？）。</p>
<a id="more"></a>
<p>我们令 $m$ 表示 $\max {r - l + 1}$，子任务如下：</p>
<ul>
<li>对于 $25 \%$ 的数据，$q \le 10, m \le 10^3$。</li>
<li>对于 $50 \%$ 的数据，$q \le 10, b_i \le 10^6, m \le 10^5$。</li>
<li>对于另外 $10 \%$ 的数据，$n \le 10^3$。</li>
<li>对于另外 $20 \%$ 的数据，$l = 1$。</li>
<li>对于 $100 \%$ 的数据，无特殊限制。</li>
</ul>
<p>其中 $50 \%$ 的数据满足 $b_i \le 10^3$，均匀分布在所有测试点中。</p>
<p>（不过这个题因为数据太难造最后投给 EOJ 了，就变成 ACM 题了，所以部分分仅供参考）</p>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><h2 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h2><p>首先进行初步的分析。不难发现可以将「星星会在时刻 $a_i + k \times b_i (k \in N)$ 闪烁」的条件替换成「星星会在时刻 $(a_i \bmod b_i) + k \times b_i (k \in N)$ 闪烁」，这不影响答案。这是因为如果在时刻 $x$ 选中的星星都会闪烁，那么在时刻 $x + \text{lcm}(b_1, b_2, \cdots, b_n)$ 它们也都会闪烁。这样，我们就可以预先把输入进来的 $a_i$ 全部对 $b_i$ 取模。</p>
<p>然后发现这个题目本质是询问一个区间的线性同余方程组是否有解。也就是询问：</p>
<script type="math/tex; mode=display">
\begin {cases}
x \equiv a_1 \pmod {b_1} \\
x \equiv a_2 \pmod {b_2} \\
\cdots \\
x \equiv a_n \pmod {b_n}
\end {cases}</script><p>是否有解。</p>
<p>注意到不能直接使用 ExCRT 的方法计算答案，因为答案可能很大。但是这题只需要我们判断方程组是否有解，所以无需算出答案。</p>
<p>可以证明：一个线性同余方程组有解当且仅当其中的任意两个方程形成的方程组都有解。原因是一个线性同余方程组的所有解一定可以写成满足「$x \equiv r_1 \pmod {p_1^{k_1}}, x \equiv r_2 \pmod {p_2^{k_2}}, \cdots$（$p$ 是素数）」这样一组的条件的任何数。如果一个方程组没有解，那么一定存在「$x \equiv r_1 \pmod {p_1^{k_1}}$，并且 $x \equiv r_2 \pmod {p_1^{k_1}}, $，其中 $r_1 \neq r_2$」这两个限制。而对于这两个限制，一定能找到两个方程，它们分别包含了两个限制的信息。也就是说，如果线性同余方程组无解，那么一定存在两个方程，它们组成的方程组无解。换句话说，如果任意两个方程形成的方程组都有解，则整个方程组一定有解。</p>
<p>我们暴力枚举每两个方程，判断它们是否矛盾即可。使用裴蜀定理即可证明它们不矛盾当且仅当 $\gcd(b_1, b_2)$ 整除 $a_1 - a_2$。时间复杂度 $O(n + qm^2 \log b_i)$。期望得分 $25$ 分。</p>
<h2 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h2><p>考虑优化算法一。看到了 $\gcd$ 以后容易想到枚举因数。枚举因数 $d$，考虑所有 $b_i$ 是 $d$ 倍数的星星。如果所有 $a_i \bmod d$ 都相同的话，就没有矛盾。这样一次的复杂度是 $O(b_i \log b_i)$ 的，但是由于我们只需要枚举 $d$ 是素数或素数的几次方的情况，复杂度可以降为 $O(b_i \log \log b_i)$。</p>
<p>时间复杂度 $O(n + q(m + b_i \log \log b_i))$，期望得分 $50$ 分。</p>
<h2 id="算法三"><a href="#算法三" class="headerlink" title="算法三"></a>算法三</h2><p>对于 $n$ 较小的情况，我们可以将是否矛盾的关系建成一个 01 矩阵，每次询问相当于问一个矩形是否全为 $0$。使用二维前缀和即可。时间复杂度 $O(n^2 \log b_i + q)$，结合以上算法期望得分 $60$ 分。</p>
<h2 id="算法四"><a href="#算法四" class="headerlink" title="算法四"></a>算法四</h2><p>对于 $l = 1$ 的测试点，发现一定存在一点 $p$，使得 $r \le p$ 的答案为 <code>Yes</code>，$r &gt; p$ 的答案为 <code>No</code>。在算法二基础上套个二分，计算出 $p$ 再回答询问即可。时间复杂度 $O((n + b_i \log \log b_i) \log n + q)$。</p>
<p>Nice Try. 期望得分 $10$ 分，结合上述算法期望得分 $70$ 分。</p>
<h2 id="算法五"><a href="#算法五" class="headerlink" title="算法五"></a>算法五</h2><p>之前的算法好像没什么前途，考虑换一种思路。</p>
<p>对于每组限制 $(a_i, b_i)$，我们将 $b_i$ 素因数分解：$b_i = \prod_{j} p_j^{k_j}$ 。然后，对于每一个 $p_j^{k_j}$，将其拆成 $k_j$ 个限制，模数分别等于 $p_j, p_j^2, \cdots, p_j^{k_j}$，余数等于 $a_i$ 对它们取模的结果。对于一组 $(a_i, b_i)$，我们最多会将其拆成 $\log b_i$ 组限制。</p>
<p>拆分后的好处是什么呢？发现如果两个方程矛盾，那么从它们中一定可以各自选出一个限制，满足限制的模数相同，但余数不同。</p>
<p>这样我们就把问题转化成了：给定 $O(n \log n)$ 组有序数对 $(a_i, b_i)$，每次询问一个区间内是否存在 $b_i$ 相同且 $a_i$ 不同的一组数对。</p>
<p>对于 $l = 1$ 的数据，我们只需线性地扫一遍即可。用线性筛分解素因数，时间复杂度    $O(n \log b_i + b_i)$。期望得分 $20$ 分，结合上述算法期望得分 $80$ 分。</p>
<h2 id="算法六"><a href="#算法六" class="headerlink" title="算法六"></a>算法六</h2><p>不难发现对于每一个点 $i$，一定存在一点 $p_i$ 使得以 $i$ 为右端点的区间 $[l, i]$ 中所有 $l \ge p_i$ 的答案都为 <code>Yes</code>，而 $l &lt; p_i$ 的区间答案都为 <code>No</code>。考虑用 2 - pointers 预处理出 $p_i$。由于具体过程叙述起来较为复杂，请读者自行思考，也可以参考标程。</p>
<p>时间复杂度 $O(n \log b_i + b_i)$。期望得分 $100$ 分。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>, maxm = <span class="number">1e7</span>, logm = <span class="number">24</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, q, mod[maxn + <span class="number">3</span>], rem[maxn + <span class="number">3</span>], lft[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> k, prm[maxm + <span class="number">3</span>], mnf[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> cnt[maxn + <span class="number">3</span>], a[maxn + <span class="number">3</span>][logm + <span class="number">3</span>], b[maxn + <span class="number">3</span>][logm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> id[maxm + <span class="number">3</span>], num[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cancel</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> c, <span class="keyword">int</span> p[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (id[p[i]] == x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			id[p[i]] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			num[p[i]] = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;rem[i], &amp;mod[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		rem[i] %= mod[i], m = max(m, mod[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!mnf[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			prm[++k] = i, mnf[i] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k &amp;&amp; i * prm[j] &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mnf[i * prm[j]] = prm[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (i % prm[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> &amp;c = cnt[i], *p = a[i], *r = b[i], x = mod[i], y = rem[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (x &gt; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> cur = mnf[x], ind = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">while</span> (mnf[x] == cur) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				x /= mnf[x], ind++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, prd = <span class="number">1</span>; j &lt; ind; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				prd *= cur;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				p[++c] = prd, r[c] = y % prd;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		num[i] = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, pos = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> &amp;c = cnt[i], *p = a[i], *r = b[i], npos = pos;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= c; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (~num[p[j]] &amp;&amp; num[p[j]] != r[j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				npos = max(npos, id[p[j]] + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = pos; j &lt; npos; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			cancel(j, cnt[j], a[j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		lft[i] = pos = npos;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= c; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			num[p[j]] = r[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			id[p[j]] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> l, r; q--; ) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;l, &amp;r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, l &gt;= lft[r] ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数论</tag>
        <tag>出题</tag>
        <tag>2 - pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>「BZOJ 3580」冒泡排序（排序 + 二分）</title>
    <url>/2019/07/03/20190703-BZOJ3580-Bubble-Sort/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3580" target="_blank" rel="noopener">「BZOJ 3580」冒泡排序</a></p>
<p>对于长度为 $n$ 的排列 $a$，给定如下的冒泡排序的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n - i; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			swap(a[j], a[j + <span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>问第 $k$ 次 swap 操作过后的 $a$。</p>
<p>数据范围：$n \le 10^6$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>对于每个位置记在它前面大于它的数的个数 $c_i$。我们先计算出第 $k$ 次操作以前总共进行了几轮完整的冒泡。考虑二分答案 $x$，我们要计算 $x$ 轮冒泡之后的 swap 次数。我们发现每一轮，如果某个数前面有比它大的数，那么这个数肯定会向前挪动一步；否则它就不会向前挪动了。而对于每一个数，向前挪动一次就代表 swap 一次。所以，$x$ 轮以后第 $i$ 个数的移动次数就是 $\min { x, c_i }$，总移动次数就是 $\sum_i \min { x, c_i }$。</p>
<p>我们二分出了总共进行了几轮完整的冒泡，接下来只要处理剩下的半轮冒泡即可。考虑先解出若干轮完整冒泡后的数列，假设轮数是 $x$。那么，对于 $c_i \ge x$ 的时候，$a_i$ 会被挪到 $a_{i - c_i}$ 处；对于剩下的所有 $c_i &lt; x$ 的数，我们发现它们之间的相对顺序已经被排好了，我们只要在当前还没有数的位置中从小到大地填入这些数即可。对于剩下的半轮冒泡，我们直接模拟即可。这样的总时间复杂度就是 $O(n \log n)$，可以通过本题。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, a[maxn + <span class="number">3</span>], b[maxn + <span class="number">3</span>], c[maxn + <span class="number">3</span>], d[maxn + <span class="number">3</span>], m, t[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll k;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i ^= i &amp; -i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		b[i]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> y = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += i &amp; -i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		y += b[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll y = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		y += min(c[i], x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %lld"</span>, &amp;n, &amp;k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll s = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		c[i] = sum(a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		add(a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		s += c[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (k &gt; s) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">puts</span>(<span class="string">"Impossible!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> l = <span class="number">0</span>, r = n, mid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (l &lt; r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		mid = (l + r + <span class="number">1</span>) / <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (solve(mid) &lt;= k) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			l = mid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			r = mid - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	k -= solve(l);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (c[i] &gt;= l) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			d[i - l] = a[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			t[++m] = a[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sort(t + <span class="number">1</span>, t + m + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, p = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!d[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			d[i] = t[p++];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; </span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; k &amp;&amp; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (d[i] &gt; d[i + <span class="number">1</span>]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			swap(d[i], d[i + <span class="number">1</span>]), k--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d%c"</span>, d[i], <span class="string">" \n"</span>[i == n]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>二分</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>「Codeforces 1187D」Subarray Sorting（排序）</title>
    <url>/2019/07/03/20190703-CF1187D-Subarray-Sorting/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://codeforc.es/contest/1187/problem/D" target="_blank" rel="noopener">「Codeforces 1187D」Subarray Sorting</a></p>
<p>给定长度为 $n$ 的两个数列     $A, B$，问是否可以做若干次「将 $A$ 的某个区间升序排序」把 $A$ 变为 $B$。</p>
<p>数据范围：$n \le 3 \times 10^5$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>发现自己最近连水题都不会做了 QAQ。</p>
<p>首先把「将 $A$ 的某个区间升序排序」这种操作替换成「将 $A$ 的某两个相邻的数升序排序」这种操作以方便思考。转化后的题目其实本质没有变化，因为我们可以用冒泡排序的方式实现「将一个区间排序」。</p>
<p>然后逐位考虑，假设现在考虑到 $A_i$，前 $i - 1$ 位已经排好了。那么我们如果要让操作过后的 $A_i$ 要和 $B_i$ 相等，就必须从 $A$ 的后面把一个等于 $B_i$ 的数调动到第 $i$ 位。我们找到数列 $A$ 从 $i$ 开始的第一个 $A_j = B_i$，考虑调动 $A_j$。不难发现这个数能被成功调动当且仅当所有 $A_k (i \le k &lt; j)$ 都小于它自己。于是我们暴力地模拟这个过程即可得到一个 $O(n^2)$ 的算法。</p>
<p>可惜这并不能通过本题，考虑使用数据结构优化。我们可以直接使用平衡树维护这个过程，但我们还有更简单的方法。发现我们只需要用到一个数列没被调动过的数的前缀最大值。于是我们每次调动完一个数后，我们将它赋值为 $-1$，这样，它就不会被算进最大值中了。对于还可使用的数，我们使用线段树维护区间最大值即可。如何实现寻找 $A$ 中可使用的第一个 $A_j = B_i$ 呢？我们开 $n$ 个队列，第 $i$ 个存储 $A$ 中数值为 $i$ 的数的出现位置；每次找数时，我们只需取出队首即可。总时间复杂度 $O(n \log n)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (x &lt;&lt; 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (ls | 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) / 2)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span>, maxm = maxn * <span class="number">4</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T, n, a[maxn + <span class="number">3</span>], b[maxn + <span class="number">3</span>], mx[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; app[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	mx[x] = max(mx[ls], mx[rs]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l == r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		mx[x] = z;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (y &lt;= mid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		modify(ls, l, mid, y, z);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		modify(rs, mid + <span class="number">1</span>, r, y, z);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	maintain(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> lx, <span class="keyword">int</span> rx)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (lx &gt; rx) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l &gt;= lx &amp;&amp; r &lt;= rx) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> mx[x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> res = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (lx &lt;= mid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		res = max(res, query(ls, l, mid, lx, rx));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (rx &gt; mid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		res = max(res, query(rs, mid + <span class="number">1</span>, r, lx, rx));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (T--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; t;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			swap(t, app[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">4</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mx[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[i] = n - a[i] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			app[a[i]].push(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			modify(<span class="number">1</span>, <span class="number">1</span>, n, i, a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			b[i] = n - b[i] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (app[b[i]].empty()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				flag = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> x = app[b[i]].front();</span></pre></td></tr><tr><td class="code"><pre><span class="line">			app[b[i]].pop();</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (query(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">1</span>, x - <span class="number">1</span>) &gt; a[x]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				flag = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			modify(<span class="number">1</span>, <span class="number">1</span>, n, x, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">puts</span>(flag ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>「HNOI 2010」Planar（Tarjan）</title>
    <url>/2019/07/02/20190702-HNOI2010-Planar/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1997" target="_blank" rel="noopener">「HNOI 2010」Planar（BZOJ 1997）</a></p>
<p>给定一个 $n$ 个结点 $m$ 条边的无向图，保证它有哈密尔顿回路。给定它的一个哈密尔顿回路，问它是不是平面图。</p>
<p>数据范围：$T \le 100, n \le 200, m \le 10^4$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>把哈密尔顿回路看作是一个环，其他边看作是环上的一条弦。对于每一条弦，我们要么把它放在环的外面，要么把它放在里面。如果两条弦不相交，那么随便放；否则它们不能在圆的同一侧。于是使用 2 - SAT 来判断是否有解即可。</p>
<p>这样的复杂度还不够优秀，我们考虑优化。发现平面图满足 $m \le 3n - 6$，所以我们加入剪枝即可把复杂度优化到 $O(Tn^2)$。注意 2 - SAT 上表示两个变量取值不相同需要联结四条有向边，而不是一条或两条。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T, n, m, a[maxn + <span class="number">3</span>], k, u[maxn + <span class="number">3</span>], v[maxn + <span class="number">3</span>], rnk[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> tm, dfn[maxn + <span class="number">3</span>], low[maxn + <span class="number">3</span>], top, st[maxn + <span class="number">3</span>], cnt, bel[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> in[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	G[u].push_back(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfn[u] = low[u] = ++tm;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	st[++top] = u, in[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!dfn[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			tarjan(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			low[u] = min(low[u], low[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (in[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			low[u] = min(low[u], dfn[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (low[u] == dfn[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		++cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">do</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			bel[st[top]] = cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			in[st[top]] = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">while</span> (st[top--] != u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (T--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k * <span class="number">2</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; t;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			swap(G[i], t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dfn[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		k = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u[i], &amp;v[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			rnk[a[i]] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (m &gt; <span class="number">3</span> * n - <span class="number">6</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> x = rnk[u[i]], y = rnk[v[i]];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (x &gt; y) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				swap(x, y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> ((x == <span class="number">1</span> &amp;&amp; y == n) || x == y - <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			u[++k] = x, v[k] = y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= k; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (u[i] &gt;= u[j] &amp;&amp; u[i] &lt;= v[j] &amp;&amp; v[i] &gt;= u[j] &amp;&amp; v[i] &lt;= v[j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> ((u[i] &lt;= u[j] || u[i] &gt;= v[j]) &amp;&amp; (v[i] &lt;= u[j] || v[i] &gt;= v[j])) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add(i, j + k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add(j, i + k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add(i + k, j);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add(j + k, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tm = <span class="number">0</span>, cnt = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k * <span class="number">2</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (!dfn[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				tarjan(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (bel[i] == bel[i + k]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				flag = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">puts</span>(flag ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Tarjan</tag>
      </tags>
  </entry>
  <entry>
    <title>「BZOJ 2438」杀人游戏（Tarjan + 概率论）</title>
    <url>/2019/06/30/20190630-BZOJ2438-Killing-Game/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2438" target="_blank" rel="noopener">「BZOJ 2438」杀人游戏</a></p>
<p>给定一个 $n$ 个点 $m$ 条边的有向无向图，每个点代表一个人，每条单向边代表一组认识关系。已知有一个人是杀手，每个人是杀手的概率都是 $\frac{1}{n}$。有一个警察，每次可以询问一个人，他如果是杀手就会把警察杀掉，如果不是的话他会告诉警察他认识的人中谁是杀手或没有杀手。问警察选择最优策略，查到杀手后还存活的概率。</p>
<p>数据范围：$n \le 10^5, m \le 3 \times 10^5$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>首先发现答案等于 $(n - k) / n$，其中 $k$ 表示不知道某人的身份就去查他的次数。然后发现在同一个 SCC 中，我们只需要查一个人即可，并且在缩点后的图中，我们查完一个点就可以查所有它能到达的点。于是，我们统计缩点后的 DAG 度数为 $0$ 的点数即可。</p>
<p>但是有一种特殊情况。因为杀手只有一个，所以在某些情况下我们不需要查完所有点。如果我们查完了 $n - 1$ 个点都是平民，那么剩下的一个点就肯定是杀手。于是我们特判一下，如果缩点后存在一个度数为 $0$ 的点在原图上对应的点数为 $1$，并且它的所有出点的入度都大于 $1$，那么我们就可以不查这个点，也就是将 $k$ 减去一。注意这种操作只能做一次。</p>
<p>这样，我们就解决了这个问题。时间复杂度 $O(n + m)$。这道题告诉我们，一些关于连通性的图论问题往往需要考虑一些特殊情况。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>, maxm = <span class="number">3e5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, u[maxm + <span class="number">3</span>], v[maxm + <span class="number">3</span>], tm, dfn[maxn + <span class="number">3</span>], low[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> top, st[maxn + <span class="number">3</span>], cnt, sum[maxn + <span class="number">3</span>], bel[maxn + <span class="number">3</span>], deg[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> in[maxn + <span class="number">3</span>], ok[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	G[u].push_back(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfn[u] = low[u] = ++tm;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	st[++top] = u, in[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!dfn[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			tarjan(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			low[u] = min(low[u], low[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (in[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			low[u] = min(low[u], dfn[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (dfn[u] == low[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		++cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">do</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			sum[cnt]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			bel[st[top]] = cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			in[st[top]] = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">while</span> (st[top--] != u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u[i], &amp;v[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		add(u[i], v[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!dfn[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			tarjan(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		G[i].clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (bel[u[i]] != bel[v[i]]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			deg[bel[v[i]]]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			G[bel[u[i]]].push_back(bel[v[i]]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans += !deg[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!deg[i] &amp;&amp; sum[i] == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; G[i].size(); j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (deg[G[i][j]] == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					flag = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (flag) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				ans--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%.6lf\n"</span>, <span class="number">1.</span> * (n - ans) / n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Tarjan</tag>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>「Codeforces 622F」The Sum of the k-th Powers（多项式）</title>
    <url>/2019/06/30/20190630-CF622F-The-Sum-of-the-k-th-Powers/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://codeforces.com/problemset/problem/622/F" target="_blank" rel="noopener">「Codeforces 622F」The Sum of the k-th Powers</a></p>
<p>求 $\sum_{i = 1}^{n} i^k \bmod 10^9 + 7$。</p>
<p>数据范围：$n \le 10^9, k \le 10^6$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>直接做显然是不行的，我们猜想 $\sum_{i = 1}^{n} i^k$ 是一个 $k + 2$ 次多项式。我们先对于 $1 \le i \le k + 2$ 计算出 $a_i = \sum_{j = 1}^{i} j^k$ 的值，然后使用<a href="/2019/06/30/20190630-Lagrange-Interpolation/">拉格朗日插值</a>来求出该多项式在 $n$ 处的值即可。然而拉格朗日插值的复杂度是 $O(k^2)$ 的，不能通过此题。</p>
<p>考虑拉格朗日插值的过程。根据拉格朗日插值公式，答案为：</p>
<script type="math/tex; mode=display">
\begin {align}
f(n) &= \sum_{i} a_i \prod_{i \neq j} \frac{n - j}{i - j} \\
&= \left( \prod_{i} (n - i) \right) \times \sum_i \frac{a_i}{n - i} \prod_{i \neq j} \frac{1}{i - j} \\
&= \left( \prod_{i} (n - i) \right) \times \sum_i \frac{a_i}{n - i} \left( \prod_{i > j} \frac{1}{i - j} \times \prod_{i < j} \frac{1}{i - j} \right) 
\end {align}</script><p>而我们有：</p>
<script type="math/tex; mode=display">\prod_{i > j} \frac{1}{i - j} \times \prod_{i < j} \frac{1}{i - j} =  (i - 1)! \times (-1)^{k + 2 - i} (k + 2 - i)!</script><p>所以我们只需要预处理阶乘即可计算答案了。由于一开始的 $k$ 次方和计算和计算答案时需要求逆元，时间复杂度为 $O(k \log k)$。</p>
<p>能不能线性呢？答案是肯定的。注意到 $\text{ID}_k(x)$ 是完全积性函数，我们可以使用线性筛在 $O(k + \frac{k \log k}{\ln k}) = O(k)$ 的时间内算出它的前缀和。对于逆元，我们只需要使用线性求逆元的科技即可。这样，时间复杂度就优化成了 $O(k)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, k, m, p[maxn + <span class="number">3</span>], f[maxn + <span class="number">3</span>], fact[maxn + <span class="number">3</span>], finv[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num[maxn + <span class="number">3</span>], suf[maxn + <span class="number">3</span>], inv[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> b[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x &lt; <span class="number">0</span> ? x + mod : x &lt; mod ? x : x - mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> c = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="number">1l</span>l * a * a % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = <span class="number">1l</span>l * a * c % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	f[<span class="number">1</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!b[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			f[i] = qpow(i, k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			p[++m] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m &amp;&amp; i * p[j] &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			b[i * p[j]] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			f[i * p[j]] = <span class="number">1l</span>l * f[i] * f[p[j]] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (!i % p[j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[i] += f[i - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[i] &lt; mod ? <span class="number">0</span> : f[i] -= mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	fact[<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		fact[i] = <span class="number">1l</span>l * fact[i - <span class="number">1</span>] * i % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	finv[n] = qpow(fact[n], mod - <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		finv[i - <span class="number">1</span>] = <span class="number">1l</span>l * finv[i] * i % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> pre[], <span class="keyword">int</span> inv[], <span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	pre[<span class="number">0</span>] = pre[n + <span class="number">1</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + <span class="number">1</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		suf[i] = pre[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		pre[i] = <span class="number">1l</span>l * pre[i - <span class="number">1</span>] * pre[i] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		suf[i] = <span class="number">1l</span>l * suf[i + <span class="number">1</span>] * suf[i] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> x = qpow(pre[n], mod - <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		inv[i] = <span class="number">1l</span>l * x * pre[i - <span class="number">1</span>] % mod * suf[i + <span class="number">1</span>] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	prework(k + <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (n &lt;= k + <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[n]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k + <span class="number">2</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		num[i] = n - i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	solve(num, inv, k + <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k + <span class="number">2</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = <span class="number">1l</span>l * f[i] * inv[i] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x = <span class="number">1l</span>l * x * finv[i - <span class="number">1</span>] % mod * finv[k + <span class="number">2</span> - i] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> ((k + <span class="number">2</span> - i) &amp; <span class="number">1</span>) x = func(-x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans = func(ans + x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k + <span class="number">2</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans = <span class="number">1l</span>l * ans * (n - i) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title>「学习笔记」拉格朗日插值</title>
    <url>/2019/06/30/20190630-Lagrange-Interpolation/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.luogu.org/problemnew/show/P4781" target="_blank" rel="noopener">「模板」拉格朗日插值（Luogu 4781）</a></p>
<p>给定平面上的 $n$ 个点 $(x_1, y_1), (x_2, y_2), \cdots, (x_n, y_n)$，它们可以确定一个至多 $n - 1$ 次多项式。问这个多项式在 $k$ 点的取值$\bmod 998244353$ 的结果。</p>
<p>数据范围：$n \le 2000$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>我们可以构造一个多项式 $f_i(k)$ 满足它在 $x_i$ 处为 $1$，但是在 $x_j (i \neq j)$ 处为 $0$：</p>
<script type="math/tex; mode=display">f_i(k) = \prod_{i \neq j} \frac{k - x_j}{x_i - x_j}</script><p>于是题目中求的多项式 $f$ 就是：</p>
<script type="math/tex; mode=display">
\begin {align}
f(k) &= \sum_{i} y_i \times f_i(k) \\
&= \sum_{i} y_i \prod_{i \neq j} \frac{k - x_j}{x_i - x_j}。
\end {align}</script><p>这个多项式可以 $O(n^2)$ 计算，于是我们已经可以解决这个问题了。</p>
<p>但是我们发现在有些题目中，我们是动态维护这个过程的。也就是说，每次在平面上增加一个点，平面上的点确定的多项式的次数就会增加 $1$，然后我们求出所有这些多项式在 $k$ 点的值。</p>
<p>这时我们直接暴力做就变成 $O(n^3)$ 的了，不够优秀。观察式子，我们可以发现：</p>
<script type="math/tex; mode=display">
\begin {align}
f(k) &= \sum_{i} y_i  \prod_{i \neq j} \frac{k - x_j}{x_i - x_j} \\
&= \left( \prod_{i} (k - x_j)\right) \times \sum_{i} \frac{y_i}{k - x_i} \prod_{i \neq j} \frac{1}{x_i - x_j}
\end {align}</script><p>令 $g = \prod_{i} (k - x_j), t_i = \frac{y_i}{\prod_{i \neq j} x_i - x_j}$，那么:</p>
<script type="math/tex; mode=display">f(k) = g \sum_{i} \frac{t_i}{k - x_i}</script><p>这样，我们只需要再加入一个点的同时维护 $g, t_i$ 即可。$g$ 可以 $O(1)$ 地维护，而对于 $t_i$，我们需要扫一遍所有点，还要求 $n$ 个数的逆元，直接暴力做是 $O(n \log n)$ 的。但是，我们使用线性求逆元的科技即可把这一步优化到 $O(n)$。总复杂度 $O(n^2)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>这里采用动态的插值方法。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e3</span>, mod = <span class="number">998244353</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, k, x[maxn + <span class="number">3</span>], y[maxn + <span class="number">3</span>], g, t[maxn + <span class="number">3</span>], num[maxn + <span class="number">3</span>], suf[maxn + <span class="number">3</span>], inv[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x &lt; <span class="number">0</span> ? x + mod : x &lt; mod ? x : x - mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> c = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="number">1l</span>l * a * a % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = <span class="number">1l</span>l * a * c % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> num[], <span class="keyword">int</span> inv[], <span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	num[<span class="number">0</span>] = num[n + <span class="number">1</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + <span class="number">1</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		suf[i] = num[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		num[i] = <span class="number">1l</span>l * num[i - <span class="number">1</span>] * num[i] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		suf[i] = <span class="number">1l</span>l * suf[i + <span class="number">1</span>] * suf[i] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> x = qpow(num[n], mod - <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		inv[i] = <span class="number">1l</span>l * x * num[i - <span class="number">1</span>] % mod * suf[i + <span class="number">1</span>] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	g = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x[i], &amp;y[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		g = <span class="number">1l</span>l * g * f(k - x[i]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			num[j] = f(x[i] - x[j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		solve(num, inv, i - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		t[i] = y[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			t[i] = <span class="number">1l</span>l * t[i] * inv[j] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			t[j] = <span class="number">1l</span>l * t[j] * f(-inv[j]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans = (ans + <span class="number">1l</span>l * t[i] * qpow(f(k - x[i]), mod - <span class="number">2</span>)) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ans = <span class="number">1l</span>l * ans * g % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title>「POI 2008」BLO（Tarjan）</title>
    <url>/2019/06/30/20190630-POI2008-BLO/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1123" target="_blank" rel="noopener">「POI 2008」BLO（BZOJ 1123）</a></p>
<p>给定一个 $n$ 个点 $m$ 条边的无向图，问删去每个点的所有邻边以后图中有多少对结点（有序数对）不联通。</p>
<p>数据范围：$n \le 10^5, m \le 5 \times 10^5$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>首先删去某个点的邻边之后，它和其他所有点都不联通，所以预先把答案加上 $2n - 2$。</p>
<p>根据割点的定义，只有删掉割点才会使图有不联通。对于每一个结点 $u$，我们看它会使那些结点不联通。考虑求割点的过程，如果一个相邻的点 $v$ 满足 $\text{low}(v) == \text{dfn}(u)$，那么删掉 $u$ 就切断了 $v$ 的子树，也就是 $v$ 的子树与上面不联通了。我们对于每个点维护它在 DFS 树上子树的大小，然后每次找到一组 $\text{low}(v) == \text{dfn}(u)$ 我们就将 $v$ 子树内部的点数乘上当前删掉 $u$ 后已经不和 $u$ 父亲联通的点数 $s$ 的值贡献到 $u$ 的答案中，然后再把 $s$ 加上 $v$ 的子树大小。最后，我们再把答案加上 $s$ 乘上 $n - s - 1$ 的值（表示 $u$ 下面的点和 $u$ 上面的点不联通的组数）即可。不要忘记这题求的是有序数对，所以答案要乘以 $2$；并且根结点是否是割点也是需要特判的。</p>
<p>时间复杂度 $O(n + m)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, tm, sz[maxn + <span class="number">3</span>], dfn[maxn + <span class="number">3</span>], low[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll ans[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> cut[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	G[u].push_back(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">bool</span> is_rt = <span class="literal">true</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfn[u] = low[u] = ++tm, sz[u] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>, sum = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!dfn[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			tarjan(v, <span class="literal">false</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			low[u] = min(low[u], low[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			sz[u] += sz[v], cnt++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (low[v] == dfn[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				ans[u] += <span class="number">1l</span>l * sum * sz[v];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				sum += sz[v]; </span></pre></td></tr><tr><td class="code"><pre><span class="line">				cut[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			low[u] = min(low[u], dfn[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (is_rt) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cut[u] = cnt &gt;= <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ans[u] += <span class="number">1l</span>l * sum * (n - sum - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (!cut[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans[u] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ans[u] = <span class="number">2</span> * (ans[u] + n - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		add(u, v), add(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	tarjan(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Tarjan</tag>
      </tags>
  </entry>
  <entry>
    <title>「HNOI 2012」矿场搭建（Tarjan）</title>
    <url>/2019/06/29/20190629-HNOI2012-Mine-Building/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.luogu.org/problemnew/show/P3225" target="_blank" rel="noopener">「HNOI 2012」矿场搭建（Luogu 3225）</a></p>
<p>给定一个 $n$ 个点 $m$ 条边的无向连通图，你要选择若干个关键点，使得在图中任意删除一个点后（可以删除任何点），图中剩余的点都可以到达某一个关键点。</p>
<p>数据范围：$n, m \le 10^6$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>根据割点的定义，发现只有删掉割点才会使某两个结点不联通。所以在一个点双连通分量内部，我们只需要任意选一个点即可。但是并不是所有的点双连通分量都需要选。我们考虑根据割点建一棵树，一个点双连通分量向与之相邻的割点连一条边。这样我们得到了一个割点和点双连通分量相间的树。发现只需要度数为 $1$ 的点双连通分量选上即可，因为树上删掉任意一个点，剩下的所有结点肯定可以跑到某个度数为 $1$ 的点；如果有一个度数为 $1$ 的点没选，那么我们只需删掉与它相邻的那个点即可让这个点无法走到一个关键点。于是我们使用 Tarjan 跑割点，然后将建好的树上度数为 $1$ 的点的 $\text{size}$ 相乘即可。时间复杂度 $O(n + m)$。</p>
<p>你交了上去，发现 WA 了。原因是有一个特殊情况：没有割点。这样你必须选两个点才可行，因为如果只选一个点而那个点被删除了，就不剩下任何关键点了。这样的方案数是 $\binom{n}{2}$。特判一下就可以通过此题了。</p>
<p>实现的时候我们其实不需要把树给建出来，我们只需要对于每一个结点 DFS 出去，找与它所在的联通块相邻的割点个数即可。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T, n, m, tm, dfn[maxn + <span class="number">3</span>], low[maxn + <span class="number">3</span>], cc, sz, vis[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> cut[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	G[u].push_back(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">bool</span> is_rt = <span class="literal">true</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfn[u] = low[u] = ++tm;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> son = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!dfn[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			tarjan(v, <span class="literal">false</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			low[u] = min(low[u], low[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (!is_rt &amp;&amp; low[v] == dfn[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				cut[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			son++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			low[u] = min(low[u], dfn[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (is_rt &amp;&amp; son &gt;= <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cut[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	vis[u] = tm;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sz++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (vis[v] != tm) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (cut[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				cc++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				vis[v] = tm;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				dfs(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m), m) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			G[i].clear(), vis[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dfn[i] = <span class="number">0</span>, cut[i] = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		n = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			n = max(n, u), n = max(n, v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			add(u, v), add(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tm = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tarjan(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tm = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> res = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ll ans = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (!cut[i] &amp;&amp; !vis[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				cc = <span class="number">0</span>, sz = <span class="number">0</span>, ++tm;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				dfs(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (cc == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					res++, ans *= sz;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"Case %d: "</span>, ++T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (res == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">printf</span>(<span class="string">"2 %lld\n"</span>, <span class="number">1l</span>l * n * (n - <span class="number">1</span>) / <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d %lld\n"</span>, res, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Tarjan</tag>
      </tags>
  </entry>
  <entry>
    <title>「学习笔记」Tarjan 算法总结</title>
    <url>/2019/06/29/20190629-Tarjan-Notes/</url>
    <content><![CDATA[<p>Tarjan 算法是由 Robert Tarjan 提出的，可以求解图中的强连通分量的算法。</p>
<h1 id="Tarjan-求强连通分量"><a href="#Tarjan-求强连通分量" class="headerlink" title="Tarjan 求强连通分量"></a>Tarjan 求强连通分量</h1><p>如果一个有向图是强连通图，那么它的任意一对结点都可以相互到达。一个有向图的某个极大的强连通子图称为强连通分量。不难发现所有强连通分量不会有重叠。</p>
<a id="more"></a>
<p>Tarjan 算法是用来求解图中强连通分量的算法。我们定义 $\text{dfn}(i)$ 表示 $i$ 点在 DFS 树上的 DFS 序，$\text{low}(i)$ 表示 $i$ 点向下走能够访问到的结点中 dfn 的最小值。</p>
<p>对于每一个结点 $u$，我们访问与它相邻的点 $v$。如果这个点没被访问过，那我们就访问这个点，并用 $\text{low}(v)$ 来更新 $\text{low}(u)$。如果这个点被访问过了，我们需要看它是否已经被算进某个强连通分量中。只有它没有被算进去，我们才可以用 $\text{dfn}(v)$ 来更新 $\text{low}(u)$。因为我们要判断某个点是否已经被算进某个强连通分量中，所以我们要维护一个 bool 类型的数组 in。当 $\text{dfn}(u) = \text{low}(u)$ 的时候，我们发现从 $u$ 出发不能访问到比 $u$ 更靠前的结点了，也就是产生了一个以 $u$ 为根的强连通分量。</p>
<p>在 DFS 的过程中，我们维护一个栈，每次 DFS 到一个结点，我们往栈中加入这个结点，并把这个结点的 in 设成 <code>true</code>。拓展完所有与该结点相邻的结点后，我们判断该结点是否为一个强连通分量的根。如果是的话，该强连通分量一定是栈顶开始的一个前缀。于是我们暴力弹栈，然后将元素的 in 设为 <code>false</code> 即可。</p>
<p>下面的代码对应的题目是<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2438" target="_blank" rel="noopener">「BZOJ 2438」杀人游戏</a>。<a href="/2019/06/30/20190630-BZOJ2438-Killing-Game/">这里</a>是本题的题解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>, maxm = <span class="number">3e5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, u[maxm + <span class="number">3</span>], v[maxm + <span class="number">3</span>], tm, dfn[maxn + <span class="number">3</span>], low[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> top, st[maxn + <span class="number">3</span>], cnt, sum[maxn + <span class="number">3</span>], bel[maxn + <span class="number">3</span>], deg[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> in[maxn + <span class="number">3</span>], ok[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	G[u].push_back(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfn[u] = low[u] = ++tm;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	st[++top] = u, in[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!dfn[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			tarjan(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			low[u] = min(low[u], low[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (in[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			low[u] = min(low[u], dfn[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (dfn[u] == low[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		++cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">do</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			sum[cnt]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			bel[st[top]] = cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			in[st[top]] = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">while</span> (st[top--] != u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u[i], &amp;v[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		add(u[i], v[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!dfn[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			tarjan(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		G[i].clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (bel[u[i]] != bel[v[i]]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			deg[bel[v[i]]]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			G[bel[u[i]]].push_back(bel[v[i]]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans += !deg[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!deg[i] &amp;&amp; sum[i] == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; G[i].size(); j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (deg[G[i][j]] == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					flag = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (flag) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				ans--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%.6lf\n"</span>, <span class="number">1.</span> * (n - ans) / n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="Tarjan-求割点"><a href="#Tarjan-求割点" class="headerlink" title="Tarjan 求割点"></a>Tarjan 求割点</h1><p>在一张无向图上，一个结点是割点，当且仅当删除掉这个结点以及与之相邻的所有边后，图变得不再联通。</p>
<p>Tarjan 算法可以推广到无向图上来求割点。我们进行 DFS，按照有向图上 Tarjan 的方法求出 dfn 数组和 low 数组。这里 low 数组的定义稍有改变，$\text{low}(i)$ 表示点 $i$ 不经过它的父亲结点，能够绕到的结点最小 dfn。为了方便起见，对于每条边 $(u, v)$，我们会将 $\text{low}(v) \leftarrow \min { \text{low}(v), \text{dfn}(u) }$。那么如果一个<strong>非根</strong>的结点 $u$ 是割点，那么一定存在 $\text{low(v)} = \text{dfn}(u)$。注意特判根结点是否是割点，如果是它在 DFS 树上就一定有大于等于 $2$ 个孩子。</p>
<p>注意我们在找到访问过的点的时候，它是一定在当前结点到根的路径上的，所以我们不需要维护 in 数组。并且因为我们最后会进行 $\text{low}(v) \leftarrow \min { \text{low}(v), \text{dfn}(u) }$ 的操作，那么我们在如果访问到了一个访问过的结点那么就不用特判它是否为原结点的父亲了，我们就可以直接来用 $\text{dfn}(v)$ 来更新 $\text{low}(u)$。</p>
<p>下面代码对应的题目是：<a href="https://www.luogu.org/problemnew/show/P3388" target="_blank" rel="noopener">「模版」割点（Luogu 3388）</a>。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>, maxm = maxn * <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, tm, dfn[maxn + <span class="number">3</span>], low[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> tot, ter[maxm + <span class="number">3</span>], nxt[maxm + <span class="number">3</span>], lnk[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> cut[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ter[++tot] = v, nxt[tot] = lnk[u], lnk[u] = tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">bool</span> is_rt = <span class="literal">true</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfn[u] = low[u] = ++tm;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = lnk[u], v; i; i = nxt[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = ter[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!dfn[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			tarjan(v, <span class="literal">false</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			low[u] = min(low[u], low[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (!is_rt &amp;&amp; low[v] == dfn[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				cut[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			cnt++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			low[u] = min(low[u], dfn[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (is_rt &amp;&amp; cnt &gt;= <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cut[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		add(u, v), add(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!dfn[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tarjan(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> res = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		res += cut[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (cut[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d%c"</span>, i, <span class="string">" \n"</span>[!--res]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></p>
<h1 id="Tarjan-求桥"><a href="#Tarjan-求桥" class="headerlink" title="Tarjan 求桥"></a>Tarjan 求桥</h1><p>桥是无向图上的某条边，满足删去这条边以后图变得不联通。</p>
<p>桥的求法和割点类似，我们有相同的 dfn 数组和 low 数组的定义。只是我们不再有 “为了方便起见” 对定义的略微修改。那么，如果一个结点到它的父亲的那条边是桥，那么有 $\text{dfn}(u) = \text{low}(u)$。和求割点类似，我们也不需要维护 in 数组。但是如果需要缩点的话我们还是需要维护一个栈。</p>
<p>求桥的难点在于处理重边。对于每一个结点，我们要记录到达每个结点的边的编号 $\text{id}(u)$。在找到一个访问过的结点的时候，我们就要判断到达该结点的边是否是 $\text{id}(u)$。如果不是的话，才使用 $\text{dfn}(v)$ 来更新 $\text{low}(u)$。</p>
<p>下面代码对应的题目是：<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1718" target="_blank" rel="noopener">「BZOJ 1718」Redundant Paths</a>。<a href="/2019/05/21/20190521-BZOJ1718-Redundant-Paths/">这里</a>是本题的题解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>, maxm = maxn * <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, u[maxm + <span class="number">3</span>], v[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> tm, dfn[maxn + <span class="number">3</span>], low[maxn + <span class="number">3</span>], top, st[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> cnt, bel[maxn + <span class="number">3</span>], deg[maxn + <span class="number">3</span>], cur;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> tot, ter[maxm + <span class="number">3</span>], nxt[maxm + <span class="number">3</span>], lnk[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ter[++tot] = v, nxt[tot] = lnk[u], lnk[u] = tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">adj</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> x &amp; <span class="number">1</span> ? x + <span class="number">1</span> : x - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> e = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dfn[u] = low[u] = ++tm;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    st[++top] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lnk[u], v; i; i = nxt[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        v = ter[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (!dfn[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            tarjan(v, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            low[u] = min(low[u], low[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i != adj(e)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            low[u] = min(low[u], dfn[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (dfn[u] == low[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        cnt++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">do</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            bel[st[top]] = cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">while</span> (st[top--] != u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (pa) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        cur -= (deg[u] == <span class="number">1</span>) + (deg[pa] == <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        deg[u]++, deg[pa]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        cur += (deg[u] == <span class="number">1</span>) + (deg[pa] == <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    vis[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lnk[u], v; i; i = nxt[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        v = ter[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (!vis[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            dfs(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u[i], &amp;v[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        add(u[i], v[i]), add(v[i], u[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (!dfn[i]) tarjan(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    tot = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        lnk[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="keyword">if</span> (bel[u[i]] != bel[v[i]]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        add(bel[u[i]], bel[v[i]]), add(bel[v[i]], bel[u[i]]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) <span class="keyword">if</span> (!vis[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        cur = <span class="number">0</span>, dfs(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ans += (cur + <span class="number">1</span>) / <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>Tarjan</tag>
      </tags>
  </entry>
  <entry>
    <title>「BZOJ 5056」OI 游戏（最短路 + 矩阵树定理）</title>
    <url>/2019/06/29/20190629-BZOJ5056-OI-Game/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5056" target="_blank" rel="noopener">「BZOJ 5056」OI 游戏</a></p>
<p>给定一个 $n$ 个结点 $m$ 条边的带权无向图，所有边权都是正数。问图中有多少生成树，满足 $1$ 号点到每个点的最短路都等于在树上它到那个结点的距离。</p>
<p>数据范围：$n \le 50, m \le 1225$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>我们发现这棵树一定是最短路 DAG 上的一棵生成树，于是我们建出最短路 DAG，再使用矩阵树定理求该 DAG 以 $1$ 为根的外向树个数即可。时间复杂度 $O(n^3)$。</p>
<p>然而这题的数据范围其实是可以出到 $n, m \le 10^6$ 的。我们发现最短路 DAG 有很好的性质。首先它一定是一个 DAG；其次，它入度为 $0$ 的点只有 $1$ 号结点。那么我们就可以给除了 $1$ 号点的每个点选一个父亲结点，然后把方案数相乘就可以得到答案。时间复杂度 $O(n \log n)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50</span>, inf = <span class="number">1e9</span> + <span class="number">1</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, a[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], f[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], deg[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%1d"</span>, &amp;a[i][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (i != j &amp;&amp; a[i][j] == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				a[i][j] = inf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			f[i][j] = a[i][j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				f[i][j] = min(f[i][j], f[i][k] + f[k][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (i != j &amp;&amp; f[<span class="number">1</span>][i] + a[i][j] == f[<span class="number">1</span>][j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				deg[j]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans = <span class="number">1l</span>l * ans * deg[i] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>最短路</tag>
        <tag>矩阵树定理</tag>
      </tags>
  </entry>
  <entry>
    <title>「Codeplus 2」白金元首与独舞（矩阵树定理）</title>
    <url>/2019/06/28/20190628-CP2-Hitler-and-Solo-Dance/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.luogu.org/problemnew/show/P4033" target="_blank" rel="noopener">「Codeplus 2」白金元首与独舞（Luogu 4033）</a></p>
<p>给定 $n \times m$ 的棋盘，每个格子上要么有一个指向上、下、左、或右的箭头，要么是空白的。现在你要在所有空白的格子中填入箭头，使得从图中任意一个格子出发，每次按照当前格子中箭头的方向走一步，都一定能走到棋盘的外面。问一共有多少种填法$\bmod 10^9 + 7$ 的结果。</p>
<p>数据范围：$n, m \le 200$，空格子的个数 $k \le 300$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>首先我们将棋盘外的空间视作一个虚点。发现如果一个填好的棋盘是合法的，那么我们将每个格子向它指向的格子连一条有向边（如果它指向棋盘外，那么就连向虚点）后，一定会形成一个以该虚点为根的内向树。于是这个问题就转化成了一个生成树计数的问题了。将每个格子向四周连四条边，其他格子照常连边，然后求建好的图以虚点为根的内向树个数即可。</p>
<p>这里简要讲解一下生成树计数的过程。对于一张无向图，我们构造矩阵 $K = D - A$，其中 $K$ 是基尔霍夫矩阵，$D$ 是度数矩阵，$A$ 是邻接矩阵。根据矩阵树定理，这张图的不同生成树个数等于其基尔霍夫矩阵 $K$ 的任意一个主余子式，其中主余子式表示去掉第 $i$ 行第 $i$ 列的余子式，即 $M_{i, i}$。对于一张有向图，如果要求的是外向树个数，那么度数矩阵中的度数就是入度；如果要求的是内向树个数，那么度数矩阵中的度数就是出度。之后，如果要求以 $x$ 为根的生成树个数，那么答案就是 $M_{x, x}$。</p>
<p>但是直接这么做点数是 $O(nm)$ 的，时间复杂度为 $O(n^3 m^3)$。我们考虑缩点，从每个点的相邻的格子开始一直走，知道碰到另外一个点或者走出棋盘。那么，我们从原来的点向走到的线连一条边，然后求生成树个数即可。这样点数就减少到了 $O(k)$，求生成树个数的部分的复杂度为 $O(k^3)$，但是之前建边的复杂度是 $O(k n m)$ 的，不够优秀。我们使用记忆化搜索，就把建边优化到了 $O(nm)$。这样总时间复杂度 $O(nm + k^3)$，可以通过本题。</p>
<p>听说还有个 $O(2^{\sqrt k})$ 的做法？太神仙了，我怎么可能会啊！</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200</span>, maxm = <span class="number">300</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, dy[] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T, n, m, cnt, a[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], id[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], A[maxm + <span class="number">3</span>][maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> kx[maxm + <span class="number">3</span>], ky[maxm + <span class="number">3</span>], vis[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], ter[maxm + <span class="number">3</span>][<span class="number">4</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> in[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> s[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> c = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="number">1l</span>l * a * a % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = <span class="number">1l</span>l * a * c % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> A[maxm + <span class="number">3</span>][maxm + <span class="number">3</span>], <span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, A[i][j], <span class="string">" \n"</span>[j == n]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> A[maxm + <span class="number">3</span>][maxm + <span class="number">3</span>], <span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> sgn = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (!A[i][i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> (A[j][i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    sgn = -sgn;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= n; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        swap(A[i][k], A[j][k]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    flag = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (!flag) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">int</span> x = <span class="number">1l</span>l * A[j][i] * qpow(A[i][i], mod - <span class="number">2</span>) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= n; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                A[j][k] = (A[j][k] - <span class="number">1l</span>l * A[i][k] * x) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                A[j][k] &lt; <span class="number">0</span> ? A[j][k] += mod : <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> ans = sgn &lt; <span class="number">0</span> ? sgn + mod : sgn;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ans = <span class="number">1l</span>l * ans * A[i][i] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">1</span> || x &gt; n || y &lt; <span class="number">1</span> || y &gt; m) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> cnt + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (a[x][y] == <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> id[x][y];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (vis[x][y]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> vis[x][y];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (in[x][y]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    in[x][y] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> t = a[x][y];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> vis[x][y] = dfs(x + dx[t], y + dy[t]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (T--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        cnt = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                s[j] == <span class="string">'U'</span> ? a[i][j] = <span class="number">0</span> :</span></pre></td></tr><tr><td class="code"><pre><span class="line">                s[j] == <span class="string">'D'</span> ? a[i][j] = <span class="number">1</span> :</span></pre></td></tr><tr><td class="code"><pre><span class="line">                s[j] == <span class="string">'L'</span> ? a[i][j] = <span class="number">2</span> :</span></pre></td></tr><tr><td class="code"><pre><span class="line">                s[j] == <span class="string">'R'</span> ? a[i][j] = <span class="number">3</span> :</span></pre></td></tr><tr><td class="code"><pre><span class="line">                a[i][j] = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> (a[i][j] == <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    id[i][j] = ++cnt, kx[cnt] = i, ky[cnt] = j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                in[i][j] = <span class="literal">false</span>, vis[i][j] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> (dfs(i, j) == <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    flag = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (flag) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (flag) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">puts</span>(<span class="string">"0"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ter[i][j] = dfs(kx[i] + dx[j], ky[i] + dy[j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                A[i][j] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> (i != ter[i][j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    A[i][i]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">if</span> (ter[i][j] != cnt + <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        A[i][ter[i][j]]--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> (A[i][j] &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    A[i][j] += mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solve(A, cnt));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>矩阵树定理</tag>
      </tags>
  </entry>
  <entry>
    <title>「AHOI / HNOI 2017」大佬（动态规划 + BFS）</title>
    <url>/2019/06/28/20190628-HNOI2018-Dalao/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.luogu.org/problemnew/show/P3724" target="_blank" rel="noopener">「AHOI / HNOI 2017」大佬（Luogu 3724）</a></p>
<p>有 $q$ 个大佬，你要和他们一一对决。对决分 $n$ 天，你的初始自信值为 $m$，大佬的初始自信值为 $C$。如果某一天你将大佬的自信值恰好减到 $0$，并且在这天之前你的自信值都不小于 $0$，那么你就获胜了。</p>
<p>一开始，你的等级 $L$ 为 $0$，讽刺能力 $F$ 为 $1$。在第 $i$ 天，大佬会将你的自信值减少 $a_i$，然后你可以进行下列操作中的一种：</p>
<a id="more"></a>
<ol>
<li>还一句嘴，使大佬的自信值减去 $1$。</li>
<li>做一天的水题，使自己的自信值 $+ w_i$。注意当前自信值修改后要对初始生命值取 $\min$。</li>
<li>使自己的等级 $L$ 增加 $1$。</li>
<li>使自己的讽刺能力 $F$ 乘上自己的等级 $L$。</li>
<li>怼大佬，使大佬的自信值减少 $F$。之后 $L, F$ 都回到初始值。这种操作只能进行不超过 $2$ 次。</li>
</ol>
<p>问对于每个大佬，你是否能够战胜他。</p>
<p>数据范围：$n, m \le 100, q \le 20, C \le 10^8$。</p>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>首先我们发现获胜的条件可以拆成：保证自己活着，并且在 $n$ 天内将大佬的自信值扣到 $0$。我们先做一个 DP 来看看我们最多可以花多少天来怼大佬。值得注意的是，我们不必需要用完所有的天数，所以我们在任何一天停止都是合法的。下面我们将 $n$ 变为求出的有效天数。</p>
<p>接下来我们考虑如何有效地怼大佬。我们一共可以怼他 $0, 1, 2$ 次。预先进行一次 BFS，求出所有的形如 $(F, D)$ 的有序数对，表示我们使用 $D$ 天可以将讽刺能力增加到 $F$。我们需要用 map 记录访问过的 $(L, F)$ 数对来避免重复访问。暴力 BFS 的规模太大，但是我们发现我们只需要 BFS 到第 $32$ 层即可退出。</p>
<p>之后，对于每一个大佬，我们容易处理出怼他 $0$ 或 $1$ 次是否会成功，接下来考虑怼他两次是否会成功。由于我们要求 $F_a + F_b \le C$，所以使用 two - pointers 的技巧，对于每个合法的对看 $D_a + D_b + C - F_a - F_b \le n$ 是否成立即可。这样，我们已经解决了这个问题。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>, maxm = <span class="number">1e7</span>, inf = <span class="number">1e8</span> + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, q, m, a[maxn + <span class="number">3</span>], w[maxn + <span class="number">3</span>], dp[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> M, c[<span class="number">25</span>], h, t, Qd[maxm + <span class="number">3</span>], Ql[maxm + <span class="number">3</span>], Qf[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">bool</span>&gt; vis;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> cnt, D[maxm + <span class="number">3</span>], F[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd_max</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	x &lt; y ? x = y : <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd_min</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	x &gt; y ? x = y : <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = a[i]; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dp[i][j - a[i]] = max(dp[i][j - a[i]], dp[i - <span class="number">1</span>][j] + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			upd_max(dp[i][min(m, j - a[i] + w[i])], dp[i - <span class="number">1</span>][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			upd_max(x, dp[i][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	n = x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	h = t = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	Qd[t] = <span class="number">1</span>, Ql[t] = <span class="number">0</span>, Qf[t] = <span class="number">1</span>, t++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (h &lt; t) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> d = Qd[h], l = Ql[h], f = Qf[h];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		h++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!mp.count(f)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mp[f] = d;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (d &gt;= n || d &gt;= <span class="number">35</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		Qd[t] = d + <span class="number">1</span>, Ql[t] = l + <span class="number">1</span>, Qf[t] = f, t++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		vis[make_pair(l + <span class="number">1</span>, f)] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (l &gt; <span class="number">1</span> &amp;&amp; <span class="number">1l</span>l * f * l &lt; inf &amp;&amp; !vis.count(make_pair(l, f * l))) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			Qd[t] = d + <span class="number">1</span>, Ql[t] = l, Qf[t] = f * l, t++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			vis[make_pair(l, f * l)] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;q, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		M = max(M, c[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	prework();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	solve();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it = mp.begin(); it != mp.end(); it++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		F[++cnt] = it -&gt; first, D[cnt] = it -&gt; second;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> c, _ = <span class="number">1</span>; _ &lt;= q; _++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		c = c[_];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">bool</span> flag = c &lt;= n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (F[i] &lt;= c &amp;&amp; D[i] + c - F[i] &lt;= n) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				flag = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> pos = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = cnt; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">while</span> (pos &lt;= cnt &amp;&amp; F[i] + F[pos] &lt;= c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (D[i] + D[pos] + c - F[i] - F[pos] &lt;= n) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					flag = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				pos++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (flag) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, flag);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>「BZOJ 4773」负环（倍增 + 最短路）</title>
    <url>/2019/06/27/20190627-BZOJ4773-Negative-Circle/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4773" target="_blank" rel="noopener">「BZOJ 4773」负环</a></p>
<p>给定一个 $n$ 个点 $m$ 条边的带权有向图，问图中最短的负环的长度。</p>
<p>数据范围：$n \le 300$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>令 $\text{dp}(k, i, j)$ 表示从 $i$ 走 $k$ 步到 $j$，经过的边权和的最小值。我们暴力地对它进行转移，$k$ 每次加一时我们都要使用一次类似矩阵乘法的操作（将乘号换成加号，将求和换成取 $\max$）。我们一直进行转移，直到存在 $\text{dp}(k, i, i) &lt; 0$ 时我们就找到了一个长度为 $k$ 的负环。时间复杂度 $O(n^4)$，不足以通过本题。</p>
<p>但是我们发现矩阵乘法是可以通过倍增的方法优化的。我们令 $\text{dp}(k, i, j)$ 表示从 $i$ 走 $2^k$ 步到 $j$，经过的边权和的最小值。这样我们就可以倍增地在 $O(n^3 \log n)$ 的时间内算出所有这样的矩阵。</p>
<p>在计算答案的时候，我们使用类似倍增找 LCA 的方法，按 $k$ 由大到小的顺序贪心地尝试乘上当前答案矩阵，再看结果矩阵是否有 $\text{dp}(i, i) &lt; 0$。如果没有，则这次尝试是成功的。最后输出一共乘上矩阵的次数 $+1$ 即可。时间复杂度 $O(n^3 \log n)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">300</span>, logn = <span class="number">8</span>, inf = <span class="number">1e9</span> + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, f[logn + <span class="number">3</span>][maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], g[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], t[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			f[<span class="number">0</span>][i][j] = g[i][j] = (i == j ? <span class="number">0</span> : inf);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u, &amp;v, &amp;w);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (w &lt; f[<span class="number">0</span>][u][v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			f[<span class="number">0</span>][u][v] = w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= logn; d++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				f[d][i][j] = inf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					f[d][i][j] = min(f[d][i][j], f[d - <span class="number">1</span>][i][k] + f[d - <span class="number">1</span>][k][j]); </span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">bool</span> ok = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> d = logn; ~d; d--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				t[i][j] = inf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					t[i][j] = min(t[i][j], g[i][k] + f[d][k][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (i == j &amp;&amp; t[i][j] &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					flag = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (flag) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!flag) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans += <span class="number">1</span> &lt;&lt; d;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					g[i][j] = t[i][j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ok = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ok ? ans + <span class="number">1</span> : <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>最短路</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title>「学习笔记」找出无向图中的三元环</title>
    <url>/2019/06/26/20190626-Finding-3-Membered-Rings/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给定一个 $n$ 个点 $m$ 条边的无向图，要求找到图中所有的三元环。</p>
<p>数据范围：$n \le 5 \times 10^4, m \le 2 \times 10^5$。</p>
<h1 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h1><p>一个 $m$ 条边的无向图中最多有 $O(m \sqrt m)$ 个三元环。本文介绍一种 $O(m \sqrt m)$ 求所有三元环的算法。</p>
<a id="more"></a>
<p>先考虑将所有无向边定向，使得所有边的起点度数不小于终点度数，且定向后的图形成一个 DAG。一种合法的定向方法是：对于一条边联结的两个结点，如果他们的度数不同，则只有一种定向方案；如果他们的度数相同，那么就从编号较小的点连向编号较大的点。容易发现构造出的方案是合法的。</p>
<p>我们发现，在一个 DAG 上的三元环一定是一个点向外连两条边，然后另一条边方向任意。也就是说对于三元环 $(u, v, w)$，一定可以重新排列结点，使得边 $(u, v), (u, w), (v, w)$ 存在，并且只有一种排列方式。</p>
<p>然后找三元环算法正式开始。对于每个结点 $u$，我们先将它可以一步走到的结点打上标记。然后，我们枚举 $u$ 可以一步走到的节点 $v$，再枚举 $v$ 可以一步走到的节点 $w$，最后看 $w$ 是否被 $u$ 标记过。如果标记过，则我们找到了一个三元环。由于上一段提到三元环的性质，不难发现这种算法不会重复，不会遗漏。</p>
<p>下面我们来证明该算法的复杂度。我们记每个点的入度为 $\text{in}(i)$，出度为 $\text{out}(i)$，度数为 $\text{deg}(i)$，那么有：$\sum_{u} \text{in}(u) = m, \sum_{u} \text{out}(u) = m, \sum_{u} \text{deg}(u) = 2m$。</p>
<p>该算法的枚举次数等于 $\sum_{u} \sum_{(u, v) \in E} \sum_{(v, w) \in E} 1$，如果我么枚举 $(u, v)$ 的话，它就等于 $\sum_{(u, v) \in E} \text{out}(v)$。</p>
<p>我们根据 $\text{out}(v)$ 分类讨论：</p>
<ul>
<li>如果 $\text{out}(v) \le \sqrt m$，那么 $\sum_{(u, v) \in E} [\text{out}(v) \le \sqrt m]\text{out}(v) \le \sum_{(u, v) \in E} \sqrt m = m \sqrt m$。</li>
<li>如果 $\text{out}(v) &gt; \sqrt m$，那么 $\text{deg}(u) \ge \text{deg}(v) \ge \text{out(v)} &gt; \sqrt m$。因为 $\sum_{u} \text{deg}(u) = 2m$，所以这样能一步到达 $v$ 的 $u$ 不会超过 $\sqrt m$ 个。同时因为 $\sum_{u} \text{out}(u) = m$，所以 $\sum_{(u, v) \in E} \text{out}(v) \le m \sqrt m$。</li>
</ul>
<p>所以算法的复杂度得到了保障。</p>
<p>另外我们注意到 $\sum_{(u, v) \in E} \text{out}(v) = \sum_{u} \text{in}(u) \times \text{out}(u) = \sum_{(u, v) \in E} \text{in}(u)$，所以我们将所有边反向后是不改变复杂度的。也就是说我们也可以从度数小的点向度数大的点连边，复杂度也是 $O(m \sqrt m)$ 的。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span>, maxm = <span class="number">2e5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, u[maxm + <span class="number">3</span>], v[maxm + <span class="number">3</span>], deg[maxn + <span class="number">3</span>], vis[maxn + <span class="number">3</span>], e[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> tot, ter[maxm + <span class="number">3</span>], nxt[maxm + <span class="number">3</span>], lnk[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ter[++tot] = v, nxt[tot] = lnk[u], lnk[u] = tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u[i], &amp;v[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		deg[u[i]]++, deg[v[i]]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (deg[u[i]] &lt; deg[v[i]] || (deg[u[i]] == deg[v[i]] &amp;&amp; u[i] &gt; v[i])) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			swap(u[i], v[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		add(u[i], v[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = lnk[i]; j; j = nxt[j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			vis[ter[j]] = i, e[ter[j]] = j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = lnk[i], u; j; j = nxt[j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = lnk[u = ter[j]], v; k; k = nxt[k]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="built_in">printf</span>(<span class="string">"3 Membered Ring #%d: (%d %d %d)\n"</span>, ++cnt, j, k, e[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"Number of 3 Membered Rings: %d\n"</span>, cnt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>「NOI 2017」游戏（Tarjan）</title>
    <url>/2019/06/26/20190626-NOI2017-Game/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="http://uoj.ac/problem/317" target="_blank" rel="noopener">「NOI 2017」游戏（UOJ 317）</a></p>
<p>有一个长度为 $n$ 的字符串 $S$（包含 <code>a</code>，<code>b</code>，<code>c</code>，<code>x</code>）和 $m$ 组限制关系，要求构造一个只包含 <code>A</code>，<code>B</code>，<code>C</code> 的字符串 $T$，满足 $S_i \neq \text{lowercase}(T_i)$ 以及所有的限制关系。一组限制形如：如果 $T_{u_j} = a_j$，则 $T_{v_j} = b_j$。</p>
<p>数据范围：$n \le 5 \times 10^4, m \le 10^5$，<code>x</code> 的个数 $d$ 不会超过 $8$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>首先考虑没有 <code>x</code> 怎么做。发现每个位置最多只能取两种字符，还有一些额外的限制。容易想到 2 - SAT 模型。具体地，我们对于每个位置能取的字符建两个点，然后连边时需要分类讨论：</p>
<ul>
<li>如果 $u_j$ 不可能取 $a_j$，则这组限制无效。</li>
<li>如果 $u_j$ 可能取 $a_j$ 且 $v_j$ 不可能取 $b_j$，则 $u_j$ 不能够取 $a_j$。连边 $(u_j, a_j) \rightarrow (u_j, a’_j)$。</li>
<li>如果 $u_j$ 可能取 $a_j$ 且 $v_j$ 可能取 $b_j$，则连边 $(u_j, a_j) \rightarrow (v_j, b’_j)$，$(v_j, b_j) \rightarrow (u_j, a’_j)$。注意 2 - SAT 大部分情况下是一个<strong>对称的结构</strong>，很多限制都是<strong>要连对称的边</strong>的，原因是若一个命题成立那么它的逆否命题也是成立的。</li>
</ul>
<p>接下来，我们跑 2 - SAT 算法即可。注意 2 - SAT 输出方案时要<strong>取两个结点所在 SCC 标号较小的那个</strong>。</p>
<p>这样，我们已经可以获得 $45$ 分的好成绩。</p>
<p>接下来考虑加入 <code>x</code>。发现 <code>x</code> 的数量很小，我们可以枚举该位置是什么字符。这样的时间复杂度是 $O(3^d \times (n + m))$ 的，不能通过本题。</p>
<p>但是我们可以将它转化成没有 <code>x</code> 的情况。每次枚举 $S_i$ 是 <code>a</code> 还是 <code>b</code> 即可覆盖所有的情况。这样的时间复杂度是 $O(2^d \times (n + m))$ 的，可以通过本题的的数据，但是因为常数大会在 <code>UOJ</code> 上被卡成 $97$ 分。</p>
<p>考虑随机 $S_i$ 是 <code>a</code>，<code>b</code> 还是 <code>c</code>。假设只有一种合法的解，那么每次猜中的概率是 $\left( \frac{2}{3} \right)^8 \approx 0.03901844231$，那么猜 $100$ 次猜错的概率是 $(1 - 0.03901844231) ^ {100} \approx 0.018685525458$，那么在 $20$ 个测试点的题目中全对的概率就是 $(1 - 0.018685525458) ^ {20} \approx 0.6857472838 \approx 68.57 \%$，脸白就可以过了。时间复杂度 $O(100 \times (n + m))$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>第一次 AC 就是 UOJ 最短代码耶！</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>, maxm = <span class="number">2e5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, d, m, u[maxm + <span class="number">3</span>], v[maxm + <span class="number">3</span>], p[maxn + <span class="number">3</span>], id[maxn + <span class="number">3</span>][<span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> tm, dfn[maxn + <span class="number">3</span>], low[maxn + <span class="number">3</span>], top, st[maxn + <span class="number">3</span>], cnt, bel[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> s[maxn + <span class="number">3</span>], a[maxm + <span class="number">3</span>], b[maxm + <span class="number">3</span>], t[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> in[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfn[u] = low[u] = ++tm;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	st[++top] = u, in[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!dfn[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			tarjan(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			low[u] = min(low[u], low[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (in[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			low[u] = min(low[u], dfn[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (dfn[u] == low[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		++cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">do</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			bel[st[top]] = cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			in[st[top]] = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">while</span> (st[top--] != u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			id[i][(s[i] - <span class="string">'a'</span> + j) % <span class="number">3</span>] = j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		G[i].clear(), dfn[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x = id[u[i]][a[i] - <span class="string">'A'</span>], y = id[v[i]][b[i] - <span class="string">'A'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (x &amp;&amp; !y) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			G[u[i] + (x - <span class="number">1</span>) * n].push_back(u[i] + (<span class="number">2</span> - x) * n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			G[u[i] + (x - <span class="number">1</span>) * n].push_back(v[i] + (y - <span class="number">1</span>) * n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			G[v[i] + (<span class="number">2</span> - y) * n].push_back(u[i] + (<span class="number">2</span> - x) * n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	tm = cnt = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!dfn[i]) tarjan(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (bel[i] == bel[i + n]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (bel[i] &lt; bel[i + n]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			t[i] = (s[i] - <span class="string">'a'</span> + <span class="number">1</span>) % <span class="number">3</span> + <span class="string">'A'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			t[i] = (s[i] - <span class="string">'a'</span> + <span class="number">2</span>) % <span class="number">3</span> + <span class="string">'A'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	srand(<span class="number">19260817</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %*d %s %d"</span>, &amp;n, s + <span class="number">1</span>, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %c %d %c"</span>, &amp;u[i], &amp;a[i], &amp;v[i], &amp;b[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (s[i] == <span class="string">'x'</span>) p[++d] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">100</span>; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= d; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			s[p[i]] = rand() % <span class="number">3</span> + <span class="string">'a'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (solve()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, t + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>另外，附赠一个 checker！</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>, maxm = <span class="number">2e5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, u[maxm + <span class="number">3</span>], v[maxm + <span class="number">3</span>], p[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> s[maxn + <span class="number">3</span>], a[maxm + <span class="number">3</span>], b[maxm + <span class="number">3</span>], t[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">// freopen("game.in", "r", stdin);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %*d %s %d"</span>, &amp;n, s + <span class="number">1</span>, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %c %d %c"</span>, &amp;u[i], &amp;a[i], &amp;v[i], &amp;b[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">// freopen("game.out", "r", stdin);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>, t + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (s[i] - t[i] == <span class="string">'a'</span> - <span class="string">'A'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">printf</span>(<span class="string">"error: car unavailable in round #%d\n"</span>, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (t[u[i]] == a[i] &amp;&amp; t[v[i]] != b[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">printf</span>(<span class="string">"error: not satisfy limit #%d\n"</span>, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">puts</span>(<span class="string">"correct!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Tarjan</tag>
      </tags>
  </entry>
  <entry>
    <title>「BZOJ 4699」树上的最短路（最短路 + 树链剖分 + 线段树）</title>
    <url>/2019/06/26/20190626-BZOJ4699-Shortest-Path/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4699" target="_blank" rel="noopener">「BZOJ 4699」树上的最短路</a></p>
<p>给定一棵 $n$ 个结点的树，第 $i$ 条边的长度为 $l_i$。还要额外地联结 $m$ 次边，第 $j$ 次对于任意 $u$ 在树上路径 $(a_j, b_j)$ 上，$v$ 在树上路径 $(c_j, d_j)$ 上，都从 $u$ 向 $v$ 连一条长度为 $e_j$ 的边。问每个点走到 $k$ 点的最短路。</p>
<p>数据范围：$n \le 2.5 \times 10^5, m \le 10^5$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>I like this problem :)</p>
<p>显然树上的边不是复杂度瓶颈。下面我们讨论额外加的边。</p>
<p>暴力建边会有 $O(m \times n^2)$ 条，不可取。由于每次连的边长度相同，我们可以让所有起点向一个点连长度为 $0$ 的边，然后从这个点向另一个点连长度为 $e$ 的边，最后从那个点向所有终点连长度为 $0$ 的边。这样我们就将边数减少到了 $O(m \times n)$。</p>
<p>发现边的端点肯定在树上形成连续的一段，容易让我们想到线段树优化建图。不过这题将序列问题放到了树上，我们考虑树链剖分。因为两点之间在树上只会经过 $O(\log n)$ 条重链，我们考虑对于每一条重链建一棵线段树，然后找出对应的一些区间并连边。这样建出的图的边数是 $O(n \log^2 n)$（将 $n, m$ 算作同阶），再套上 Dijkstra 求最短路后的复杂度是 $O(n \log^3 n)$，不足以通过本题。</p>
<p>考虑树链剖分找 LCA 的过程。每次我们将所在链顶端深度较大的点移到链顶端的父亲结点，直到两个结点到达同一条链上。发现每次将某个结点上移的时候，它经过的总是一条重链的前缀。只有在最后一次，两个结点移动到同一条重链上的时候，它们对应的路径才有可能不是某条重链的前缀。于是，对于那 $O(\log n)$ 个前缀，我们使用前缀优化建边，而对于那一个区间，我们使用线段树优化建边。这样建出的图的边数是 $O(n \log n)$，再套上 Dijkstra 求最短路后的复杂度是 $O(n \log^2 n)$，可以通过本题。</p>
<p>值得注意的是，前缀优化建边的方法不是十分显然。我们用 “向外连一个前缀的边” 来举例。对于每一个点，我们拆出一个虚点，原点向虚点连长度为 $0$ 的边，然后每个虚点向下一个虚点连长度为 $0$ 的边。这样在前缀对应的最后一个点向外连边就等价于在原图上对于前缀上的所有点连出一条边了。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2.5e5</span>, maxm = <span class="number">1e5</span>, maxv = <span class="number">5</span> * maxn + <span class="number">2</span> * maxm, maxe = maxm * (<span class="number">1</span> + <span class="number">18</span> + <span class="number">18</span> * <span class="number">4</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, k, a[maxm + <span class="number">3</span>], b[maxm + <span class="number">3</span>], c[maxm + <span class="number">3</span>], d[maxm + <span class="number">3</span>], e[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sz[maxn + <span class="number">3</span>], fa[maxn + <span class="number">3</span>], dep[maxn + <span class="number">3</span>], son[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> tm, dfn[maxn + <span class="number">3</span>], pnt[maxn + <span class="number">3</span>], l[maxn + <span class="number">3</span>], r[maxn + <span class="number">3</span>], top[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> vir[maxn + <span class="number">3</span>], ch[maxv + <span class="number">3</span>][<span class="number">2</span>], rt[maxn + <span class="number">3</span>], f[maxm + <span class="number">3</span>], g[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> cnt, tot, ter[maxe + <span class="number">3</span>], wei[maxe + <span class="number">3</span>], nxt[maxe + <span class="number">3</span>], lnk[maxv + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">priority_queue&lt;pair&lt;ll, <span class="keyword">int</span>&gt;, <span class="built_in">vector</span>&lt;pair&lt;ll, <span class="keyword">int</span>&gt; &gt;, greater&lt;pair&lt;ll, <span class="keyword">int</span>&gt; &gt; &gt; H;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxv + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll dist[maxv + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ter[++tot] = v, wei[tot] = w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	nxt[tot] = lnk[u], lnk[u] = tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">bool</span> flag)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	flag ? add(u, v, w) : add(v, u, w);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sz[u] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = lnk[u], v; i; i = nxt[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> ((v = ter[i]) == pa) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dep[v] = dep[u] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		fa[v] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs1(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		sz[u] += sz[v];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (sz[v] &gt; sz[son[u]]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			son[u] = v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfn[u] = ++tm, pnt[tm] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	r[top[u]] = tm;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (u == top[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		l[u] = tm;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (son[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		top[son[u]] = top[u];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs2(son[u], u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = lnk[u], v; i; i = nxt[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> ((v = ter[i]) == pa || v == son[u]) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		top[v] = v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs2(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prefix</span><span class="params">(<span class="keyword">bool</span> flag)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		vir[i] = ++cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		add(i, vir[i], <span class="number">0</span>, flag);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (l[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = l[i]; j &lt; r[i]; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			add(vir[pnt[j]], vir[pnt[j + <span class="number">1</span>]], <span class="number">0</span>, flag);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">bool</span> flag)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l == r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> pnt[l];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> u = ++cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ch[u][<span class="number">0</span>] = build(l, mid, flag);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ch[u][<span class="number">1</span>] = build(mid + <span class="number">1</span>, r, flag);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	add(ch[u][<span class="number">0</span>], u, <span class="number">0</span>, flag);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	add(ch[u][<span class="number">1</span>], u, <span class="number">0</span>, flag);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">segment</span><span class="params">(<span class="keyword">bool</span> flag)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (l[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		rt[i] = build(l[i], r[i], flag);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> lx, <span class="keyword">int</span> rx, <span class="keyword">int</span> y, <span class="keyword">bool</span> flag)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l &gt;= lx &amp;&amp; r &lt;= rx) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		add(u, y, <span class="number">0</span>, flag);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (lx &lt;= mid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		query(ch[u][<span class="number">0</span>], l, mid, lx, rx, y, flag);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (rx &gt; mid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		query(ch[u][<span class="number">1</span>], mid + <span class="number">1</span>, r, lx, rx, y, flag);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">bool</span> flag)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> c = ++cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (top[a] != top[b]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dep[top[a]] &lt; dep[top[b]] ? swap(a, b) : <span class="keyword">void</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		add(vir[a], c, <span class="number">0</span>, flag);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a = fa[top[a]];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dep[a] &gt; dep[b] ? swap(a, b) : <span class="keyword">void</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	query(rt[top[a]], l[top[a]], r[top[a]], dfn[a], dfn[b], c, flag);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>最短路</tag>
        <tag>线段树</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title>「学习笔记」欧拉回路算法</title>
    <url>/2019/06/26/20190626-Euler-Tour-Algorithm/</url>
    <content><![CDATA[<h1 id="欧拉回路、欧拉图及其判定"><a href="#欧拉回路、欧拉图及其判定" class="headerlink" title="欧拉回路、欧拉图及其判定"></a>欧拉回路、欧拉图及其判定</h1><p>在一张图上，一条从某个点出发，经过所有的边后回到原点的路径叫做欧拉回路。有欧拉回路的图叫做欧拉图。</p>
<p>容易发现，欧拉图一定是联通图。它还需要满足以下条件：</p>
<ul>
<li>如果是无向图，那么每个结点的度数都是偶数。</li>
<li>如果是有向图，那么每个结点的入度和出度相等。</li>
</ul>
<p>不难理解这是判断欧拉图的充要条件。</p>
<a id="more"></a>
<h1 id="欧拉回路算法详解"><a href="#欧拉回路算法详解" class="headerlink" title="欧拉回路算法详解"></a>欧拉回路算法详解</h1><p>我们先判断图是否是欧拉图，然后通过 DFS 的方法来找欧拉回路。</p>
<p>DFS 一个点的时候，我们每次找到一条没有使用过的边，然后先 DFS 那个点，再将这条边加入答案栈中。最后将栈中的元素倒序输出即可。</p>
<p>为了优化复杂度，我们使用当前弧优化，不难证明时间复杂度为 $O(n + m)$。</p>
<p>模版提交地址：<a href="http://uoj.ac/problem/117" target="_blank" rel="noopener">「UOJ 117」欧拉回路</a>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>, maxm = <span class="number">4e5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> type, n, m, deg[maxn + <span class="number">3</span>], top, st[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> tot, ter[maxm + <span class="number">3</span>], id[maxm + <span class="number">3</span>], nxt[maxm + <span class="number">3</span>], lnk[maxn + <span class="number">3</span>], cur[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ter[++tot] = v, id[tot] = w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	nxt[tot] = lnk[u], lnk[u] = tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> &amp;i = cur[u], x; i; i = nxt[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!vis[<span class="built_in">abs</span>(x = id[i])]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			vis[<span class="built_in">abs</span>(x)] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dfs(ter[i]), st[++top] = x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;type, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	type--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		add(u, v, i), type ? <span class="keyword">void</span>() : add(v, u, -i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		deg[u]++, deg[v] += type ? <span class="number">-1</span> : <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		type ? flag &amp;= !deg[i] : flag &amp;= ~deg[i] &amp; <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (!flag) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>), <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cur[i] = lnk[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs(ter[<span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (top != m) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (top) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d%c"</span>, st[top], <span class="string">" \n"</span>[top == <span class="number">1</span>]), top--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="欧拉回路算法的应用"><a href="#欧拉回路算法的应用" class="headerlink" title="欧拉回路算法的应用"></a>欧拉回路算法的应用</h1><h2 id="「BZOJ-3033」太鼓达人"><a href="#「BZOJ-3033」太鼓达人" class="headerlink" title="「BZOJ 3033」太鼓达人"></a>「BZOJ 3033」太鼓达人</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3033" target="_blank" rel="noopener">「BZOJ 3033」太鼓达人</a></p>
<p>给定 $n$，要求输出一个长度为 $2^n$ 的，每个位置为 $0, 1$ 的环，使得环上所有连续 $n$ 位组成的二进制数互不相同。如果有多解，输出字典序最小的。</p>
<p>数据范围：$n \le 11$。</p>
<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>其实这题 $n \le 20$ 也是能做的。</p>
<p>其实这题还可以贪心，但是这里就不讲解了。</p>
<p>考虑将每个长度为 $n$ 的二进制数看作一条边，它连接的两个点分别是它去掉最后一位和它去掉第一位后长度为 $n - 1$ 的二进制数。然后我们在这个点数为 $2^{n - 1}$，边数为 $2^n$ 的图上跑欧拉回路即可。</p>
<p>注意到这题要求字典序最小的方案。于是我们注意加边顺序即可。时间复杂度 $O(2^n)$。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">11</span>, maxm = <span class="number">1</span> &lt;&lt; maxn;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, tot, ter[maxm + <span class="number">3</span>], wei[maxm + <span class="number">3</span>], nxt[maxm + <span class="number">3</span>], lnk[maxm + <span class="number">3</span>], cur[maxm + <span class="number">3</span>], top, st[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ter[++tot] = v, wei[tot] = w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	nxt[tot] = lnk[u], lnk[u] = tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> &amp;i = cur[u], x; i; i = nxt[i]) <span class="keyword">if</span> (!vis[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		vis[i] = <span class="literal">true</span>, x = wei[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(ter[i]), st[++top] = x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d "</span>, <span class="number">1</span> &lt;&lt; n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"01"</span>), <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; ~i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> msk = <span class="number">0</span>; msk &lt; <span class="number">1</span> &lt;&lt; (n - <span class="number">1</span>); msk++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			add(msk + <span class="number">1</span>, ((msk * <span class="number">2</span> + i) &amp; ((<span class="number">1</span> &lt;&lt; (n - <span class="number">1</span>)) - <span class="number">1</span>)) + <span class="number">1</span>, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1</span> &lt;&lt; (n - <span class="number">1</span>); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cur[i] = lnk[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs((<span class="number">1</span> &lt;&lt; (n - <span class="number">1</span>)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (top) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">putchar</span>(st[top--] + <span class="string">'0'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">puts</span>(<span class="string">""</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h2 id="「POI-2010」Bridges（BZOJ-2095）"><a href="#「POI-2010」Bridges（BZOJ-2095）" class="headerlink" title="「POI 2010」Bridges（BZOJ 2095）"></a>「POI 2010」Bridges（BZOJ 2095）</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2095" target="_blank" rel="noopener">「POI 2010」Bridges（BZOJ 2095）</a></p>
<p>待更 ……</p>
]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>欧拉回路</tag>
      </tags>
  </entry>
  <entry>
    <title>「学习笔记」朱 - 刘算法求解最小树形图</title>
    <url>/2019/06/25/20190625-Chu-Liu-Algorithm/</url>
    <content><![CDATA[<h1 id="什么是最小树形图"><a href="#什么是最小树形图" class="headerlink" title="什么是最小树形图"></a>什么是最小树形图</h1><p>无向图上有最小生成树，那么有向图上呢？有向图上的最小生成树称为 “最小树形图”，英文叫 Directed Minimum Spanning Tree。</p>
<p>如果把一个树形图的有向边替换成无向边，它会变成一棵生成树。但与生成树不同的是，树形图中会确定一个根，它必须满足根能够到达每个结点。最小树形图是所有树形图中边权和最小的一个。</p>
<a id="more"></a>
<h1 id="朱-刘算法简介"><a href="#朱-刘算法简介" class="headerlink" title="朱 - 刘算法简介"></a>朱 - 刘算法简介</h1><p>一般来讲在图中求最小树形图时会确定一个根结点。有一个时间复杂度为 $O(nm)$ 的算法可以解决这个问题：朱 - 刘算法（英文 Chu - Liu Algorithm），是两个中国人一起发明的算法。</p>
<p>朱 - 刘算法的基本思想是每次贪心地选出每个点最小的父亲，得出的图如果不是树形图，那么将选出的环进行缩点，对边权进行修改，然后迭代这个过程，直到图变为最小树形图为止。</p>
<h1 id="朱-刘算法模版"><a href="#朱-刘算法模版" class="headerlink" title="朱 - 刘算法模版"></a>朱 - 刘算法模版</h1><p>建议看一下<a href="https://www.luogu.org/problemnew/show/P4716" target="_blank" rel="noopener">「模板」最小树形图（Luogu 4716）
</a>这题的题解，里面有确定根结点的最小树形图详细的讲解。注意大部分题解的时间复杂度都是 $O(n^3)$ 而不是 $O(nm)$ 的，问题出在它们找环的过程不能保证复杂度。如果不会找环的话可以看看<a href="https://www.luogu.org/problemnew/show/P2661" target="_blank" rel="noopener">「NOIP 2015」信息传递（Luogu 2661）</a>这题，题解中的复杂度都是正确的。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>, maxm = <span class="number">1e4</span>, inf = <span class="number">1e9</span> + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, rt, mn[maxn + <span class="number">3</span>], fa[maxn + <span class="number">3</span>], bel[maxn + <span class="number">3</span>], id[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> u, v, w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; e[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">chu_liu</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mn[i] = inf, fa[i] = <span class="number">0</span>, bel[i] = <span class="number">0</span>, id[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="keyword">if</span> (e[i].u != e[i].v) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (e[i].w &lt; mn[e[i].v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				mn[e[i].v] = e[i].w, fa[e[i].v] = e[i].u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (i != rt &amp;&amp; !fa[i]) <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> cnt = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (i != rt) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans += mn[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> x = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">while</span> (!bel[x] &amp;&amp; x != rt) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				bel[x] = i, x = fa[x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (bel[x] == i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				++cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">do</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					id[x] = cnt, x = fa[x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125; <span class="keyword">while</span> (!id[x]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!cnt) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (!id[i]) id[i] = ++cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> u = e[i].u, v = e[i].v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			e[i].u = id[u], e[i].v = id[v];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (id[u] != id[v]) e[i].w -= mn[v];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		rt = id[rt];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		n = cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;rt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;e[i].u, &amp;e[i].v, &amp;e[i].w);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, chu_liu());</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="朱-刘算法的应用"><a href="#朱-刘算法的应用" class="headerlink" title="朱 - 刘算法的应用"></a>朱 - 刘算法的应用</h1><h2 id="不确定根的最小树形图"><a href="#不确定根的最小树形图" class="headerlink" title="不确定根的最小树形图"></a>不确定根的最小树形图</h2><p>这次我们不规定树形图的根，要求最小树形图。</p>
<p>容易发现我们建立一个超级源点，然后向每一个结点连长度为 $\inf$ 的边，最后算出答案后减去 $\inf$ 即可。发现为了使答案更优，最多只会从超级源点连出一条边，从而保证了去掉超级源点后的根是唯一的。</p>
<p>时间复杂度 $O(nm)$。</p>
<h2 id="「BZOJ-4349」最小树形图"><a href="#「BZOJ-4349」最小树形图" class="headerlink" title="「BZOJ 4349」最小树形图"></a>「BZOJ 4349」最小树形图</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4349" target="_blank" rel="noopener">「BZOJ 4349」最小树形图</a></p>
<p>有 $n$ 个堡垒，第 $i$ 个堡垒的防御力是 $A_i$，一共要打 $B_i$ 次。有 $m$ 组关系，每组形如 “打了 $x$ 号堡垒以后 $y$ 号堡垒的防御力都会降低为 $z$”，问打完所有堡垒的最小代价。</p>
<p>数据范围：$n \le 50$。</p>
<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>容易发现最优策略是所有堡垒打完一遍再慢慢打剩下的，现在问题变成了决定第一次打堡垒的顺序。建立超级源点，向每个堡垒连权值为 $A_i$ 的边。对于每一条关系，从 $x$ 号堡垒向 $y$ 号堡垒连权值为 $z$ 的边即可。根据建图方式容易证明算法正确性。</p>
<p>时间复杂度 $O(nm)$。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">60</span>, maxm = <span class="number">3e3</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> db inf = <span class="number">1e9</span> + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, rt, B[maxn + <span class="number">3</span>], fa[maxn + <span class="number">3</span>], bel[maxn + <span class="number">3</span>], id[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">db A[maxn + <span class="number">3</span>], C[maxn + <span class="number">3</span>], mn[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> u, v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	db w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; e[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">db <span class="title">chu_liu</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	db ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mn[i] = inf, fa[i] = <span class="number">0</span>, bel[i] = <span class="number">0</span>, id[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="keyword">if</span> (e[i].u != e[i].v) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (e[i].w &lt; mn[e[i].v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				mn[e[i].v] = e[i].w, fa[e[i].v] = e[i].u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> cnt = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (i != rt) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans += mn[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> x = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">while</span> (!bel[x] &amp;&amp; x != rt) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				bel[x] = i, x = fa[x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (bel[x] == i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				++cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">do</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					id[x] = cnt, x = fa[x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125; <span class="keyword">while</span> (!id[x]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!cnt) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (!id[i]) id[i] = ++cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> u = e[i].u, v = e[i].v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			e[i].u = id[u], e[i].v = id[v];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (id[u] != id[v]) e[i].w -= mn[v];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		rt = id[rt];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		n = cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lf %d"</span>, &amp;A[i], &amp;B[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		C[i] = A[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %lf"</span>, &amp;e[i].u, &amp;e[i].v, &amp;e[i].w);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		C[e[i].v] = min(C[e[i].v], e[i].w);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	db ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans += C[i] * (B[i] - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		e[++m].u = n + <span class="number">1</span>, e[m].v = i, e[m].w = A[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	rt = ++n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ans += chu_liu();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h2 id="「SCOI-2012」滑雪"><a href="#「SCOI-2012」滑雪" class="headerlink" title="「SCOI 2012」滑雪"></a>「SCOI 2012」滑雪</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p><a href="https://www.luogu.org/problemnew/show/P2573" target="_blank" rel="noopener">「SCOI 2012」滑雪（Luogu 2573）</a></p>
<p>给定 $n$ 个地点 $m$ 条边，每个地点有高度，每条边有通过时间，且起点高度大于等于终点高度。问这个图以 $1$ 为根的最小树形图。</p>
<p>数据范围：$n \le 10^5, m \le 10^6$。</p>
<h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><p>朴素算法不能通过，考虑利用这题的性质。</p>
<p>我们先搜出能够到达的所有点，再将边以终点高度为第一关键字，边权为第二关键字排序后，跑 Kruskal 即可。</p>
<p>时间复杂度 $O(m \log m)$。</p>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>, maxm = <span class="number">2e6</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, k, cnt, h[maxn + <span class="number">3</span>], tot, ter[maxm + <span class="number">3</span>], wei[maxm + <span class="number">3</span>], nxt[maxm + <span class="number">3</span>], lnk[maxn + <span class="number">3</span>], fa[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> u, v, w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> edge &amp;a, <span class="keyword">const</span> edge &amp;b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> h[a.v] == h[b.v] ? a.w &lt; b.w : h[a.v] &gt; h[b.v];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; e[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ter[++tot] = v, wei[tot] = w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	nxt[tot] = lnk[u], lnk[u] = tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	vis[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	cnt++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = lnk[u], v, w; i; i = nxt[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = ter[i], w = wei[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		e[++k].u = u, e[k].v = v, e[k].w = w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!vis[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dfs(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> fa[x] == x ? x : fa[x] = find(fa[x]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;h[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u, &amp;v, &amp;w);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (h[u] &gt;= h[v]) add(u, v, w);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (h[v] &gt;= h[u]) add(v, u, w);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sort(e + <span class="number">1</span>, e + k + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		fa[i] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> u = find(e[i].u), v = find(e[i].v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (u == v) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		fa[u] = v, ans += e[i].w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d %lld\n"</span>, cnt, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>「十二省联考 2019」春节十二响（贪心）</title>
    <url>/2019/06/24/20190624-SHOI2019-Firecrackers/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.luogu.org/problemnew/show/P5290" target="_blank" rel="noopener">「十二省联考 2019」春节十二响（Luogu 5290）</a></p>
<p>给定一棵 $n$ 个结点的树，每个结点有权值 $M_i$。要求将树上的节点分组，每组的结点中的任意两个不是祖先 - 后代关系。一组的代价为包含的节点的权值的最大值，一个方案的代价是每组的代价之和，求最小代价。</p>
<p>数据范围：$n \le 2 \times 10^5$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>非常巧妙的一道题。</p>
<p>首先考虑一条链，答案就是两个支链权值分别从大到小排序然后对应位置取最大值加起来。</p>
<p>链的部分分可以提示正解就是一个合并的过程。对于每个点维护一个大根堆，每次将儿子一一合并到自己上面，合并的方式是对应位置取最大值。合并完所有儿子后将自己的权值加入堆中就行了。</p>
<p>注意到暴力合并复杂度不能接受，只能启发式合并。因为每合并一次元素会减少一个，所以总共合并 $n$ 次，再加上堆的复杂度，总时间复杂度 $O(n \log n)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>代码虽短，实现还是需要一些技巧的。具体见代码。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, a[maxn + <span class="number">3</span>], f[maxn + <span class="number">3</span>], id[maxn + <span class="number">3</span>], k, t[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt; H[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;f[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">1</span>; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!id[i]) id[i] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		H[id[i]].push(a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!id[f[i]]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			id[f[i]] = id[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (H[id[f[i]]].size() &lt; H[id[i]].size()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			swap(id[i], id[f[i]]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (H[id[i]].size()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			t[++k] = max(H[id[i]].top(), H[id[f[i]]].top());</span></pre></td></tr><tr><td class="code"><pre><span class="line">			H[id[i]].pop(), H[id[f[i]]].pop();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">do</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			H[id[f[i]]].push(t[k]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">while</span> (--k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> ans = a[<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (H[id[<span class="number">1</span>]].size()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans += H[id[<span class="number">1</span>]].top(), H[id[<span class="number">1</span>]].pop();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>「十二省联考 2019」字符串问题（后缀数组 + 线段树）</title>
    <url>/2019/06/24/20190624-SHOI2019-String-Problem/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.luogu.org/problemnew/show/P5284" target="_blank" rel="noopener">「十二省联考 2019」字符串问题（Luogu 5284）</a></p>
<p>题太长了，自己读吧 QAQ。</p>
<p>令 $n = \vert S \vert$，则：</p>
<ul>
<li>对于 $40 \%$ 的数据，$n_a \times n_b \le 2 \times 10^5$。</li>
<li>对于 $80 \%$ 的数据，$\vert A_i \vert \ge \vert B_i \vert$。</li>
<li>对于 $100 \%$ 的数据，$n, n_a, n_b, m \le 2 \times 10^5$。</li>
</ul>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><h2 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h2><p>直接借助 Hash 暴力建图，做拓扑排序后 DP 求最长链即可。</p>
<p>时间复杂度 $O(n + n_a \times n_b + m)$，期望得分 $40$ 分。</p>
<h2 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h2><p>可以发现复杂度的瓶颈在于 “如果 $B_j$ 是 $A_i$ 的前缀，则从 $B_j$ 向 $A_i$ 连一条边” 这一部分。如果有 $\vert A_i \vert \ge \vert B_i \vert$，那么连边的条件等价于：</p>
<script type="math/tex; mode=display">\text{lcp}(\text{Suf}(L_{a_i}), \text{Suf}(L_{b_j})) \ge \vert B_j \vert</script><p>对于串后缀排序，则 $B_j$ 对应的 $A$ 就会形成一段区间。这段区间可以通过在 $\text{height}$ 数组上倍增来找到。找到区间以后，我们使用线段树优化建图即可。</p>
<p>我们将 $n, n_a, n_b, m$ 看作同阶，时间复杂度 $O(n \log n)$，期望得分 $80$ 分。</p>
<h2 id="算法三"><a href="#算法三" class="headerlink" title="算法三"></a>算法三</h2><p>如果不保证 $\vert A_i \vert \ge \vert B_i \vert$，那么连边的条件就多了一个，也就是增加了一维的限制。我们使用主席树来代替线段树优化建边即可。</p>
<p>我们将 $n, n_a, n_b, m$ 看作同阶，时间复杂度 $O(n \log n)$，期望得分 $100$ 分。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) / 2)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">event</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> type, id, x, y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	event(<span class="keyword">int</span> type = <span class="number">0</span>, <span class="keyword">int</span> id = <span class="number">0</span>, <span class="keyword">int</span> x = <span class="number">0</span>, <span class="keyword">int</span> y = <span class="number">0</span>): type(type), id(id), x(x), y(y) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> event &amp;a, <span class="keyword">const</span> event &amp;b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> a.x == b.x ? a.type &lt; b.type : a.x &gt; b.x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>, maxm = <span class="number">2</span> * maxn, maxv = <span class="number">5e6</span>, logn = <span class="number">17</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T, len, sa[maxn + <span class="number">3</span>], rnk[maxn + <span class="number">3</span>], _cnt[maxn + <span class="number">3</span>], a[maxn + <span class="number">3</span>], b[maxn + <span class="number">3</span>], hei[logn + <span class="number">3</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, k, lg, l1[maxn + <span class="number">3</span>], ln1[maxn + <span class="number">3</span>], l2[maxn + <span class="number">3</span>], ln2[maxn + <span class="number">3</span>], deg[maxv + <span class="number">3</span>], tot, cnt, rt, ch[maxv + <span class="number">3</span>][<span class="number">2</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> s[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">event e[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxv + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll dp[maxv + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">radix_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> b[], <span class="keyword">int</span> k[], <span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	fill(_cnt + <span class="number">1</span>, _cnt + n + <span class="number">1</span>, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) _cnt[k[i]]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) _cnt[i] += _cnt[i - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; i--) b[_cnt[k[a[i]]]--] = a[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">suffix_sort</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) _cnt[s[i] - <span class="string">'a'</span> + <span class="number">1</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">26</span>; i++) _cnt[i] += _cnt[i - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) rnk[i] = _cnt[s[i] - <span class="string">'a'</span> + <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (_cnt[<span class="number">26</span>] == n) &#123; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) sa[rnk[i]] = i; <span class="keyword">return</span>; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n; k *= <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[i] = rnk[i], b[i] = (i + k &lt;= n ? rnk[i + k] : <span class="number">0</span>) + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) sa[i] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		radix_sort(sa, rnk, b, n), radix_sort(rnk, sa, a, n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		rnk[sa[<span class="number">1</span>]] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			rnk[sa[i]] = rnk[sa[i - <span class="number">1</span>]] + (a[sa[i]] != a[sa[i - <span class="number">1</span>]] || b[sa[i]] != b[sa[i - <span class="number">1</span>]]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (rnk[sa[n]] == n) <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_height</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j, t = <span class="number">0</span>; i &lt;= n; hei[<span class="number">0</span>][rnk[i++] - <span class="number">1</span>] = t) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (t = max(<span class="number">0</span>, t - <span class="number">1</span>), j = sa[rnk[i] - <span class="number">1</span>]; s[i + t] == s[j + t]; t++);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	G[u].push_back(v), deg[v]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> x = ++tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l == r) <span class="keyword">return</span> ch[x][<span class="number">0</span>] = <span class="number">0</span>, ch[x][<span class="number">1</span>] = <span class="number">0</span>, x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ch[x][<span class="number">0</span>] = build(l, mid), ch[x][<span class="number">1</span>] = build(mid + <span class="number">1</span>, r), x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> bs, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> x = ++tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ch[x][<span class="number">0</span>] = ch[bs][<span class="number">0</span>], ch[x][<span class="number">1</span>] = ch[bs][<span class="number">1</span>], add_edge(x, bs);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l == r) <span class="keyword">return</span> add_edge(x, y), x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (z &lt;= mid) ch[x][<span class="number">0</span>] = grow(ch[bs][<span class="number">0</span>], l, mid, y, z), add_edge(x, ch[x][<span class="number">0</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">else</span> ch[x][<span class="number">1</span>] = grow(ch[bs][<span class="number">1</span>], mid + <span class="number">1</span>, r, y, z), add_edge(x, ch[x][<span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> lx, <span class="keyword">int</span> rx, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (!x) <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (l &gt;= lx &amp;&amp; r &lt;= rx) <span class="keyword">return</span> add_edge(y, x), <span class="keyword">void</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (lx &lt;= mid) solve(ch[x][<span class="number">0</span>], l, mid, lx, rx, y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (rx &gt; mid) solve(ch[x][<span class="number">1</span>], mid + <span class="number">1</span>, r, lx, rx, y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (T--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>), len = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		suffix_sort(len), get_height(len);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		lg = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; <span class="number">1</span> &lt;&lt; k &lt;= len - <span class="number">1</span>; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			lg = k;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = (<span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>)) + <span class="number">1</span>; i &lt;= len - (<span class="number">1</span> &lt;&lt; k); i++, j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				hei[k][i] = min(hei[k - <span class="number">1</span>][i], hei[k - <span class="number">1</span>][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cnt = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;l1[i], &amp;ln1[i]), ln1[i] = ln1[i] - l1[i] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			e[++cnt] = event(<span class="number">1</span>, i, ln1[i], l1[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;l2[i], &amp;ln2[i]), ln2[i] = ln2[i] - l2[i] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			e[++cnt] = event(<span class="number">2</span>, i, ln2[i], l2[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		sort(e + <span class="number">1</span>, e + cnt + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y; i &lt;= k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y), add_edge(x, y + n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tot = n + m, rt = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		rt = build(<span class="number">1</span>, len);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (e[i].type == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				rt = grow(rt, <span class="number">1</span>, len, e[i].id, rnk[e[i].y]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> l = rnk[e[i].y], r = l;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = lg; ~k; k--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">if</span> (l - (<span class="number">1</span> &lt;&lt; k) &gt; <span class="number">0</span> &amp;&amp; hei[k][l - (<span class="number">1</span> &lt;&lt; k)] &gt;= e[i].x) l -= <span class="number">1</span> &lt;&lt; k;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = lg; ~k; k--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">if</span> (r + (<span class="number">1</span> &lt;&lt; k) &lt;= len &amp;&amp; hei[k][r] &gt;= e[i].x) r += <span class="number">1</span> &lt;&lt; k;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				solve(rt, <span class="number">1</span>, len, l, r, e[i].id + n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dp[i] = i &lt;= n ? ln1[i] : <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (!deg[i]) Q.push(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cnt = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ll ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (!Q.empty()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> u = Q.front();</span></pre></td></tr><tr><td class="code"><pre><span class="line">			cnt++, Q.pop(), ans = max(ans, dp[u]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				dp[v] = max(dp[v], dp[u] + (v &lt;= n ? ln1[v] : <span class="number">0</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (!--deg[v]) Q.push(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (cnt != tot) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			G[i].clear(), deg[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>后缀数组</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>「十二省联考 2019」异或粽子（字典树）</title>
    <url>/2019/06/24/20190624-SHOI2019-Xor-Zongzi/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.luogu.org/problemnew/show/P5283" target="_blank" rel="noopener">「十二省联考 2019」异或粽子（Luogu 5283）</a></p>
<p>给定一个长度为 $n$ 的数列 $a_1, a_2, \cdots, a_n$，问区间异或和前 $k$ 大的区间的异或和之和。</p>
<p>数据范围：$n \le 5 \times 10^5, m \le 2 \times 10^5, 0 \le a_i &lt; 2^{32}$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>我们设 $S_i$ 表示前 $i$ 个数的异或和，那么区间 $[l, r]$ 的异或和等于 $S_{l - 1} \bigoplus S_{r}$。由于 $x \bigoplus y = y \bigoplus x$，本题的答案等于取 $2k$ 个 $S_i \bigoplus S_j$ 最大的 $(i, j) (0 \le i, j \le n, i \neq j)$ 求和再除以 $2$。又由于 $x \bigoplus x = 0$，所以 $i \neq j$ 的限制也可以去掉。这样，我们使用字典树 + 堆来维护即可。时间复杂度 $O((n + m) \log n)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="keyword">int</span>&gt; P;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span>, maxm = <span class="number">32</span>, maxk = maxn * maxm;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, k, tot, ch[maxk + <span class="number">3</span>][<span class="number">2</span>], sz[maxk + <span class="number">3</span>], cnt[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll a[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">priority_queue&lt;P&gt; H;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(ll num)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> x = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = maxm - <span class="number">1</span>; ~i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> k = num &gt;&gt; i &amp; <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!ch[x][k]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ch[x][k] = ++tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x = ch[x][k], sz[x]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> y, ll num)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> x = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = maxm - <span class="number">1</span>; ~i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> k = num &gt;&gt; i &amp; <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (y &lt;= sz[ch[x][k ^ <span class="number">1</span>]]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans |= <span class="number">1l</span>l &lt;&lt; i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			x = ch[x][k ^ <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			y -= sz[ch[x][k ^ <span class="number">1</span>]];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			x = ch[x][k];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k), k *= <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]), a[i] ^= a[i - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	tot = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		insert(a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cnt[i] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		H.push(P(query(<span class="number">1</span>, a[i]), i));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i; k--; ) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		P x = H.top();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		H.pop(), i = x.second;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans += x.first, cnt[i]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (cnt[i] &lt;= n + <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			H.push(P(query(cnt[i], a[i]), i));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans / <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>字典树</tag>
      </tags>
  </entry>
  <entry>
    <title>「HNOI 2012」集合选数（动态规划）</title>
    <url>/2019/06/24/20190624-HNOI2012-Picking-Numbers/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>从集合 ${ 1, 2, \cdots, n }$ 中选出一个子集，满足其中不存在两个数互相是两倍或三倍关系。求选的方案总数$\bmod 10^9 + 1$ 的结果。</p>
<p>数据范围：$n \le 10^5$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>Yet another problem about independent set.</p>
<p>我们把数视作结点，矛盾视作边，那么发现所有矛盾形成了多个网格图，且行数不超过 $17$，列数不超过 $11$。于是直接 DP，然后再相乘即可。</p>
<p>时间复杂度 $O(17 \times 11 \times 2^{11})$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>, maxh = <span class="number">17</span>, maxw = <span class="number">11</span>, maxs = <span class="number">1</span> &lt;&lt; maxw, mod = <span class="number">1e9</span> + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, pw2[maxh + <span class="number">3</span>], pw3[maxw + <span class="number">3</span>], h, w, a[maxh + <span class="number">3</span>][maxw + <span class="number">3</span>], dp[maxh + <span class="number">3</span>][maxw + <span class="number">3</span>][maxs + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	pw2[<span class="number">0</span>] = pw3[<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxh; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		pw2[i] = pw2[i - <span class="number">1</span>] * <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxw; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		pw3[i] = pw3[i - <span class="number">1</span>] * <span class="number">3</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	x += y, x &lt; mod ? <span class="number">0</span> : x -= mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= h; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= w; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[i][j] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	h = w = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; pw2[i] * x &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		h = max(h, i + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; pw2[i] * pw3[j] * x &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			w = max(w, j + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[i + <span class="number">1</span>][j + <span class="number">1</span>] = pw2[i] * pw3[j] * x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			vis[pw2[i] * pw3[j] * x] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dp[<span class="number">0</span>][w][<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> msk = <span class="number">1</span>; msk &lt; <span class="number">1</span> &lt;&lt; w; msk++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dp[<span class="number">0</span>][w][msk] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= h; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> msk = <span class="number">0</span>; msk &lt; <span class="number">1</span> &lt;&lt; w; msk++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dp[i][<span class="number">0</span>][msk] = dp[i - <span class="number">1</span>][w][msk];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= w; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> msk = <span class="number">0</span>; msk &lt; <span class="number">1</span> &lt;&lt; w; msk++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				dp[i][j][msk] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> msk = <span class="number">0</span>; msk &lt; <span class="number">1</span> &lt;&lt; w; msk++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (!dp[i][j - <span class="number">1</span>][msk]) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				upd(dp[i][j][msk &amp; (((<span class="number">1</span> &lt;&lt; w) - <span class="number">1</span>) ^ (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>)))], dp[i][j - <span class="number">1</span>][msk]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (a[i][j] &amp;&amp; (~msk &gt;&gt; (j - <span class="number">1</span>) &amp; <span class="number">1</span>) &amp;&amp; (j == <span class="number">1</span> || (~msk &gt;&gt; (j - <span class="number">2</span>) &amp; <span class="number">1</span>))) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					upd(dp[i][j][msk | (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))], dp[i][j - <span class="number">1</span>][msk]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> msk = <span class="number">0</span>; msk &lt; <span class="number">1</span> &lt;&lt; w; msk++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		upd(ans, dp[h][w][msk]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	prework();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!vis[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans = <span class="number">1l</span>l * ans * solve(i) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>「Codeforces 865C」GGF（概率论 + 动态规划 + 二分）</title>
    <url>/2019/06/24/20190624-CF865C-Gotta-Go-Fast/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://codeforces.com/contest/865/problem/C" target="_blank" rel="noopener">「Codeforces 865C」Gotta Go Fast</a></p>
<p>一个游戏有 $n$ 个关卡，每个关卡有三个参数 $F_i, S_i, P_i$，表示你有 $P_i \%$ 的概率使用 $F_i$ 个单位时间通关，有 $1 - P_i \%$ 的概率使用 $S_i$ 个单位时间通关。你的目标是在 $m$ 个单位时间内按顺序连续通过所有关卡。每打完一关以后，你可以根据当前用时来进行决策。你可以继续打关，也可以重启游戏，从第一关开始从新打。问在最优策略下，达成目标需要使用的期望时间。</p>
<p>数据范围：$n \le 50, m \le 5 \times 10^3, F_i &lt; S_i \le 100, 80 \le P_i \le 99$.</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>很妙的一道题。</p>
<p>令 $\text{dp}(i, j)$ 表示从第 $i$ 关打到第 $n$ 关，还剩下 $j$ 个单位时间时，最小的期望通关时间。那么对于每关我们可以选择打或从头开始，就有：</p>
<script type="math/tex; mode=display">\text{dp}(i, j) = \min \{ \text{dp}(1, 0), (\text{dp}(i + 1, j + F_i) + F_i) \times (P_i \%) + (\text{dp}(i + 1, j + S_i) + S_i) \times (1 - P_i \%) \}</script><p>当然，对于 $j &gt; m$，我们有 $\text{dp}(i, j) = \text{dp}(1, 0)$。</p>
<p>但是有一个问题，我们在算 $\text{dp}(i, j)$ 时还不知道 $\text{dp}(1, 0)$。考虑二分答案，先假设 $\text{dp}(1, 0) = k$，然后按照上面的方成转移，算出真正的 $\text{dp}(1, 0)$。如果 $\text{dp}(1, 0) = k$，那么真正的 $\text{dp}(1, 0) \ge k$；否则 $\text{dp}(1, 0) &lt; k$。所以根据这个来二分答案即可。</p>
<p>时间复杂度 $O(nm \times \log v)$</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50</span>, maxm = <span class="number">5e3</span> + <span class="number">100</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, lim, f[maxn + <span class="number">3</span>], s[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">db p[maxn + <span class="number">3</span>], q[maxn + <span class="number">3</span>], dp[maxn + <span class="number">3</span>][maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(db x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = lim + <span class="number">1</span>; j &lt;= lim + <span class="number">100</span>; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dp[i + <span class="number">1</span>][j] = x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= lim; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dp[i][j] = min(x, (dp[i + <span class="number">1</span>][j + f[i]] + f[i]) * p[i] + (dp[i + <span class="number">1</span>][j + s[i]] + s[i]) * q[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> dp[<span class="number">1</span>][<span class="number">0</span>] == x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;lim);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;f[i], &amp;s[i], &amp;x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		p[i] = x / <span class="number">100.</span>, q[i] = (<span class="number">100</span> - x) / <span class="number">100.</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">double</span> l = <span class="number">0</span>, r = <span class="number">1e9</span>, mid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">70</span>; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		mid = (l + r) / <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (check(mid)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			l = mid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			r = mid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%.12lf\n"</span>, (l + r) / <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>动态规划</tag>
        <tag>概率论</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>「APIO 2015」Jakarta Skyscrapers（BFS）</title>
    <url>/2019/06/23/20190623-APIO2015-Jakarta-Skyscrapers/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.luogu.org/problemnew/show/P3645" target="_blank" rel="noopener">「APIO 2015」Jakarta Skyscrapers（Luogu 3645）</a></p>
<p>有 $n$ 个位置，$m$ 只 doge，第 $i$ 只在位置 $b_i$ 上。一开始给 $1$ 号 doge 传达信息，第 $i$ 只 doge 在收到信息后，可以进行如下操作：</p>
<ul>
<li>自己向左后向右移动 $p_i$ 个位置，花费 $1$ 个单位时间。</li>
<li>将携带的信息传达给在同一个位置上的 doge，花费 $0$ 个单位时间。</li>
</ul>
<p>问信息传达给 $2$ 号 doge 所需要的最少时间。</p>
<p>数据范围：$n, m \le 3 \times 10^4$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>最容易想到的是一个暴力算法：我们每次让 doge 向左或向右跳，碰到一个 doge 就传达信息。考虑对于每一个位置建一个点，每新来一个 doge 就对于每一个它能够跳到的位置新建一个辅助点。然后：</p>
<ul>
<li>每个辅助点向对应位置的点连一条长度为 $0$ 的边。</li>
<li>从 $b_i$ 向 $b_i$ 的辅助点连一条长度为 $0$ 的边。</li>
<li>如果 doge 能够跳到位置 $x$，就从 $x$ 的辅助点向 $x - p_i$ 或 $x + p_i$ 的辅助点连长度为 $1$ 的边（取决于 $x$ 和 $b_i$ 的相对位置）。</li>
</ul>
<p>不幸的是，我们发现这样的点数，边数都是 $O(nm)$ 的，无法通过此题。注意到我们的算法在 $p_i$ 较大的时候不会出现问题，而 $p_i$ 较小的时候的点数，边数较大。具体来讲，我们的点数是不超过 $n + \frac{nm}{P_0}$ 的，边数是不超过 $m + \frac{2mn}{P_0}$ 的，其中 $P_0$ 是所有 $p_i$ 的最小值。</p>
<p>那么，有没有在 $p_i$ 较小的时候可行的算法呢？发现 $p_i$ 较小的时候很多 doge 能跳到的位置集合都是完全相同的。也就是说，如果两个 doge $p_i$ 相同，$b_i \bmod p_i$ 同余，那么我们考虑将它们一起解决。对于每一个位置再建立 $P_1$ 个辅助点，其中 $P_1$ 是所有 $p_i$ 的最大值。我们记第 $i$ 个点的第 $j$ 个辅助点为 $\text{pnt}(i, j)$。建如下的图：</p>
<ul>
<li>每个 $\text{pnt}(i, j)$ 向 $i$ 点连一条长度为 $0$ 的边。</li>
<li>每个 $\text{pnt}(i, j)$ 向 $\text{pnt}(i - j, j), \text{pnt}(i + j, j)$ 连长度为 $1$ 的边。</li>
<li>对于每个 doge，从 $b_i$ 向 $\text{pnt}(b_i, p_i)$ 连长度为 $0$ 的边。</li>
</ul>
<p>经过计算，这个图的点数不超过 $n + P_1 \times n$，边数不超过 $2 P_1 \times n + m$。单独来看它还是 $O(nm)$ 的，但是我们可以将其与前一种建图方法结合起来。设定阈值 $\text{Bound}$，如果 $p_i &gt; \text{Bound}$ 就使用第一种建图方法，否则使用第二种建图方法。这样图的点数不超过 $n + \text{Bound} \times n + \frac{nm}{\text{Bound}}$，边数不超过 $2n \times \text{Bound} + \frac{2nm}{\text{Bound}} + m$。发现 $\text{Bound} = \sqrt{m}$ 时最优，建完图后跑最短路即可。当然由于这个图的边权只有 $0, 1$，所以可以直接 BFS。时间复杂度 $O(\sqrt{m}(n + m))$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e4</span>, maxb = <span class="number">175</span>, maxv = <span class="number">1.05e7</span>, maxe = <span class="number">2.1e7</span>, magic = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, cnt, bnd, s, t, l, r, Q[magic + <span class="number">3</span>], pnt[maxb + <span class="number">3</span>][maxn + <span class="number">3</span>], tot, msk[maxe + <span class="number">3</span>], nxt[maxe + <span class="number">3</span>], lnk[maxv + <span class="number">3</span>], dist[maxv + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxb + <span class="number">3</span>][maxb + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	msk[++tot] = v * <span class="number">2</span> + w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	nxt[tot] = lnk[u], lnk[u] = tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	cnt = n, bnd = <span class="built_in">sqrt</span>(m) + <span class="number">.5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, b, p; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;b, &amp;p);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		b++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (i == <span class="number">1</span>) s = b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (i == <span class="number">2</span>) t = b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (p &gt; bnd) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> x = ++cnt, u = x, v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			add(b, x, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = b - p; i &gt;= <span class="number">1</span>; i -= p) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				v = ++cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add(u, v, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add(v, i, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				u = v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			u = x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = b + p; i &lt;= n; i += p) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				v = ++cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add(u, v, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add(v, i, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				u = v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (!vis[p][b % p]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				vis[p][b % p] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> x = (b - <span class="number">1</span>) % p + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += p) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					add(pnt[p][i] = ++cnt, i, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">if</span> (i &gt; x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						add(pnt[p][i], pnt[p][i - p], <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">						add(pnt[p][i - p], pnt[p][i], <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			add(b, pnt[p][b], <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">memset</span>(dist, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dist));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	Q[r++] = s;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dist[s] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (l != r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> u = Q[l++];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (l == magic) l = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (u == t) <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = lnk[u], v, w; i; i = nxt[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			v = msk[i] &gt;&gt; <span class="number">1</span>, w = msk[i] &amp; <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (~dist[v]) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dist[v] = dist[u] + w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (w) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				Q[r++] = v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (r == magic) r = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (--l &lt; <span class="number">0</span>) l = magic - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				Q[l] = v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dist[t]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>「BZOJ 4883」棋盘上的守卫（最小生成树）</title>
    <url>/2019/06/23/20190623-BZOJ4883-Guards/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>在一个 $n \times m$ 个棋盘上，每一行要放置一个守卫，每一列要放置一个守卫，行和列的守卫不能重复。在第 $i$ 行，第 $j$ 列放置守卫的代价是 $A(i, j)$，问花费的最小代价。</p>
<p>数据范围：$n \times m \le 10^5, n, m \ge 2$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p><del>这显然是一个费用流的模型。由于数据范围比较大，我们只需要使用模拟费用流的技巧即可。</del>不好意思读错剧本了。</p>
<p>考虑一个守卫，它要么是管理所在行的，要么是管理所在列的。每一行和每一列都唯一对应一个守卫。我们将行和列都看作点，选中的守卫看作一条有向边。如果该守卫管理行，那么边朝向行；否则它管理列，那么边朝向列。这样，我们发现每一个点的入度都是 $1$，所以这些边形成了一片基环内向树森林。于是这道题就变成了求一个图的最小生成基环树森林。</p>
<p>事实上，我们只需要使用改动后的 Kruskal 算法就可以解决这个问题。对于每一个联通块，我们允许它有一条非树边。对于每条边，如果它的两端在同一个联通块里并且该联通块目前是树，那么把这条边加上并把联通块设为基环树；如果它的两端不在同一个联通块里且两个点所在的两个联通块不全是基环树，那么也可以将其合并，得到的新联通块要么是树要么是基环树。可以证明上述算法是正确的。时间复杂度 $O(nm \log nm)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, tot, cnt, fa[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> b[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> u, v, w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> edge &amp;a, <span class="keyword">const</span> edge &amp;b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> a.w &lt; b.w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; e[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> fa[x] == x ? x : fa[x] = find(fa[x]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;e[++cnt].w);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			e[cnt].u = i, e[cnt].v = n + j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		fa[i] = i, b[i] = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sort(e + <span class="number">1</span>, e + cnt + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> u = find(e[i].u), v = find(e[i].v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b[u] + b[v] + (u == v) &gt; <span class="number">1</span>) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (u != v) fa[u] = v, b[v] |= b[u], b[u] = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">else</span> b[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans += e[i].w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>「HNOI 2011」勾股定理（数论 + 动态规划）</title>
    <url>/2019/06/23/20190623-HNOI2011-The-Pythagorean-Theorem/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.luogu.org/problemnew/show/P3213" target="_blank" rel="noopener">「HNOI 2011」勾股定理（Luogu 3213）</a></p>
<p>给定 $n$ 个数 $a_1, a_2, \cdots, a_n$，问可以选出多少种位置集合，满足集合内部任意两个位置对应的数不形成互素勾股数对。互素勾股数对的意义是：$(a, b) = 1$，且 $a^2 + b^2$ 可以表示成 $c^2$ 的形式。</p>
<p>数据范围：$n \le 10^6$，$1 \le a_i \le 2 \times 10^5$ 或 $2 \times 10^4 \le a_i \le 10^6$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>互素勾股数对很少，我们考虑快速地找到他们。通过小学奥数可知，勾股数对一定可以写成如下形式：</p>
<script type="math/tex; mode=display">(x^2 - y^2)^2 + (2xy)^2 = (x^2 + y^2)^2</script><p>如果 $x^2 - y^2$ 和 $2xy$ 互素，那么 $x, y$ 互素并且不全是奇数。考虑枚举 $x, y$，再对它们进行检验，具体代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x * x &lt;= m; x++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> y = x + <span class="number">1</span>; <span class="number">2</span> * x * y &lt;= m; y++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (y * y &gt; <span class="number">2</span> * m) <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (y * y - x * x &lt;= m &amp;&amp; (x &amp; <span class="number">1</span>) != (y &amp; <span class="number">1</span>) &amp;&amp; gcd(x, y) == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> a = y * y - x * x, b = <span class="number">2</span> * x * y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="comment">// (a, b) 是一组 &lt;= m 的互素勾股数对</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>接下来根据预处理出的勾股数对建图，问题就转化成了求图的独立集个数。我们发现这个图的边数和点数很接近，于是我们可以搞出图的一个 DFS 树，然后对于非树边容斥，做树形 DP 即可。（其实就是<a href="https://www.luogu.org/problemnew/show/P4426" target="_blank" rel="noopener">「HNOI2018」毒瘤（Luogu 4426）</a>一题的弱化版，不需要建虚树）</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, bin[maxn + <span class="number">3</span>], cnt[maxn + <span class="number">3</span>], k, p[maxn + <span class="number">3</span>], q[maxn + <span class="number">3</span>], tm, lim[maxn + <span class="number">3</span>], f[maxn + <span class="number">3</span>][<span class="number">2</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>], T[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	G[u].push_back(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> b ? gcd(b, a % b) : a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	bin[<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		bin[i] = bin[i - <span class="number">1</span>] * <span class="number">2</span> % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x * x &lt;= m; x++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> y = x + <span class="number">1</span>; <span class="number">2</span> * x * y &lt;= m; y++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (y * y &gt; <span class="number">2</span> * m) <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (y * y - x * x &lt;= m &amp;&amp; (x &amp; <span class="number">1</span>) != (y &amp; <span class="number">1</span>) &amp;&amp; gcd(x, y) == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> a = y * y - x * x, b = <span class="number">2</span> * x * y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (cnt[a] &amp;&amp; cnt[b]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					add(a, b), add(b, a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	vis[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!vis[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			T[u].push_back(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dfs(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			++k;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			p[k] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			q[k] = v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	f[u][<span class="number">0</span>] = <span class="number">1</span>, f[u][<span class="number">1</span>] = bin[cnt[u]] - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (lim[u] == tm) f[u][<span class="number">0</span>] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; T[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dp(v = T[u][i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[u][<span class="number">0</span>] = <span class="number">1l</span>l * f[u][<span class="number">0</span>] * (f[v][<span class="number">0</span>] + f[v][<span class="number">1</span>]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[u][<span class="number">1</span>] = <span class="number">1l</span>l * f[u][<span class="number">1</span>] * f[v][<span class="number">0</span>] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bit_cnt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> __builtin_popcount(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	k = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfs(u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		++tm;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (i &gt;&gt; (k - j) &amp; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				lim[p[j]] = lim[q[j]] = tm;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dp(u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans = (ans + <span class="number">1l</span>l * (f[u][<span class="number">0</span>] + f[u][<span class="number">1</span>]) * (bit_cnt(i) &amp; <span class="number">1</span> ? mod - <span class="number">1</span> : <span class="number">1</span>)) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		m = max(m, x), cnt[x]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	prework();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> res = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="keyword">if</span> (cnt[i] &amp;&amp; !vis[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		res = <span class="number">1l</span>l * res * solve(i) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (res + mod - <span class="number">1</span>) % mod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>动态规划</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>「ZJOI 2016」线段树（动态规划）</title>
    <url>/2019/06/21/20190621-ZJOI2016-Segment-Tree/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.luogu.org/problemnew/show/P3352" target="_blank" rel="noopener">「ZJOI 2016」线段树（Luogu 3352）</a></p>
<p>有一个长度为 $n$ 的数列 $a_1, a_2, \cdots, a_n$。进行 $q$ 次操作，每次随机选出一个区间，然后把区间中的所有数赋值为区间的最大值。问最后每一个位置上的数的期望乘上所有可能操作个数后$\bmod 10 ^ 9 + 7$ 是多少。</p>
<p>数据范围：$n, q \le 400$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><h2 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h2><p>由于数很大，我们先将序列离散化。我们假设数列已经离散化完毕，并且数列中等于 $i$ 的数原来是 $\text{val}(i)$。</p>
<p>对于每个 $x$ 分别考虑它最后在每个位置出现了几次。令 $\text{dp}(x, i, l, r)$ 表示 $i$ 次操作过后，$a_l, a_{l + 1}, \cdots, a_r \le x$，$a_{l - 1}, a_{r + 1} &gt; x$，即 $[l, r]$ 是极长的 $\le x$ 区间的方案数。</p>
<p>考虑第 $i$ 次选择的区间：</p>
<ul>
<li>若它完全在原区间内部或外部，则原区间不会变化。  </li>
<li>若它横跨原区间的左端点，但是不经过右端点，那么新区间的右端点不变，左端点向右移动到选择的区间的右端点 $+ 1$ 处。  </li>
<li>若它横跨原区间的右端点，但是不经过左端点，那么新区间的左端点不变，右端点向左移动到选择的区间的左端点 $- 1$ 处。  </li>
<li>若它包含整个区间，那么原区间就会消失。</li>
</ul>
<p>综上所述，我们可以列出 DP 的转移方程：</p>
<script type="math/tex; mode=display">\text{dp}(x, i, l, r) = g(l, r) \times \text{dp}(x, i - 1, l, r) + \sum_{1 \le j < l} (j - 1) \times \text{dp}(x, i - 1, j, r) + \sum_{r < j \le n} (n - j) \times \text{dp}(x, i - 1, l, j)</script><p>其中 $g(l, r)$ 表示对区间 $[l, r]$ 没有影响的操作区间个数。</p>
<p>使用前缀和优化即可达到 $O(n ^ 2 q)$ 的复杂度。由于有 $n$ 个不同的 $x$，总复杂度为 $O(n ^ 3 q)$。</p>
<p>那么对于一个位置 $i$，它 $\le x$ 的情况数就是 $\sum_{i \in [l, r]} \text{dp}(x, q, l, r)$。我们记这个数为 $f(i, x)$，位置 $i$ 等于 $x$ 的方案数就是 $f(i, x) - f(i, x - 1)$。所以位置 $i$ 的最终答案为：$\sum_{x} \text{val}(x) \times (f(i, x) - f(i, x - 1))$。</p>
<p>期望得分 $70$ 分。</p>
<h2 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h2><p>我们考虑在算法一的基础上优化。发现复杂度瓶颈在于一开始的枚举 $x$，我们应该去掉这个过程。注意到对于 $f(i, x)$，它对位置 $i$ 有 $\text{val}(x) - \text{val}(x + 1)$ 的贡献。于是我们不必枚举 $x$，只需要在一开始给 DP 赋初始值的时候将贡献加进去即可。也就是说，对于每个 $x$，找出它对应的极长区间，然后让 $\text{dp}(0, l, r) \leftarrow \text{dp}(0, l, r) + \text{val}(x) - \text{val}(x + 1)$。这样的复杂度就减小到了 $O(n ^ 2 q)$。详见代码。</p>
<p>期望得分 $100$ 分。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="算法一（70-分）"><a href="#算法一（70-分）" class="headerlink" title="算法一（70 分）"></a>算法一（70 分）</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">400</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, q, a[maxn + <span class="number">3</span>], v[maxn + <span class="number">3</span>], c, p[maxn + <span class="number">3</span>], dp[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], f[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], g[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], h[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> x * (x + <span class="number">1</span>) / <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;q);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]), v[i] = a[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sort(v + <span class="number">1</span>, v + n + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    m = unique(v + <span class="number">1</span>, v + n + <span class="number">1</span>) - (v + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a[i] = lower_bound(v + <span class="number">1</span>, v + m + <span class="number">1</span>, a[i]) - v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= m; x++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        c = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        p[++c] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (a[i] &gt; x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                p[++c]= i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        p[++c] = n + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                dp[<span class="number">0</span>][i][j] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; c; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (p[i] != p[i + <span class="number">1</span>] - <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                dp[<span class="number">0</span>][p[i] + <span class="number">1</span>][p[i + <span class="number">1</span>] - <span class="number">1</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= q; t++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                f[i][<span class="number">0</span>] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> 				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> 					f[i][j] = (f[i][j - <span class="number">1</span>] + <span class="number">1l</span>l * (j - <span class="number">1</span>) * dp[t - <span class="number">1</span>][j][i]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> 				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                g[i][n + <span class="number">1</span>] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &gt; i; j--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    g[i][j] = (g[i][j + <span class="number">1</span>] + <span class="number">1l</span>l * (n - j) * dp[t - <span class="number">1</span>][i][j]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= n; l++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> r = l; r &lt;= n; r++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    dp[t][l][r] = (<span class="number">1l</span>l * dp[t - <span class="number">1</span>][l][r] * (calc(l - <span class="number">1</span>) + calc(r - l + <span class="number">1</span>) + calc(n - r)) + f[r][l - <span class="number">1</span>] + g[l][r + <span class="number">1</span>]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                h[x][i] = (h[x][i] + dp[q][i][j]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                h[x][j + <span class="number">1</span>] = (h[x][j + <span class="number">1</span>] - dp[q][i][j] + mod) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            h[x][i] = (h[x][i] + h[x][i - <span class="number">1</span>]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= m; x++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ans = (ans + <span class="number">1l</span>l * (h[x][i] - h[x - <span class="number">1</span>][i] + mod) * v[x]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans, <span class="string">" \n"</span>[i == n]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h2 id="算法二（100-分）"><a href="#算法二（100-分）" class="headerlink" title="算法二（100 分）"></a>算法二（100 分）</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">400</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, q, a[maxn + <span class="number">3</span>], v[maxn + <span class="number">3</span>], c, p[maxn + <span class="number">3</span>], dp[<span class="number">2</span>][maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], f[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], g[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], h[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x * (x + <span class="number">1</span>) / <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x &lt; <span class="number">0</span> ? x + mod : x &lt; mod ? x : x - mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;q);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]), v[i] = a[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sort(v + <span class="number">1</span>, v + n + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	m = unique(v + <span class="number">1</span>, v + n + <span class="number">1</span>) - (v + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a[i] = lower_bound(v + <span class="number">1</span>, v + m + <span class="number">1</span>, a[i]) - v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= m; x++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		c = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		p[++c] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (a[i] &gt; x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				p[++c]= i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		p[++c] = n + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; c; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (p[i] != p[i + <span class="number">1</span>] - <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				dp[<span class="number">0</span>][p[i] + <span class="number">1</span>][p[i + <span class="number">1</span>] - <span class="number">1</span>] = func(dp[<span class="number">0</span>][p[i] + <span class="number">1</span>][p[i + <span class="number">1</span>] - <span class="number">1</span>] + v[x] - v[x + <span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> cur = <span class="number">0</span>, lst = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= q; t++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		swap(cur, lst);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			f[i][<span class="number">0</span>] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				f[i][j] = (f[i][j - <span class="number">1</span>] + <span class="number">1l</span>l * (j - <span class="number">1</span>) * dp[lst][j][i]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			g[i][n + <span class="number">1</span>] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &gt; i; j--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				g[i][j] = (g[i][j + <span class="number">1</span>] + <span class="number">1l</span>l * (n - j) * dp[lst][i][j]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= n; l++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> r = l; r &lt;= n; r++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				dp[cur][l][r] = (<span class="number">1l</span>l * dp[lst][l][r] * (calc(l - <span class="number">1</span>) + calc(r - l + <span class="number">1</span>) + calc(n - r)) + f[r][l - <span class="number">1</span>] + g[l][r + <span class="number">1</span>]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			h[i] = (h[i] + dp[cur][i][j]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			h[j + <span class="number">1</span>] = (h[j + <span class="number">1</span>] - dp[cur][i][j] + mod) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		h[i] = (h[i] + h[i - <span class="number">1</span>]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d%c"</span>, h[i], <span class="string">" \n"</span>[i == n]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>「Luogu U74074」大白菜的疑惑 命题报告</title>
    <url>/2019/06/20/20190620-U74074-Math/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.luogu.org/problemnew/show/U74074" target="_blank" rel="noopener">「Luogu U74074」大白菜的疑惑</a></p>
<p>这是一道提交答案题。要求找出两个正整数 $a, b$，满足 $a, b \le 2 \times 10^{9}$，且 $c = f(a, b)$ 尽可能小。其中：</p>
<script type="math/tex; mode=display">f(a, b) = \vert \dfrac{a ^ 2}{b ^ 2} - 2 \vert</script><p>如果 $c \le 10^{-18}$，得满分。</p>
<p>预计难度：普及组。</p>
<a id="more"></a>
<p>部分分如下：</p>
<ul>
<li>若 $c \le 10^{-3}$，得 $10$ 分。  </li>
<li>若 $c \le 10^{-8}$，得 $30$ 分。  </li>
<li>若 $c \le 10^{-13}$，得 $60$ 分。  </li>
<li>若 $c \le 10^{-18}$，得 $100$ 分。</li>
</ul>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><h2 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h2><p>不难发现题目要求就是让 $\frac{a}{b}$ 尽可能地接近 $\sqrt{2}$。</p>
<p>根据常识，$\sqrt{2}$ 大约等于 $1.414$，所以输出 <code>1414 1000</code> 即可达到 $c \le 10^{-3}$ 的准确率。</p>
<p>期望得分 $10$ 分。</p>
<h2 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h2><p>使用计算器计算 $\sqrt{2}$ 大约等于 $1.41421356$，所以输出 <code>141421356 100000000</code> 即可达到 $c \le 10^{-8}$ 的准确率。</p>
<p>期望得分 $30$ 分。</p>
<h2 id="算法三"><a href="#算法三" class="headerlink" title="算法三"></a>算法三</h2><p>我们枚举 $b$，计算 $\lfloor \sqrt{2} \times b \rfloor$ 以及 $\lfloor \sqrt{2} \times b \rfloor + 1$ 作为 $a$ 的备选，取最优的 $(a, b)$ 即可。</p>
<p>不幸的是，时间有限，我们只能枚举 $1 \le b \le 10^7$。不过这样已经可以达到 $c \le 10^{-13}$ 的准确率。</p>
<p>期望得分 $60$ 分。</p>
<h2 id="算法四"><a href="#算法四" class="headerlink" title="算法四"></a>算法四</h2><p>由于这是提交答案题，我们在本地枚举 $b$ 即可。这样可以达到 $c \le 10^{-18}$ 的准确率。</p>
<p>期望得分 $100$ 分。</p>
<h2 id="算法五"><a href="#算法五" class="headerlink" title="算法五"></a>算法五</h2><p>算法四太不优美了。有没有漂亮的做法呢？</p>
<p>计算 $(\sqrt{2} - 1) ^ k$ = $a \times \sqrt{2} + b$ 即可。发现随着 $k$ 的增大，$- \frac{a}{b}$ 越来越接近 $\sqrt{2}$。经过实践发现取 $k = 25$ 最为合适。</p>
<p>期望得分 $100$ 分。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">25</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[n + <span class="number">3</span>], b[n + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    a[<span class="number">0</span>] = <span class="number">1</span>, b[<span class="number">0</span>] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a[i] = <span class="number">2</span> * b[i - <span class="number">1</span>] - a[i - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        b[i] = a[i - <span class="number">1</span>] - b[i - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> x = a[n], y = b[n];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (n &amp; <span class="number">1</span>) x = -x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">else</span> y = -y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, x, y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数学</tag>
        <tag>出题</tag>
      </tags>
  </entry>
  <entry>
    <title>「ZJOI 2016」小星星（容斥原理 + 动态规划）</title>
    <url>/2019/06/20/20190620-ZJOI2016-Little-Stars/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.luogu.org/problemnew/show/P3349" target="_blank" rel="noopener">「ZJOI 2016」小星星（Luogu 3349）</a></p>
<p>给定一个 $n$ 个结点 $m$ 条边的无向图和一棵 $n$ 个结点的树。现在要把树中的每个结点不重复，不遗漏地对应到图中的每个结点上，满足对应后形成的树是图的一棵生成树。求合法方案的数量。</p>
<p>数据范围：$n \le 17$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>先考虑如果没有不重复，不遗漏这个条件怎么做。相当于给树上的每个结点都染个颜色，满足相邻的两个结点的颜色之间对应有边。记 $\text{dp}(i, j)$ 表示结点 $i$ 染成颜色 $j$ 的方案数，我们只要暴力枚举儿子的颜色即可转移。时间复杂度 $O(n ^ 3)$。</p>
<p>但是现在有 “所有颜色都要用到” 这个条件。考虑最一般的容斥原理。对于上述的 DP，我们记对于颜色集合 $A$ 算出的答案为 $f(A)$。我们只要每次枚举一个颜色的子集 $S$ 不能使用，然后把 $(-1)^{\vert A \vert} \times f(S - A)$ 贡献到答案里就行了，其中 $S$ 是颜色的全集。时间复杂度 $O(2 ^ n \times n ^ 3)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">18</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, cur_msk;</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll dp[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> a[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	G[u].push_back(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bit_cnt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> __builtin_popcount(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dp[u][i] = ~cur_msk &gt;&gt; (n - i) &amp; <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (dp[u][i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ll sum = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (a[i][j]) sum += dp[v][j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dp[u][i] *= sum;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a[u][v] = a[v][u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		add(u, v), add(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll ans = <span class="number">0</span>, res;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> msk = <span class="number">0</span>; msk &lt; (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>; msk++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cur_msk = msk;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		res = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			res += dp[<span class="number">1</span>][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (~bit_cnt(msk) &amp; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans += res;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans -= res;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>动态规划</tag>
        <tag>容斥原理</tag>
      </tags>
  </entry>
  <entry>
    <title>「ZJOI 2017」仙人掌（组合计数）</title>
    <url>/2019/06/20/20190620-ZJOI2017-Cactus/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.luogu.org/problemnew/show/P3687" target="_blank" rel="noopener">「ZJOI 2017」仙人掌（Luogu 3687）</a></p>
<p>给定一个 $n$ 个点 $m$ 条边的无向联通图，你要在图上加若干条不重复的边（可以加 $0$ 条），使得图变成一棵仙人掌。求加边方案数量$\bmod 998244353$ 的结果。</p>
<p>数据范围：$n \le 5 \times 10^5, m \le 10^6$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>搞不懂为什么好多题解都要用树形 DP。</p>
<p>首先如果一个图不是仙人掌，那么它加边后也不可能变成一个仙人掌，方案数为 $0$。</p>
<p>对于一个仙人掌，发现加边的两个端点形成的路径上不能经过任何一个环，否则在环上的那条边就会被新加上的那条边形成的新环包含，也就是被两个环包含。所以环不对答案产生影响，我们事先把环上的所有边删去，然后对于留下的每一棵树，计算它单独的方案数，最后乘起来即可。</p>
<p>对于一棵树，进行一个转化：在两个结点之间加一条边转化成覆盖在树上两个结点形成的路径。于是我们发现这条路径包含的边数肯定 $\ge 2$，并且选出的路径的边不能有相交。为了使算法更加简洁，我们将没有被覆盖的边视为被长度为 $1$ 的路径覆盖了。于是问题就转化成了求树上选出一些路径恰好覆盖所有边的方案数。</p>
<p>对于每个结点，我们考虑它的邻边配对的情况。邻边可以单个一组，也就是作为一条路径的端点；或者可以两两配对，也就是作为一条路径中间的某处。记有 $n$ 条邻边的方案数为 $f(n)$，考虑 $f$ 的递推公式。我们新加入 $n$ 号邻边时，对于第一种情况，剩下的邻边随便配，故 $f(n) \leftarrow f(n) + f(n - 1)$。对于第二种情况，新加入的边要和以前的某个边配对，剩下的 $n - 2$ 条边随便配，故 $f(n) \leftarrow f(n) + (n - 1) \times f(n - 2)$。</p>
<p>我们发现对于每个结点方案数不互相影响。所以总方案数为 $\prod f(\text{deg}(i))$。</p>
<p>至此问题得到圆满解决。时间复杂度 $O(n + m)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>如何判断仙人掌呢？我们搞出一棵 DFS 树，然后对于一条返祖边，我们把它两个端点在 DFS 树上的路径 $+1$。最后如果每条边的权值都 $\le 1$，则图是仙人掌。而权值为 $1$ 的边是环上的边。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span>, mod = <span class="number">998244353</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T, n, m, f[maxn + <span class="number">3</span>], deg[maxn + <span class="number">3</span>], dep[maxn + <span class="number">3</span>], cnt[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		G[i].clear(), deg[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		vis[i] = <span class="literal">false</span>, cnt[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	G[u].push_back(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	vis[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!vis[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dep[v] = dep[u] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dfs1(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			cnt[u] += cnt[v];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (dep[u] &gt; dep[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			cnt[u]++, cnt[v]--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	vis[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs2(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!cnt[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			deg[u]++, deg[v]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	f[<span class="number">0</span>] = f[<span class="number">1</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= maxn; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[i] = (f[i - <span class="number">1</span>] + <span class="number">1l</span>l * f[i - <span class="number">2</span>] * (i - <span class="number">1</span>)) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (T--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			add(u, v), add(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs1(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (cnt[i] &gt; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			flag = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (flag) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">puts</span>(<span class="string">"0"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			vis[i] = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs2(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> ans = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans = <span class="number">1l</span>l * ans * f[deg[i]] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>组合计数</tag>
      </tags>
  </entry>
  <entry>
    <title>「ZOJ 3494」BCD Code（AC 自动机 + 动态规划）</title>
    <url>/2019/06/20/20190620-ZOJ3494-BCD-Code/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://vjudge.net/problem/ZOJ-3494" target="_blank" rel="noopener">「ZOJ 3494」BCD Code</a></p>
<p>定义一个数的 BCD Code 是它的每个数码的 $4$ 位二进制表示拼接起来。给定 $n$ 个长度不超过 $20$ 的禁忌串和两个正整数 $A, B$，问 $A, B$ 之间有多少数的 BCD Code 不包含禁忌串。</p>
<p>数据范围：$n \le 100, A, B \le 10^{200}$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><blockquote>
<p>AC 自动机 + 数位 DP</p>
</blockquote>
<p>这里纯粹只是为了贴（两）个板子。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200</span>, maxm = <span class="number">2e3</span>, mod = <span class="number">1e9</span> + <span class="number">9</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str[] = &#123; <span class="string">"0000"</span>, <span class="string">"0001"</span>, <span class="string">"0010"</span>, <span class="string">"0011"</span>, <span class="string">"0100"</span>, <span class="string">"0101"</span>, <span class="string">"0110"</span>, <span class="string">"0111"</span>, <span class="string">"1000"</span>, <span class="string">"1001"</span> &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T, n, m, tot, ch[maxm + <span class="number">3</span>][<span class="number">2</span>], mrk[maxm + <span class="number">3</span>], fail[maxm + <span class="number">3</span>], dp[maxn + <span class="number">3</span>][maxm + <span class="number">3</span>][<span class="number">2</span>][<span class="number">2</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> s[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ch[x][<span class="number">0</span>] = ch[x][<span class="number">1</span>] = mrk[x] = fail[x] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> x = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!ch[x][s[i] - <span class="string">'0'</span>]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			clear(++tot);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ch[x][s[i] - <span class="string">'0'</span>] = tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x = ch[x][s[i] - <span class="string">'0'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	mrk[x] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (ch[<span class="number">1</span>][i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			fail[ch[<span class="number">1</span>][i]] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			Q.push(ch[<span class="number">1</span>][i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ch[<span class="number">1</span>][i] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (!Q.empty()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> u = Q.front();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		Q.pop();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		mrk[u] |= mrk[fail[u]];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (ch[u][i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				fail[ch[u][i]] = ch[fail[u]][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				Q.push(ch[u][i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				ch[u][i] = ch[fail[u]][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	x = (x + y &lt; mod ? x + y : x + y - mod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; <span class="number">2</span>; l++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">if</span> (!dp[i - <span class="number">1</span>][j][k][l]) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= (k ? s[i] - <span class="string">'0'</span> : <span class="number">9</span>); x++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						<span class="keyword">int</span> u = j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						<span class="keyword">if</span> (!l || x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">							<span class="keyword">const</span> <span class="keyword">char</span> *s = str[x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">							<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; <span class="number">4</span>; t++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">								u = ch[u][s[t] - <span class="string">'0'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">								<span class="keyword">if</span> (mrk[u]) flag = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">							&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						<span class="keyword">if</span> (flag) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">							add(dp[i][u][k &amp;&amp; (x == s[i] - <span class="string">'0'</span>)][l &amp;&amp; x == <span class="number">0</span>], dp[i - <span class="number">1</span>][j][k][l]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">						&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			add(ans, dp[n][i][j][<span class="number">0</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (T--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tot = <span class="number">1</span>, clear(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			m = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			insert(s, m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		build();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		m = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = m; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (s[i] == <span class="string">'0'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				s[i] = <span class="string">'9'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				s[i]--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (s[<span class="number">1</span>] == <span class="string">'0'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			m--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				s[i] = s[i + <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> ans = -solve(s, m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		m = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans += solve(s, m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans &lt; <span class="number">0</span> ? ans += mod : <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>动态规划</tag>
        <tag>AC 自动机</tag>
      </tags>
  </entry>
  <entry>
    <title>我出的一些题目</title>
    <url>/2019/06/16/20190616-My-Problems/</url>
    <content><![CDATA[<p>博主无聊时会出一些题目，难度不等。欢迎大家来玩！</p>
<p>注意：题目前带 <code>*</code> 的表示还没造完 / 已经投给某个比赛了，所以暂时不能查看。</p>
<a id="more"></a>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="星空夜"><a href="#星空夜" class="headerlink" title="星空夜"></a>星空夜</h2><p><a href="https://www.luogu.org/problemnew/show/U71500" target="_blank" rel="noopener">「Luogu U71500 / EOJ 191C」星空夜（提高组）</a></p>
<p>命题报告：<a href="/2019/07/26/20190726-EOJ191C-LCM2">「Luogu U71500 / EOJ 191C」星空夜 命题报告</a></p>
<h2 id="大白菜的疑惑"><a href="#大白菜的疑惑" class="headerlink" title="大白菜的疑惑"></a>大白菜的疑惑</h2><p><a href="https://www.luogu.org/problemnew/show/U74074" target="_blank" rel="noopener">「Luogu U74074」大白菜的疑惑（普及组）</a></p>
<p>命题报告：<a href="/2019/06/20/20190620-U74074-Math/">「Luogu U74074」大白菜的疑惑 命题报告</a></p>
<h2 id="黄队的宫殿"><a href="#黄队的宫殿" class="headerlink" title="黄队的宫殿"></a>黄队的宫殿</h2><p><a href="https://www.luogu.org/problemnew/show/U85089" target="_blank" rel="noopener">「Luogu U85089」黄队的宫殿（普及组）</a></p>
<p>命题报告：它在一个神秘的地方，自己找吧。</p>
<h2 id="草"><a href="#草" class="headerlink" title="* 草"></a>* 草</h2><p><a href="https://www.luogu.org/problem/U85053" target="_blank" rel="noopener">「Luogu U85053」草（提高组）</a></p>
<h2 id="定点飞行"><a href="#定点飞行" class="headerlink" title="* 定点飞行"></a>* 定点飞行</h2><p><a href="https://www.luogu.org/problemnew/show/U75331" target="_blank" rel="noopener">*「Luogu U75331」定点飞行（省选）</a></p>
<h2 id="拆塔"><a href="#拆塔" class="headerlink" title="* 拆塔"></a>* 拆塔</h2><p><a href="https://www.luogu.org/problemnew/show/U81838" target="_blank" rel="noopener">*「Luogu U81838」拆塔（省选）</a></p>
]]></content>
      <tags>
        <tag>出题</tag>
      </tags>
  </entry>
  <entry>
    <title>「Codeforces 464D」WoD - 2（概率论 + 动态规划）</title>
    <url>/2019/06/16/20190616-CF464D-World-of-Darkraft-2/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://codeforces.com/problemset/problem/464/D" target="_blank" rel="noopener">「Codeforces 464D」World of Darkraft - 2</a></p>
<p>有 $k$ 种装备，初始等级为 $1$（等级为整数）。共有 $n$ 只怪兽，每杀掉一只后会随机掉落一种装备。假设玩家的那件装备的等级为 $l$，则掉落的新装备的等级会在 $[1, l + 1]$ 中均匀随机。拿到装备后，玩家会保留更好的装备，并把相对差的装备卖掉，获得装备等级的收益。问期望收益。</p>
<p>数据范围：$n \le 10^5, k \le 200$，答案与标准答案绝对或相对误差不超过 $10^{-9}$ 即可。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>首先发现 $k$ 个装备是独立的，我们只需考虑一件装备即可。</p>
<p>令 $dp(i, j)$ 表示打完第 $i$ 只怪，装备等级为 $j$ 的概率。</p>
<p>考虑从 $dp(i)$ 转移到 $dp(i + 1)$。有两种情况：第一种是恰好随机到该装备，并且恰好随机到更高的等级。这样等级会增加一，概率为 $\frac{1}{k \times (j + 1)}$。第二种是其他情况，等级不会发生改变。</p>
<p>在更新 DP 的过程中，我们计算对答案的贡献。如果当前等级为 $j$，则打完一个怪后期望得到：</p>
<script type="math/tex; mode=display">\dfrac{\dfrac{(j + 1) (j + 2)}{2} - 1}{j + 1}</script><p>的收益。直接计算即可。</p>
<p>现在我们已经得到了 $O(n ^ 2)$ 的算法，但是它还不够优秀。我们考虑从题目入手，发现答案与标准答案绝对或相对误差不超过 $10^{-9}$ 即可通过本题。又发现 $dp(i, j)$ 在 $j$ 很大的时候几乎为 $0$。</p>
<p>于是我们设定阈值 $m = 800$，只计算 $j \le m$ 的 DP 值即可。时间复杂度 $O(nm)$。</p>
<p>听说 $m = O(\sqrt{n})$？看来我还是太菜了。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> db;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>, maxm = <span class="number">800</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, k;</span></pre></td></tr><tr><td class="code"><pre><span class="line">db inv[maxm + <span class="number">3</span>], dp[<span class="number">2</span>][maxm + <span class="number">3</span>], ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	m = min(n + <span class="number">1</span>, maxm);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxm + <span class="number">1</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		inv[i] = (db) <span class="number">1</span> / i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> cur = <span class="number">0</span>, nxt = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dp[cur][<span class="number">1</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dp[nxt][j] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			db x = inv[k] * inv[j + <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dp[nxt][j] += dp[cur][j] * (<span class="number">1</span> - x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dp[nxt][j + <span class="number">1</span>] += dp[cur][j] * x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans += dp[cur][j] * ((j + <span class="number">1</span>) * (j + <span class="number">2</span>) / <span class="number">2</span> - <span class="number">1</span>) * inv[j + <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		swap(cur, nxt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">double</span> res = ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%.18lf\n"</span>, res);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>动态规划</tag>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>「EOJ 181B」Bits（数据分治）</title>
    <url>/2019/06/15/20190615-EOJ181B-Bits/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给定一个长度为 $n$ 的 01 串和一个正整数 $m$。你要进行一系列操作，将串变为有长度为 $m$ 的循环节的串。操作一共有两种：</p>
<ul>
<li>将串的某一位反转。</li>
<li>将串的一个长度为 $k \times m$ 的前缀全部反转。其中 $1 \le k \le \frac{n}{m}$。</li>
</ul>
<p>问至少进行几次操作。</p>
<p>数据范围：$n \le 300, m \le n$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>我们令 $M = \lfloor \frac{n}{m} \rfloor$。</p>
<p>先考虑 $m$ 较大的情况。</p>
<p>发现第二种操作最多只有 $M$ 种，我们暴力枚举每个操作是否使用，然后对于操作后的串计算使用第一种操作最少的次数即可。复杂度看似是 $2^M \times n$ 的，但实际上可以通过 DFS 来优化到 $O(2^M \times m)$。</p>
<p>再考虑 $m$ 较小的情况。</p>
<p>发现最终得到的串最多只有 $2^m$ 种，我们枚举每个串，然后处理出那些位置需要被反转，再用 DP 来计算最少修改次数即可。当然，也可以对于 $2^m$ 个串整体进行一次 DP。注意为了无后效性，DP 要倒序做。时间复杂度 $O(2^m \times M)$。</p>
<p>所以，我们当 $m \ge \sqrt{n}$ 的时候用第一种方案，否则用第二种方案即可。总时间复杂度：</p>
<script type="math/tex; mode=display">O(2^{\sqrt{n}} \times \sqrt{n})</script><p>（为啥这个题 $n$ 不出到 $400$ 啊 QAQ）</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">300</span>, maxm = <span class="number">1</span> &lt;&lt; <span class="number">18</span>, inf = <span class="number">2e9</span> + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> s[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> subtask1 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> k, a[maxn + <span class="number">3</span>], c[maxn + <span class="number">3</span>][<span class="number">2</span>], ans = maxn;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> d, <span class="keyword">int</span> sum)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!d) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				sum += min(c[i][<span class="number">0</span>], c[i][<span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans = min(ans, sum);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; <span class="number">2</span>; t++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[d] = t;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				c[i][s[(d - <span class="number">1</span>) * m + i] - <span class="string">'0'</span> != t]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dfs(d - <span class="number">1</span>, sum + (a[d] != a[d + <span class="number">1</span>]));</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				c[i][s[(d - <span class="number">1</span>) * m + i] - <span class="string">'0'</span> != t]--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		k = n / m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = m * k + <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			c[i - m * k][s[i] - <span class="string">'0'</span>]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(k, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> subtask2 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> k, dp[<span class="number">2</span>][maxm + <span class="number">3</span>][<span class="number">2</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">bit_cnt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> __builtin_popcount(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">diff</span><span class="params">(<span class="keyword">int</span> msk1, <span class="keyword">int</span> msk2)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> bit_cnt(msk1 ^ msk2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x &gt; y ? x = y : <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		k = n / m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> bot = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = m * k + <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			bot = bot &lt;&lt; <span class="number">1</span> | (s[i] - <span class="string">'0'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> cur = <span class="number">0</span>, lst = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">memset</span>(dp[cur], <span class="number">0x3c</span>, <span class="keyword">sizeof</span>(dp[cur]));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> msk = <span class="number">0</span>; msk &lt; <span class="number">1</span> &lt;&lt; m; msk++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dp[cur][msk][<span class="number">0</span>] = diff(bot, msk &gt;&gt; (m - n + m * k));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = k; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			swap(cur, lst);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">memset</span>(dp[cur], <span class="number">0x3c</span>, <span class="keyword">sizeof</span>(dp[cur]));</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> num = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				num = num &lt;&lt; <span class="number">1</span> | (s[(i - <span class="number">1</span>) * m + j] - <span class="string">'0'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> msk = <span class="number">0</span>; msk &lt; <span class="number">1</span> &lt;&lt; m; msk++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; <span class="number">2</span>; t++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						upd(dp[cur][msk][t], dp[lst][msk][j] + (j ^ t) + diff(num ^ (t ? (<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span> : <span class="number">0</span>), msk));</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> ans = inf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> msk = <span class="number">0</span>; msk &lt; <span class="number">1</span> &lt;&lt; m; msk++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans = min(ans, min(dp[cur][msk][<span class="number">0</span>], dp[cur][msk][<span class="number">1</span>]));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s %d"</span>, s + <span class="number">1</span>, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (m &gt; <span class="number">18</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		subtask1::main();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		subtask2::main();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数据分治</tag>
      </tags>
  </entry>
  <entry>
    <title>「EOJ 181D」Diode（构造）</title>
    <url>/2019/06/15/20190615-EOJ181D-Diode/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给定一个 $n$ 个点 $m$ 条边的有向无环图，要求给每条边染成红，蓝，绿三种颜色中的一种，使图中不存在任何长度 $&gt; 40$ 的路径（路径的长度定义为它包含的边数），使得路径上所有的边颜色相同。</p>
<p>数据范围：$n \le 5 \times 10^4, m \le 2 \times 10^5$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>考虑按照拓扑序构造。</p>
<p>假设已经得到了图中的一个拓扑序列 $p_1, p_2, \cdots, p_n$。考虑将它们每连续 $40$ 个分成一个小组，每 $40^2 = 1600$ 个分成一个大组。</p>
<p>对于每条边，如果它联结的两个点在同一个小组内部，就染成红色；否则如果它联结的两个点在同一个大组内部，就染成绿色；否则染成蓝色。</p>
<p>不难发现所有红色路径都被限制在在小组内部，所有绿色路径都被限制在大组内部，并且每次必须横跨一个小组，而所有蓝色路径每次必须横跨一个大组，所以每种路径的长度都 $&lt;40$，即该构造是合法的。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span>, maxm = <span class="number">2e5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, u[maxm + <span class="number">3</span>], v[maxm + <span class="number">3</span>], deg[maxn + <span class="number">3</span>], tot, b1[maxn + <span class="number">3</span>], b2[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u[i], &amp;v[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		deg[v[i]]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		G[u[i]].push_back(v[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!deg[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		Q.push(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (!Q.empty()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> u = Q.front();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		Q.pop();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		b1[u] = tot / <span class="number">40</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		b2[u] = tot / <span class="number">1600</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tot++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> v: G[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (!--deg[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				Q.push(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b1[u[i]] == b1[v[i]]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">puts</span>(<span class="string">"R"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b2[u[i]] == b2[v[i]]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">puts</span>(<span class="string">"G"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">puts</span>(<span class="string">"B"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>「EOJ 181H」Hash（随机化）</title>
    <url>/2019/06/15/20190615-EOJ181H-Hash/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给定一个长度不超过 $14$ 的字符串，以及素数 $m$ 和正整数 $p (p &gt; 1)$。要求构造一个长度不超过 $14$ 的字符串，它不等于原字符串，并且以 $p$ 为进制，$m$ 为模数的哈希值等于原串的哈希值。</p>
<p>字符集大小为 $63$，$m \le 10^{12}, p \le 2000, p^{13} &gt; m$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>考虑 BSGS 算法。</p>
<p>我们先随机 $k$ 个长度为 $7$ 的串，将哈希值存进 <code>std::unordered_map</code> 中。再随机多个长度为 $7$ 的串，每次将这个串放在答案串的前半段中，再在 map 中查询后半段是否有串可以拼上去，满足整个串的哈希值为目标哈希值。找到后输出答案并退出即可。</p>
<p>我们将一个串的哈希值看作是 $[0, m)$ 中的随机数。不难发现期望只需要随机 $\frac{m}{k}$ 次。故 $k$ 取 $\sqrt{m}$ 最优，时间复杂度 $O(\sqrt m)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">14</span>, maxm = <span class="number">1e6</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, p, k;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> s[maxn + <span class="number">3</span>], ch[<span class="number">100</span>], t[<span class="number">10</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll m, goal;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">unordered_map</span>&lt;ll, <span class="keyword">int</span>&gt; mp;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">string7</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">char</span> s[<span class="number">7</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll h;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; s7[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	srand(<span class="number">19260817</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ch[k++] = <span class="string">'a'</span> + i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ch[k++] = <span class="string">'A'</span> + i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ch[k++] = <span class="string">'0'</span> + i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ch[k++] = <span class="string">'_'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxm; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ll &amp;x = s7[i].h;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			s7[i].s[j] = ch[rand() % k];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			x = (x * p + s7[i].s[j]) % m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		mp[x] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s %lld %d"</span>, s, &amp;m, &amp;p);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	n = <span class="built_in">strlen</span>(s);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		goal = (goal * p + s[i]) % m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	prework();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll p7 = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		p7 = p7 * p % m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ll x = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			t[i] = ch[rand() % k];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			x = (x * p + t[i]) % m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x = (__int128) x * p7 % m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ll d = goal - x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		d &lt; <span class="number">0</span> ? d += m : <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (mp.count(d)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> id = mp[d];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">printf</span>(<span class="string">"%s"</span>, t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">puts</span>(s7[id].s);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>随机化</tag>
      </tags>
  </entry>
  <entry>
    <title>「BZOJ 4318」OSU!（概率论 + 动态规划）</title>
    <url>/2019/06/08/20190608-BZOJ4318-OSU!/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4318" target="_blank" rel="noopener">「BZOJ 4318」OSU!</a></p>
<p>有一个长度为 $n$ 的 $01$ 串，第 $i$ 位有 $p_i$ 的概率为 $1$，有 $1 - p_i$ 的概率为 $0$。每一段长度为 $x$ 的极长的 $1$ 对得分有 $x^3$ 的贡献。问期望得分。</p>
<p>数据范围：$n \le 10^5$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>考虑第 $i$ 位把答案增加了多少。如果它为 $0$，则没有贡献，否则它的贡献为：$(x + 1) - x ^ 3 = 3 x ^ 2 + 3  x + 1$，其中 $x$ 是第 $i - 1$ 为往前的最长的一段 $1$。于是，我们成功的把三次的问题降成了两次。</p>
<p>接下来考虑维护第 $i$ 位往前的最长连续 $1$ 的期望长度的平方。同样地，发现 $(x + 1) ^ 2 - x ^ 2 = 2 x + 1$，于是我们把二次问题降成了一次。</p>
<p>最后考虑维护第 $i$ 位往前的最长连续 $1$ 的期望长度。同样是分 $0, 1$ 讨论，容易得出递推公式。具体实现见代码。</p>
<p>时间复杂度：$O(n)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">db x, dp[maxn + <span class="number">3</span>][<span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dp[i][<span class="number">0</span>] = (dp[i - <span class="number">1</span>][<span class="number">0</span>] + <span class="number">1</span>) * x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dp[i][<span class="number">1</span>] = (dp[i - <span class="number">1</span>][<span class="number">1</span>] + dp[i - <span class="number">1</span>][<span class="number">0</span>] * <span class="number">2</span> + <span class="number">1</span>) * x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dp[i][<span class="number">2</span>] = dp[i - <span class="number">1</span>][<span class="number">2</span>] + (dp[i - <span class="number">1</span>][<span class="number">1</span>] * <span class="number">3</span> + dp[i - <span class="number">1</span>][<span class="number">0</span>] * <span class="number">3</span> + <span class="number">1</span>) * x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%.1lf\n"</span>, dp[n][<span class="number">2</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>动态规划</tag>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>「EOJ 181E」Entropy 乱搞记</title>
    <url>/2019/06/08/20190608-EOJ181E-Entropy/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>定义一个字符串的熵为：</p>
<script type="math/tex; mode=display">- \sum_{c} p_{c} \times \log_2 p_{c}</script><p>其中 $p_{c}$ 为字符 $c$ 在字符串中的占比。例如 <code>aaabb</code> 中 $p_a = 0.6$。</p>
<p>给定实数 $x$，要求构造一个长度不超过 $10^3$，字符集大小不超过 $64$ 的字符串，它的熵 $y$ 满足 $\vert x - y \vert \le 5 \times 10 ^ {-3}$。</p>
<p>数据范围：$0 \le x \le 6$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>我不知道标算是什么，但是我会乱搞。</p>
<p>首先我们规定所有串的长度都为 $10^3$ 左右。</p>
<p>发现字符集 $\le 4$ 的时候我们可以枚举出每一种情况。我们在本地打出表，发现这已经可以覆盖 $0 \le x \le 2$ 的所有情况。于是我们只需解决 $2 &lt; x \le 6$ 的情况。</p>
<p>考虑 $6$ 的构造，是串中 $64$ 种字符的出现次数相同。我们考虑在此基础上进行偏移。先构造出一个 $64$ 个字符每个都出现了 $15$ 次的字符串（总长度为 $960$），然后每次随机两个字符，一个出现次数 $+1$，一个出现次数 $-1$。经过多轮微调后，熵会变得越来越小。发现它可以解决 $5.7 &lt; x \le 6$（甚至更多）的情况。</p>
<p>现在我们还剩下 $2 &lt; x \le 5.7$ 的情况。考虑固定字符集大小，随机每个字符的出现次数。由于我们要求出现次数的和恰好为 $10^3$，我们可以采用隔板法来随机。多次随机后取最优解输出。经过不断的尝试，有如下发现：</p>
<ul>
<li>$2 &lt; x \le 3$ 时，字符集大小为 $12$ 最为合适。  </li>
<li>$3 &lt; x \le 4$ 时，字符集大小为 $20$ 最为合适。  </li>
<li>$4 &lt; x \le 4.8$ 时，字符集大小为 $36$ 最为合适。  </li>
<li>$4.8 &lt; x \le 5.5$ 时，字符集大小为 $56$ 最为合适。  </li>
<li>$5.5 &lt; x \le 5.7$ 时，字符集大小为 $64$ 最为合适。</li>
</ul>
<p>于是我们根据 $x$ 设定参数即可。至此所有情况被完全覆盖，我们已经可以解决这个问题了。</p>
<p><img src="/images/20190608-EOJ181E-Entropy-1.png" alt="AC 截图"></p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">1000</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">db x;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> part1 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> cnt[<span class="number">205</span>][<span class="number">5</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">get_cnt</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="comment">// 此处是一张大表，在此由于篇幅原因已经省略</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="comment">// 你可以在 https://paste.ubuntu.com/p/2JVdnFMSpR/ 处找到这张表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(db x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		get_cnt();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> y = x * <span class="number">100</span> + <span class="number">.5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt[y][k]; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="built_in">putchar</span>(<span class="string">'a'</span> + k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">puts</span>(<span class="string">""</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> part2 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span> ch[] = &#123;<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>, <span class="string">' '</span>, <span class="string">'.'</span>&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">const</span> db t = <span class="number">1.</span> / <span class="built_in">log</span>(<span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">1000</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> a[n + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">bool</span> vis[n + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function">db <span class="title">my_abs</span><span class="params">(db x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> x &lt; <span class="number">0</span> ? -x : x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function">db <span class="title">func</span><span class="params">(db x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (x &lt; <span class="number">1e-9</span>) <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> -x * <span class="built_in">log</span>(x) * t;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(db num, <span class="keyword">int</span> m)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		srand(<span class="number">19491001</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; ; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> x = rand() % (n - <span class="number">1</span>) + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">while</span> (vis[x]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					x = rand() % (n - <span class="number">1</span>) + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				vis[x] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				a[i] = x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[<span class="number">1</span>] = <span class="number">0</span>, a[m + <span class="number">1</span>] = <span class="number">1000</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			sort(a + <span class="number">1</span>, a + m + <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			db sum = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				sum += func((a[i + <span class="number">1</span>] - a[i]) / <span class="number">1000.</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				vis[a[i]] = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (my_abs(sum - num) &lt; <span class="number">0.005</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = a[i]; j &lt; a[i + <span class="number">1</span>]; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						<span class="built_in">putchar</span>(ch[i - <span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="built_in">puts</span>(<span class="string">""</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> part3 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span> ch[] = &#123;<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>, <span class="string">' '</span>, <span class="string">'.'</span>&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">960</span>, m = <span class="number">64</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">const</span> db t = <span class="number">1</span> / <span class="built_in">log</span>(<span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> c[m + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function">db <span class="title">func</span><span class="params">(db x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (x &lt; <span class="number">1e-9</span>) <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> -x * <span class="built_in">log</span>(x) * t;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function">db <span class="title">my_abs</span><span class="params">(db x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> x &lt; <span class="number">0</span> ? -x : x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(db x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		srand(<span class="number">19260817</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			c[i] = <span class="number">15</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		db s = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			s += func(<span class="number">1.</span> * c[i] / n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; ; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (my_abs(x - s) &lt; <span class="number">0.005</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; c[i]; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						<span class="built_in">putchar</span>(ch[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="built_in">puts</span>(<span class="string">""</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> x = rand() % m, y = rand() % m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">while</span> (!c[y]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				y = rand() % m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			s -= func(<span class="number">1.</span> * c[x] / n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			s -= func(<span class="number">1.</span> * c[y] / n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			c[x]++, c[y]--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			s += func(<span class="number">1.</span> * c[x] / n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			s += func(<span class="number">1.</span> * c[y] / n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (x &lt;= <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		part1::main(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt;= <span class="number">3</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		part2::main(x, <span class="number">12</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt;= <span class="number">4</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		part2::main(x, <span class="number">20</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt;= <span class="number">4.8</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		part2::main(x, <span class="number">36</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt;= <span class="number">5.5</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		part2::main(x, <span class="number">56</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt;= <span class="number">5.7</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		part2::main(x, <span class="number">64</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		part3::main(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>乱搞</tag>
        <tag>随机化</tag>
      </tags>
  </entry>
  <entry>
    <title>「Codeforces 528D」Fuzzy Search（多项式）</title>
    <url>/2019/05/29/20190529-CF528D-Fuzzy-Search/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://codeforces.com/problemset/problem/528/D" target="_blank" rel="noopener">「Codeforces 528D」Fuzzy Search</a></p>
<p>给定两个字符串 $S, T$（只包含 $4$ 个字母）和非负整数 $k$，定义模式串和文本串的一段是模糊匹配的，当且仅当对于模式串中的每个位置 $i$，都能在文本串中找到字符 $S_j = T_i$ 且 $\vert i - j \vert \le k$。</p>
<p>问模式串被匹配了几次。</p>
<p>我们记 $n = \vert S \vert, m = \vert T \vert$。</p>
<p>数据范围：$n, m, k \le 2 \times 10^5$。</p>
<a id="more"></a>
<p>$k = 1$ 时的样例：<br><img src="/images/20190529-CF528D-Fuzzy-Search-1.png" alt="样例图示"></p>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>由于字符集很小，我们考虑对于每种字符计算它能在那些位置出现。这显然可以通过差分 + 前缀和在线性时间内解决。</p>
<p>我们将字符 $ch$ 的可出现位置集合看作一个 01 串 $A(ch)$，那么答案就等于对于每个 $1 \le i \le m$，$A(T_i)$ 左移 $m - i$ 位后得到的 $m$ 个 01 串的交的大小。</p>
<p>于是我们可以对模式串中每个不同的字母构造多项式 $B_{ch}$，和 $A_{ch}$ 相乘后的多项式中，某项系数对应的位置合法当且仅当它的系数等于 $T$ 中 $ch$ 出现的次数。所以计算完这些我们最后就只需计算 $4$ 个 01 串的交。</p>
<p>时间复杂度瓶颈在于卷积，用 FFT 可以优化到 $O(n \log n)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>, maxm = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> db pi = <span class="built_in">acos</span>(<span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, L, M[<span class="number">200</span>], a[<span class="number">5</span>][maxn + <span class="number">3</span>], b[<span class="number">5</span>][maxn + <span class="number">3</span>], c[<span class="number">5</span>][maxn + <span class="number">3</span>], k, rev[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> s[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	db r, i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">complex</span>(db r = <span class="number">0</span>, db i = <span class="number">0</span>): r(r), i(i) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">friend</span> <span class="keyword">complex</span> <span class="keyword">operator</span>+ (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;a, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="keyword">complex</span>(a.r + b.r, a.i + b.i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">friend</span> <span class="keyword">complex</span> <span class="keyword">operator</span>- (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;a, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="keyword">complex</span>(a.r - b.r, a.i - b.i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">friend</span> <span class="keyword">complex</span> <span class="keyword">operator</span>* (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;a, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="keyword">complex</span>(a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">friend</span> <span class="keyword">complex</span> <span class="keyword">operator</span>/ (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;a, <span class="keyword">const</span> db &amp;b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="keyword">complex</span>(a.r / b, a.i / b);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">complex</span> A[maxm + <span class="number">3</span>], B[maxm + <span class="number">3</span>], C[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dft</span><span class="params">(<span class="keyword">complex</span> a[], <span class="keyword">int</span> n, <span class="keyword">int</span> type)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (i &lt; rev[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		swap(a[i], a[rev[i]]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n; k *= <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">complex</span> x = <span class="keyword">complex</span>(<span class="built_in">cos</span>(pi / k), type * <span class="built_in">sin</span>(pi / k));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += k * <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">complex</span> y = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + k; j++, y = x * y) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">complex</span> p = a[j], q = a[j + k] * y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				a[j] = p + q, a[j + k] = p - q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (type == <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[i] = a[i] / n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> M[ch];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	M[<span class="string">'A'</span>] = <span class="number">0</span>, M[<span class="string">'T'</span>] = <span class="number">1</span>, M[<span class="string">'G'</span>] = <span class="number">2</span>, M[<span class="string">'C'</span>] = <span class="number">3</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d %d %s"</span>, &amp;n, &amp;m, &amp;L, s + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = id(s[i]), l = max(<span class="number">1</span>, i - L), r = min(n, i + L);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a[x][l - <span class="number">1</span>]++, a[x][r]--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[k][i] += a[k][i - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[k][i] = a[k][i] &gt; <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		b[id(s[i])][m - i] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (k = <span class="number">0</span>; <span class="number">1</span> &lt;&lt; k &lt;= n + m - <span class="number">2</span>; k++);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1</span> &lt;&lt; k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (k - <span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; <span class="number">4</span>; t++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			A[i] = a[t][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; <span class="number">1</span> &lt;&lt; k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			A[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m - <span class="number">1</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			B[i] = b[t][i], sum += b[t][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &lt; <span class="number">1</span> &lt;&lt; k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			B[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dft(A, <span class="number">1</span> &lt;&lt; k, <span class="number">1</span>), dft(B, <span class="number">1</span> &lt;&lt; k, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			C[i] = A[i] * B[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dft(C, <span class="number">1</span> &lt;&lt; k, <span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> x = C[i].r + <span class="number">.5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (x == sum) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				c[t][i + <span class="number">1</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (c[<span class="number">0</span>][i] &amp;&amp; c[<span class="number">1</span>][i] &amp;&amp; c[<span class="number">2</span>][i] &amp;&amp; c[<span class="number">3</span>][i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h1><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4259" target="_blank" rel="noopener">「BZOJ 4259」残缺的字符串（权限题）</a></p>
]]></content>
      <tags>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title>「Codeforces 1096G」Lucky Tickets（生成函数 + 多项式）</title>
    <url>/2019/05/28/20190528-CF1096G-Lucky-Tickets/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://codeforces.com/problemset/problem/1096/G" target="_blank" rel="noopener">「Codeforces 1096G」Lucky Tickets</a></p>
<p>给定偶数 $n$ 和 $k$ 个数位，求长度为 $n$ 的数字串，满足只使用给定的数位，且前 $\frac{n}{2}$ 位的和等于后 $\frac{n}{2}$ 位的和的个数 $\bmod 998244353$ 的结果。</p>
<p>数据范围：$n \le 2 \times 10^5$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>记 $A_i$ 表示使用给定数位，$\frac{n}{2}$ 位的和为 $i$ 的方案数，那么答案为 $\sum_{i = 0}^{\infty}A_i^2$，于是我们只需求 $A$ 即可。</p>
<p>发现 $A$ 是由给定数位形成的生成函数的 $\frac{n}{2}$ 次方，因为生成函数的次数不超过 $9$，所以 $A$ 的最大次数不超过 $4.5n$，用 NTT 求解即可。 时间复杂度 $O(n \log n)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>, mod = <span class="number">998244353</span>, g = <span class="number">3</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, q, k, rev[maxn + <span class="number">3</span>], a[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y = mod)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x &lt; <span class="number">0</span> ? x + y : x &lt; y ? x : x - y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> c = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="number">1l</span>l * a * a % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = <span class="number">1l</span>l * a * c % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dft</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n, <span class="keyword">int</span> type)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (i &lt; rev[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		swap(a[i], a[rev[i]]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n; k *= <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = qpow(g, func(type * (mod - <span class="number">1</span>) / (k * <span class="number">2</span>), mod - <span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span> * k) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> y = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + k; j++, y = <span class="number">1l</span>l * x * y % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> p = a[j], q = <span class="number">1l</span>l * a[j + k] * y % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				a[j] = func(p + q), a[j + k] = func(p - q);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (type == <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = qpow(n, mod - <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[i] = <span class="number">1l</span>l * a[i] * x % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;q);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	n /= <span class="number">2</span>, m = n * <span class="number">9</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> x; q--; ) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a[x] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (k = <span class="number">0</span>; <span class="number">1</span> &lt;&lt; k &lt; m; k++);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1</span> &lt;&lt; k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (k - <span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dft(a, <span class="number">1</span> &lt;&lt; k, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a[i] = qpow(a[i], n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dft(a, <span class="number">1</span> &lt;&lt; k, <span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans = (ans + <span class="number">1l</span>l * a[i] * a[i]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>多项式</tag>
        <tag>生成函数</tag>
      </tags>
  </entry>
  <entry>
    <title>「AHOI / HNOI 2017」礼物（生成函数 + 多项式）</title>
    <url>/2019/05/27/20190527-AHOI2017-Gift/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.luogu.org/problemnew/show/P3723" target="_blank" rel="noopener">「AHOI / HNOI 2017」礼物（Luogu 3723）</a></p>
<p>有两个长度为 $n$ 的手环，每个位置上的亮度分别为 $x_1, x_2, \cdots, x_n$ 和 $y_1, y_2, \cdots, y_n$，它们都是 $[1, m]$ 中的整数。你可以给某个手环整体加上 $c$（整数），并将它旋转（循环位移）$k$ 位，然后使得 $\sum_{i = 1}^{n} (x_i - y_i) ^ 2$ 最小。</p>
<p>数据范围：$n \le 5 \times 10^4, 1 \le m \le 100$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>我们先假设手环已经旋转完成，我们考虑如何选择最好的 $c$。可以发现：</p>
<script type="math/tex; mode=display">
\begin {align}
\sum (x_i - y_i + c)^2 &= \sum c^2 +  (2 \times \sum x_i - y_i) \times c + \sum (x_i - y_i) ^ 2 \\
&= nc^2 + (2 \times \sum x_i - y_i) \times c + (\sum x_i^2 + y_i^2) - 2 \sum x_iy_i
\end {align}</script><p>和 $c$ 相关的是一个二次函数，其中二次项和一次项都为定值，所以我们可以求出二次函数的最小值。常数项中前面一项也是定值，而后面一项会变化，于是我们只要找到后面一项的最小值即可。换而言之，我们要找到进行循环移位后最小的：</p>
<script type="math/tex; mode=display">\sum_{i = 1}^{n} x_iy_i</script><p>考虑对于每个 $k$ 算出上式。发现这是一个卷积的变形形式，我们只需将一个数组翻转，另一个数组倍长后做一次卷积即可。那么通过 FFT，可以将复杂度做到 $O(n \log n)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span>, maxm = <span class="number">1</span> &lt;&lt; <span class="number">18</span>, inf = <span class="number">1e9</span> + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> db pi = <span class="built_in">acos</span>(<span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, k, x[maxn + <span class="number">3</span>], y[maxn + <span class="number">3</span>], rev[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    db r, i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">complex</span>(db r = <span class="number">0</span>, db i = <span class="number">0</span>): r(r), i(i) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">friend</span> <span class="keyword">complex</span> <span class="keyword">operator</span>+ (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;a, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">complex</span>(a.r + b.r, a.i + b.i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">friend</span> <span class="keyword">complex</span> <span class="keyword">operator</span>- (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;a, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">complex</span>(a.r - b.r, a.i - b.i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">friend</span> <span class="keyword">complex</span> <span class="keyword">operator</span>* (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;a, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">complex</span>(a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">friend</span> <span class="keyword">complex</span> <span class="keyword">operator</span>/ (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;a, <span class="keyword">const</span> db &amp;b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">complex</span>(a.r / b, a.i / b);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">complex</span> a[maxm + <span class="number">3</span>], b[maxm + <span class="number">3</span>], c[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dft</span><span class="params">(<span class="keyword">complex</span> a[], <span class="keyword">int</span> n, <span class="keyword">int</span> type)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (i &lt; rev[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        swap(a[i], a[rev[i]]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n; k *= <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">complex</span> x = <span class="keyword">complex</span>(<span class="built_in">cos</span>(pi / k), type * <span class="built_in">sin</span>(pi / k));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += k * <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">complex</span> y = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + k; j++, y = x * y) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">complex</span> p = a[j], q = a[j + k] * y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                a[j] = p + q, a[j + k] = p - q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (type == <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            a[i] = a[i] / n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> p = n, q = <span class="number">0</span>, r = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        q += <span class="number">2</span> * x[i], r += x[i] * x[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;y[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        q -= <span class="number">2</span> * y[i], r += y[i] * y[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> ans = inf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = -m; x &lt;= m; x++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ans = min(<span class="number">1l</span>l * ans, <span class="number">1l</span>l * p * x * x + <span class="number">1l</span>l * q * x + r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a[n - i] = x[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        b[i - <span class="number">1</span>] = b[n + i - <span class="number">1</span>] = y[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; <span class="number">1</span> &lt;&lt; k &lt;= <span class="number">3</span> * n - <span class="number">2</span>; k++);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1</span> &lt;&lt; k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (k - <span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dft(a, <span class="number">1</span> &lt;&lt; k, <span class="number">1</span>), dft(b, <span class="number">1</span> &lt;&lt; k, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        c[i] = a[i] * b[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dft(c, <span class="number">1</span> &lt;&lt; k, <span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> res = -inf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &lt; <span class="number">2</span> * n - <span class="number">1</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        res = max(res, <span class="keyword">int</span>(c[i].r + <span class="number">.5</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ans -= <span class="number">2</span> * res;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title>「学习笔记」快速傅立叶变换</title>
    <url>/2019/05/26/20190526-Fast-Fourier-Transformation/</url>
    <content><![CDATA[<p>快速傅立叶变换（Fast Fourier Transformation）可以将多项式在系数表示法和（单位复根的）点值表示法之间互相转化，而它的时间复杂度仅为 $O(n \log n)$。</p>
<h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><p><a href="https://algocode.net/2018/05/03/20180503-KB-Fast-Fourier-Transform/" target="_blank" rel="noopener">Algocode 算法博客</a></p>
<a id="more"></a>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>快速傅立叶变换（FFT）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>, maxm = <span class="number">1</span> &lt;&lt; <span class="number">18</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> db pi = <span class="built_in">acos</span>(<span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, k, rev[maxm + <span class="number">3</span>], ans[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	db r, i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">complex</span>(db r = <span class="number">0</span>, db i = <span class="number">0</span>): r(r), i(i) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">friend</span> <span class="keyword">complex</span> <span class="keyword">operator</span>+ (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;a, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="keyword">complex</span>(a.r + b.r, a.i + b.i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">friend</span> <span class="keyword">complex</span> <span class="keyword">operator</span>- (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;a, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="keyword">complex</span>(a.r - b.r, a.i - b.i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">friend</span> <span class="keyword">complex</span> <span class="keyword">operator</span>* (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;a, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="keyword">complex</span>(a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">friend</span> <span class="keyword">complex</span> <span class="keyword">operator</span>/ (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;a, <span class="keyword">const</span> db &amp;b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="keyword">complex</span>(a.r / b, a.i / b);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">complex</span> a[maxm + <span class="number">3</span>], b[maxm + <span class="number">3</span>], c[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dft</span><span class="params">(<span class="keyword">complex</span> a[], <span class="keyword">int</span> n, <span class="keyword">int</span> type)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (i &lt; rev[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		swap(a[i], a[rev[i]]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n; k *= <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">complex</span> x = <span class="keyword">complex</span>(<span class="built_in">cos</span>(pi / k), type * <span class="built_in">sin</span>(pi / k));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += k * <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">complex</span> y = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + k; j++, y = x * y) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">complex</span> p = a[j], q = a[j + k] * y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				a[j] = p + q, a[j + k] = p - q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (type == <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[i] = a[i] / n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x), a[i].r = x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x), b[i].r = x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (k = <span class="number">0</span>; <span class="number">1</span> &lt;&lt; k &lt;= n + m; k++);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1</span> &lt;&lt; k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (k - <span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dft(a, <span class="number">1</span> &lt;&lt; k, <span class="number">1</span>), dft(b, <span class="number">1</span> &lt;&lt; k, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		c[i] = a[i] * b[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dft(c, <span class="number">1</span> &lt;&lt; k, <span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans[i] = c[i].r + <span class="number">.5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], <span class="string">" \n"</span>[i == n + m]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>快速数论变换（NTT）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>, maxm = <span class="number">1</span> &lt;&lt; <span class="number">18</span>, mod = <span class="number">998244353</span>, g = <span class="number">3</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, k, rev[maxm + <span class="number">3</span>], a[maxm + <span class="number">3</span>], b[maxm + <span class="number">3</span>], c[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y = mod)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x &lt; <span class="number">0</span> ? x + y : x &lt; y ? x : x - y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> c = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="number">1l</span>l * a * a % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = <span class="number">1l</span>l * a * c % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dft</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n, <span class="keyword">int</span> type)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (i &lt; rev[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		swap(a[i], a[rev[i]]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n; k *= <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = qpow(g, func(type * (mod - <span class="number">1</span>) / (k * <span class="number">2</span>), mod - <span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span> * k) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> y = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + k; j++, y = <span class="number">1l</span>l * x * y % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> p = a[j], q = <span class="number">1l</span>l * a[j + k] * y % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				a[j] = func(p + q), a[j + k] = func(p - q);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (type == <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = qpow(n, mod - <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[i] = <span class="number">1l</span>l * a[i] * x % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (k = <span class="number">0</span>; <span class="number">1</span> &lt;&lt; k &lt;= n + m; k++);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1</span> &lt;&lt; k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (k - <span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dft(a, <span class="number">1</span> &lt;&lt; k, <span class="number">1</span>), dft(b, <span class="number">1</span> &lt;&lt; k, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		c[i] = <span class="number">1l</span>l * a[i] * b[i] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dft(c, <span class="number">1</span> &lt;&lt; k, <span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d%c"</span>, c[i], <span class="string">" \n"</span>[i == n + m]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title>「Codeforces 19E」Fairy（DFS）</title>
    <url>/2019/05/23/20190523-CF19E-Fairy/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://codeforces.com/problemset/problem/19/E" target="_blank" rel="noopener">「Codeforces 19E」Fairy</a></p>
<p>给定一个 $n$ 个结点 $m$ 条边的无向联通图，问删去那些边后图是二分图。</p>
<p>$n, m \le 10^4$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>图是二分图的充要条件是图中不存在长度为奇数的环。</p>
<p>无向图中的任意一个环都可以用 DFS 树上返祖边形成的环的 Xor 组成。</p>
<p>先搞出图的一棵 DFS 树，然后把返祖边构成的环拿出来。如果没有任何一个环长度为奇数的话，则所有边都可以删。</p>
<p>如果至少有一个奇环，则删去的边首先应该在这些环的交上，否则会有奇环出现。并且，它们不能被任意一个偶环所包含，否则它属于的一个奇环和那个偶环会形成一个新的奇环，即使删掉了这条边也无法清除奇环。</p>
<p>有了上述结论，我们就可以使用树上差分来解决问题了。时间复杂度 $O(n + m)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, k, a[maxn + <span class="number">3</span>], u[maxn + <span class="number">3</span>], v[maxn + <span class="number">3</span>], fa[maxn + <span class="number">3</span>], dep[maxn + <span class="number">3</span>], Co, Ce, So[maxn + <span class="number">3</span>], Se[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    vis[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (!vis[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            fa[v] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            dep[v] = dep[u] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            dfs(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v != fa[u] &amp;&amp; dep[u] &gt; dep[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">int</span> len = dep[u] - dep[v] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (len &amp; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Co++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                So[u]++, So[v]--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Ce++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Se[u]++, Se[v]--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_sum</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    vis[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (!vis[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            dfs_sum(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            So[u] += So[v];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Se[u] += Se[v];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u[i], &amp;v[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        G[u[i]].push_back(v[i]), G[v[i]].push_back(u[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!vis[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        dfs(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fill(vis + <span class="number">1</span>, vis + n + <span class="number">1</span>, <span class="literal">false</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!vis[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        dfs_sum(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (dep[u[i]] &lt; dep[v[i]]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            swap(u[i], v[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (Co == <span class="number">0</span> || (Co == <span class="number">1</span> &amp;&amp; dep[u[i]] != dep[v[i]] + <span class="number">1</span> &amp;&amp; (dep[u[i]] - dep[v[i]] + <span class="number">1</span>) &amp; <span class="number">1</span>) || (dep[u[i]] == dep[v[i]] + <span class="number">1</span> &amp;&amp; So[u[i]] == Co &amp;&amp; Se[u[i]] == <span class="number">0</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            a[++k] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, a[i], <span class="string">" \n"</span>[i == k]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>「SDOI 2018」战略游戏（圆方树 + 虚树）</title>
    <url>/2019/05/22/20190522-SDOI2018-Strategic-Game/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.luogu.org/problemnew/show/P4606" target="_blank" rel="noopener">「SDOI 2018」战略游戏（Luogu 4606）</a></p>
<p>给定 $n$ 个点 $m$ 条边的无向图，$q$ 次询问，每次询问点集 $S$，求图中有多少个点满足删掉它之后 $S$ 中至少两个点不联通。</p>
<p>$n, q \le 10^5, m, \sum \vert S \vert \le 2 \times 10^5$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><blockquote>
<p>圆方树上建虚树，欢乐多又多</p>
</blockquote>
<p>其实这是广义圆方树和虚树的学习笔记。</p>
<p>不难发现答案为 $S$ 在广义圆方树上形成的虚树中的圆点个数减去 $\vert S \vert$。建出广义圆方树和虚树即可。</p>
<p>时间复杂度 $O(n \log n)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>, maxm = <span class="number">2</span> * maxn, maxk = <span class="number">2</span> * maxm, logk = <span class="number">18</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T, n, m, q, tm, cnt, dfn[maxn + <span class="number">3</span>], low[maxn + <span class="number">3</span>], top, st[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> tot, ter[maxk + <span class="number">3</span>], nxt[maxk + <span class="number">3</span>], lnk[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">tm_t</span>, <span class="keyword">dfn_t</span>[maxm + <span class="number">3</span>], dep[maxm + <span class="number">3</span>], fa[maxm + <span class="number">3</span>], sz[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> pnt[maxk + <span class="number">3</span>][logk + <span class="number">3</span>], lg[maxk + <span class="number">3</span>], id[maxm + <span class="number">3</span>], ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ter[++tot] = v, nxt[tot] = lnk[u], lnk[u] = tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_vec</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	G[u].push_back(v), G[v].push_back(u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dfn[u] = low[u] = ++tm;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	vis[u] = <span class="literal">true</span>, st[++top] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = lnk[u], v; i; i = nxt[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = ter[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!dfn[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			tarjan(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			low[u] = min(low[u], low[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (low[v] &gt;= dfn[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add_vec(++cnt, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">do</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					add_vec(cnt, st[top]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125; <span class="keyword">while</span> (st[top--] != v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			low[u] = min(low[u], dfn[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	vis[u] = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_t</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">dfn_t</span>[u] = ++<span class="keyword">tm_t</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	pnt[<span class="keyword">tm_t</span>][<span class="number">0</span>] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sz[u] = sz[pa] + (u &lt;= n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; G[u].size(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = G[u][i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (v == pa) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dep[v] = dep[u] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		fa[v] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">dfs_t</span>(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		pnt[++<span class="keyword">tm_t</span>][<span class="number">0</span>] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	a = <span class="keyword">dfn_t</span>[a], b = <span class="keyword">dfn_t</span>[b];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (a &gt; b) swap(a, b);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> c = lg[b - a + <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	a = pnt[a][c], b = pnt[b - (<span class="number">1</span> &lt;&lt; c) + <span class="number">1</span>][c];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (dep[a] &lt;= dep[b]) <span class="keyword">return</span> a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">comp</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="keyword">dfn_t</span>[i] &lt; <span class="keyword">dfn_t</span>[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (x == st[<span class="number">1</span>]) <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> y = lca(x, st[top]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (y != st[top]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (top &gt; <span class="number">1</span> &amp;&amp; <span class="keyword">dfn_t</span>[y] &lt; <span class="keyword">dfn_t</span>[st[top - <span class="number">1</span>]]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans += sz[st[top]] - sz[st[top - <span class="number">1</span>]], top--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (<span class="keyword">dfn_t</span>[y] &gt; <span class="keyword">dfn_t</span>[st[top - <span class="number">1</span>]]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans += sz[st[top]] - sz[y];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			st[top] = y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans += sz[st[top--]] - sz[y];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	st[++top] = x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (T--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tot = <span class="number">0</span>, fill(lnk + <span class="number">1</span>, lnk + n + <span class="number">1</span>, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			add(u, v), add(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tm = <span class="keyword">tm_t</span> = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		fill(dfn + <span class="number">1</span>, dfn + n + <span class="number">1</span>, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cnt = n, top = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			G[i].clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!dfn[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			tarjan(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">dfs_t</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="keyword">tm_t</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			lg[i] = lg[i / <span class="number">2</span>] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; <span class="number">1</span> &lt;&lt; k &lt;= <span class="keyword">tm_t</span>; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = (<span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>)) + <span class="number">1</span>; i &lt;= <span class="keyword">tm_t</span> - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>; i++, j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (dep[pnt[i][k - <span class="number">1</span>]] &lt;= dep[pnt[j][k - <span class="number">1</span>]]) pnt[i][k] = pnt[i][k - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">else</span> pnt[i][k] = pnt[j][k - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (q--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;id[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> x = lca(id[<span class="number">1</span>], id[<span class="number">2</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				x = lca(x, id[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			sort(id + <span class="number">1</span>, id + m + <span class="number">1</span>, comp);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			top = <span class="number">0</span>, ans = (x &lt;= n) - m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			st[++top] = x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				insert(id[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; top; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				ans += sz[st[i + <span class="number">1</span>]] - sz[st[i]];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>圆方树</tag>
        <tag>虚树</tag>
      </tags>
  </entry>
  <entry>
    <title>「BZOJ 1718」Redundant Paths（Tarjan）</title>
    <url>/2019/05/21/20190521-BZOJ1718-Redundant-Paths/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1718" target="_blank" rel="noopener">「BZOJ 1718」Redundant Paths</a></p>
<p>给定一个 $n$ 个点 $m$ 条边的无向图，问至少再加几条边就能使得整个图形成一个边双联通分量。</p>
<p>边双联通分量的定义：一个图中的任意两个结点之间都有两条路径，满足它们的边没有交。</p>
<p>数据范围：$n, m \le 10^6$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>不难发现答案为：根据边双联通分量缩点后得到的森林中的每一个联通块的叶子结点的个数的一半向上取整之和。</p>
<p>时间复杂度 $O(n + m)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>, maxm = maxn * <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, u[maxm + <span class="number">3</span>], v[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> tm, dfn[maxn + <span class="number">3</span>], low[maxn + <span class="number">3</span>], top, st[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> cnt, bel[maxn + <span class="number">3</span>], deg[maxn + <span class="number">3</span>], cur;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> tot, ter[maxm + <span class="number">3</span>], nxt[maxm + <span class="number">3</span>], lnk[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ter[++tot] = v, nxt[tot] = lnk[u], lnk[u] = tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">adj</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> x &amp; <span class="number">1</span> ? x + <span class="number">1</span> : x - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> e = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dfn[u] = low[u] = ++tm;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    st[++top] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lnk[u], v; i; i = nxt[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        v = ter[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (!dfn[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            tarjan(v, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            low[u] = min(low[u], low[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i != adj(e)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            low[u] = min(low[u], dfn[v]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (dfn[u] == low[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        cnt++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">do</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            bel[st[top]] = cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">while</span> (st[top--] != u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (pa) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        cur -= (deg[u] == <span class="number">1</span>) + (deg[pa] == <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        deg[u]++, deg[pa]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        cur += (deg[u] == <span class="number">1</span>) + (deg[pa] == <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    vis[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lnk[u], v; i; i = nxt[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        v = ter[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (!vis[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            dfs(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u[i], &amp;v[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        add(u[i], v[i]), add(v[i], u[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (!dfn[i]) tarjan(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    tot = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        lnk[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="keyword">if</span> (bel[u[i]] != bel[v[i]]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        add(bel[u[i]], bel[v[i]]), add(bel[v[i]], bel[u[i]]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) <span class="keyword">if</span> (!vis[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        cur = <span class="number">0</span>, dfs(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ans += (cur + <span class="number">1</span>) / <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Tarjan</tag>
      </tags>
  </entry>
  <entry>
    <title>「GXOI / GZOI 2019」特技飞行（扫描线）</title>
    <url>/2019/05/20/20190520-Luogu5302-Aerobatics/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.luogu.org/problemnew/show/P5302" target="_blank" rel="noopener">「GXOI / GZOI 2019」特技飞行（Luogu 5302）</a></p>
<p>给定 $n$ 条线段，它们的起点和终点的 $x$ 坐标分别为 $Sx$ 和 $Tx$，$y$ 坐标在输入中给定。在两条线段 $l_1, l_2$ 交点，可以交换 $l_1, l_2$ 接下来的部分（变成两条折线）。交换或不交换分别可以获得固定的分数 $a$ 和 $b$。要求最后在 $x = Sx$ 处和 $x = Tx$ 处，折线保持相同的顺序。</p>
<p>另外有 $m$ 个观测点可以观测到一定范围内情况（曼哈顿距离），在观测范围内的点额外获得 $c$ 分。问如何交换可以获得最高的得分。保证交点小于等于 $k$ 个。</p>
<p>$n, m \le 10^5, k \le 5 \times 10^5$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>不难发现这是一道二合一的题目。</p>
<p>第一部分是安排交换方案。</p>
<p>交换数量最大的方案就是在所有交点处交换，这样一定是可行的。</p>
<p>交换数量最小的方案就是对于每个置换分别考虑。如果置换的大小为 $\text{Size}$，则需要交换 $\text{Size} - 1$ 次。</p>
<p>第二部分是对于每个交点计算是否被评委看到。</p>
<p>由于交点个数小，我们可以预处理出所有交点，然后将坐标系旋转 $45^{\circ}$ 进行二维数点即可。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	db x, y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">event</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> type, x, y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> event &amp;a, <span class="keyword">const</span> event &amp;b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> a.x &gt; b.x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ipoint</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> x, y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> ipoint &amp;a, <span class="keyword">const</span> ipoint &amp;b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> a.x &gt; b.x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>, maxm = <span class="number">2e5</span>, maxk = <span class="number">5e5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-8</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, k, a, b, c, tot, Sx, Tx, C, A1, A2, A3;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ord[maxn + <span class="number">3</span>], rnk[maxn + <span class="number">3</span>], r[maxn + <span class="number">3</span>], bit[maxk + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">point p[maxm + <span class="number">3</span>], ip[maxk + <span class="number">3</span>], gst[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">event e[maxk + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">ipoint pnt[maxk + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;db&gt; Vx, Vy;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; S;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i ^= i &amp; -i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		bit[i] += y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> y = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= k; i += i &amp; -i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		y += bit[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">comp</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> p[n + i].y &lt; p[n + j].y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_point</span><span class="params">(point &amp;pnt, db ly1, db ly2, db ry1, db ry2)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	db num = -(ly1 - ly2) / (ry1 - ry2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	pnt.x = (Sx + Tx * num) / (num + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	pnt.y = (ly1 + ry1 * num) / (num + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d %d %d %d %d"</span>, &amp;n, &amp;a, &amp;b, &amp;c, &amp;Sx, &amp;Tx);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, y; i &lt;= <span class="number">2</span> * n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;y), p[i].y = y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		p[i].x = i &lt;= n ? Sx : Tx;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ord[i] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sort(ord + <span class="number">1</span>, ord + n + <span class="number">1</span>, comp);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!vis[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = ord[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (x != i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			vis[x] = <span class="literal">true</span>, C++, x = ord[x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		rnk[ord[i]] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	S.insert(rnk[<span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it = S.end();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			it--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (*it &gt; rnk[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> x = ord[*it];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				get_point(ip[++k], p[i].y, p[x].y, p[n + i].y, p[n + x].y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (*it &lt; rnk[i] || it == S.begin()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		S.insert(rnk[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	A1 = a * k;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	A2 = a * C + b * (k - C);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;x, &amp;y, &amp;r[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		gst[i].x = x + y, gst[i].y = x - y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		db a = ip[i].x, b = ip[i].y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ip[i].x = a + b, ip[i].y = a - b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		Vx.push_back(ip[i].x), Vy.push_back(ip[i].y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sort(Vx.begin(), Vx.end());</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sort(Vy.begin(), Vy.end());</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		pnt[i].x = lower_bound(Vx.begin(), Vx.end(), ip[i].x - <span class="number">.01</span>) - Vx.begin() + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		pnt[i].y = lower_bound(Vy.begin(), Vy.end(), ip[i].y - <span class="number">.01</span>) - Vy.begin() + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		db lx = gst[i].x - r[i] - eps, rx = gst[i].x + r[i] + eps;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		db ly = gst[i].y - r[i] - eps, ry = gst[i].y + r[i] + eps;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> Lx = lower_bound(Vx.begin(), Vx.end(), lx) - Vx.begin() + <span class="number">1</span> - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> Rx = upper_bound(Vx.begin(), Vx.end(), rx) - Vx.begin();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> Ly = lower_bound(Vy.begin(), Vy.end(), ly) - Vy.begin() + <span class="number">1</span> - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> Ry = upper_bound(Vy.begin(), Vy.end(), ry) - Vy.begin();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		e[++tot].type = <span class="number">1</span>, e[tot].x = Lx, e[tot].y = Ly;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		e[++tot].type = <span class="number">-1</span>, e[tot].x = Lx, e[tot].y = Ry;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		e[++tot].type = <span class="number">-1</span>, e[tot].x = Rx, e[tot].y = Ly;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		e[++tot].type = <span class="number">1</span>, e[tot].x = Rx, e[tot].y = Ry;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sort(pnt + <span class="number">1</span>, pnt + k + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sort(e + <span class="number">1</span>, e + tot + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> cur = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (cur &lt;= tot &amp;&amp; e[cur].x &gt;= pnt[i].x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			add(e[cur].y, e[cur].type);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			cur++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (sum(pnt[i].y)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			A3++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	A3 *= c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (A1 &gt; A2) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		swap(A1, A2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, A1 + A3, A2 + A3);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>扫描线</tag>
      </tags>
  </entry>
  <entry>
    <title>「学习笔记」Pollard-Rho 因数分解算法</title>
    <url>/2019/05/10/20190510-Pollard-Rho/</url>
    <content><![CDATA[<p>Pollard-Rho 算法可以用期望 $O(\sqrt[4]{n})$ 的时间找到合数 $n$ 的一个非平凡因子。</p>
<h1 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h1><p>这里讲解改进后的 Pollard-Rho 算法变种。</p>
<p>在一次 Pollard-Rho 中，我们随机一个数 $c$，并设定阈值 $k$，初始为 $2$，每次循环后加倍。</p>
<p>对于每一次循环，令 $y$ 等于当前的 $x$，然后进行 $k$ 次，每次让 $x \leftarrow f(x) = (x ^ 2 + c) \bmod n$，然后检查 $\vert x - y \vert$ 和 $n$ 是否有非平凡的 $\gcd$，如果有则退出循环。</p>
<a id="more"></a>
<p>实践后发现这样速度较快，这可说明该算法的复杂度较低，但是笔者不会严格证明算法的复杂度。有一个小优化，就是每次不直接检查 $\gcd$，而是将变量 $z \leftarrow z \times \vert x - y \vert$。进行 $B$ 次乘法后只要检查一次 $z$ 和 $n$ 的 $\gcd$ 即可。这可以节省 $\gcd$ 使用的时间，$B$ 一般使用 $128$。</p>
<p>Pollard-Rho 结合 Miller-Rabin 可以实现快速素因数分解。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p><a href="https://www.luogu.org/problemnew/show/P4718" target="_blank" rel="noopener">「模板」Pollard-Rho 算法（Luogu 4718）</a><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T;</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll n, ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mult</span><span class="params">(<span class="keyword">const</span> ll &amp;a, <span class="keyword">const</span> ll &amp;b, <span class="keyword">const</span> ll &amp;m)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> (__int128) a * b % m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">func</span><span class="params">(<span class="keyword">const</span> ll &amp;x, <span class="keyword">const</span> ll &amp;n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> x &lt; n ? x : x - n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll b, ll m)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ll c = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = mult(a, a, m)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = mult(a, c, m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">miller</span><span class="params">(ll m, ll d, ll r, ll n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (m &gt; n - <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ll x = qpow(m, d, n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span> || x == n - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        x = mult(x, x, n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (x == n - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(ll n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) <span class="keyword">return</span> n == <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">static</span> ll m[] = &#123; <span class="number">2</span>, <span class="number">325</span>, <span class="number">9375</span>, <span class="number">28178</span>, <span class="number">450775</span>, <span class="number">9780504</span>, <span class="number">1795265022</span> &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ll d = n - <span class="number">1</span>, r = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (~d &amp; <span class="number">1</span>) d /= <span class="number">2</span>, r++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (!miller(m[i], d, r, n)) <span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">randl</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> rand() | ((ll) rand() &lt;&lt; <span class="number">31</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> b ? gcd(b, a % b) : a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">absl</span><span class="params">(ll x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">0</span> ? -x : x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">factor</span><span class="params">(ll n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ll c = randl() % (n - <span class="number">1</span>) + <span class="number">1</span>, x = <span class="number">0</span>, y = <span class="number">0</span>, d = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (ll k = <span class="number">2</span>, t = <span class="number">1</span>; ; k *= <span class="number">2</span>, y = x, t = <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            x = func(mult(x, x, n) + c, n), t = mult(t, absl(x - y), n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (!(i &amp; <span class="number">127</span>) &amp;&amp; (d = gcd(t, n)) &gt; <span class="number">1</span>) <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (d &gt; <span class="number">1</span> || (d = gcd(t, n)) &gt; <span class="number">1</span>) <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> d;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(ll n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n &lt;= ans) <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (is_prime(n)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ans = n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ll x = factor(n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (x == n) x = factor(n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (n % x == <span class="number">0</span>) n /= x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    solve(x), solve(n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    srand(time(<span class="number">0</span>) ^ T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (T--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        solve(n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (ans == n) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">puts</span>(<span class="string">"Prime"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>「学习笔记」Miller-Rabin 素数测试</title>
    <url>/2019/05/08/20190508-Miller-Rabin/</url>
    <content><![CDATA[<p>Miller-Rabin 素数测试算法是一种能够快速检验一个数是否为素数的算法。</p>
<h1 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h1><p>费马小定理：如果 $n$ 为素数，那么对于 $\forall 1 \le a \le n - 1$，都有 $a^{n - 1} \equiv 1 \bmod n$。</p>
<p>二次探测法：如果 $n$ 为素数，那么方程 $a^2 \equiv 1 \bmod n$ 只有两个解：$a_1 = 1, a_2 = n - 1$。</p>
<p>于是我们可以设计一个算法，对于一个特定的 $a$ 来检验。</p>
<a id="more"></a>
<p>现将 $n - 1$ 表示成 $n - 1 = 2^d \times r$ 的形式，其中 $r$ 为奇数。那么我们依次检验 $a^r, a^{2r}, a^{4r}, \cdots, a^{2^d \times r}$ 是否为 $1$ 或 $n - 1$。如果没有一个数是 $1$ 或 $n - 1$，那么 $n$ <strong>一定不</strong>是素数。</p>
<p>注意如果满足上述性质，那么 $n$ <strong>不一定</strong>是素数；但是如果不满足，$n$ <strong>一定不</strong>是素数。所以我们要进行多次检验。</p>
<h1 id="检验需知"><a href="#检验需知" class="headerlink" title="检验需知"></a>检验需知</h1><ul>
<li>在 <code>int</code> 范围内，只需检验 $2, 7, 61$ 即可保证正确性。  </li>
<li>在 <code>long long</code> 范围内，只需检验 $2, 325, 9375, 28178, 450775, 9780504, 1795265022$。  </li>
<li>当 $n \le 4 \times 10^{13}$ 时，只需检验 $2, 2570940, 211991001, 3749873356$。  </li>
<li>当 $n \le 3 \times 10^{15}$ 时，只需检验 $2, 2570940, 880937, 610386380, 4130785767$。</li>
</ul>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T;</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll n;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mult</span><span class="params">(<span class="keyword">const</span> ll &amp;x, <span class="keyword">const</span> ll &amp;y, <span class="keyword">const</span> ll &amp;n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> (__int128) x * y % n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">ll _pow(ll a, ll b, ll n) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll c = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = mult(a, a, n)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = mult(a, c, n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">miller</span><span class="params">(ll m, ll d, ll r, ll n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (m &gt; n - <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll x = _pow(m, d, n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (x == <span class="number">1</span> || x == n - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x = mult(x, x, n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (x == n - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(ll n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (n &lt;= <span class="number">2</span>) <span class="keyword">return</span> n == <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">static</span> ll m[] = &#123; <span class="number">2</span>, <span class="number">325</span>, <span class="number">9375</span>, <span class="number">28178</span>, <span class="number">450775</span>, <span class="number">9780504</span>, <span class="number">1795265022</span> &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ll d = n - <span class="number">1</span>, r = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (~d &amp; <span class="number">1</span>) d &gt;&gt;= <span class="number">1</span>, r++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!miller(m[i], d, r, n)) <span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (T--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, is_prime(n) ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>「GXOI / GZOI 2019」旅行者（最短路）</title>
    <url>/2019/05/04/20190504-GXOI2019-Tourist/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://www.luogu.org/problemnew/show/P5304" target="_blank" rel="noopener">「GXOI / GZOI 2019」旅行者（Luogu 5304）</a></p>
<p>给定一个有 $n$ 个结点，$m$ 条边的带权有向图和 $k$ 个关键点，求     $k$ 个点两两之间最短路长度的最小值。</p>
<p>$n \le 10^5, m \le 5 \times 10^5$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p><strong>算法一</strong></p>
<p>将关键点的编号转化为二进制。发现如果两个数不同，那么它们二进制位至少有一位不同。那么对于每一个二进制位计算这位为 $0$ 的点到这位为 $1$ 的点的最短路，最后再取最小值即可。</p>
<p>时间复杂度 $O(n \log^2 n)$。</p>
<p><strong>算法二</strong></p>
<p>对原图和反图做多源最短路，对于图上每个点染色，得到每个关键点的控制范围。然后对于每条边如果它两端的结点颜色不同则拿经过它的这条路径的长度来更新答案。</p>
<p>时间复杂度 $O(n \log n)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>使用方法二实现。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="keyword">int</span>&gt; P;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>, maxm = <span class="number">5e5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ll inf = ll(<span class="number">1e18</span> + <span class="number">.5</span>) + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T, n, m, k, a[maxn + <span class="number">3</span>], u[maxm + <span class="number">3</span>], v[maxm + <span class="number">3</span>], w[maxm + <span class="number">3</span>], col[<span class="number">2</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> tot, ter[maxm + <span class="number">3</span>], wei[maxm + <span class="number">3</span>], nxt[maxm + <span class="number">3</span>], lnk[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">ll dist[<span class="number">2</span>][maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">priority_queue&lt;P&gt; H;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ter[++tot] = v, wei[tot] = w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	nxt[tot] = lnk[u], lnk[u] = tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dist[t][i] = inf, col[t][i] = <span class="number">0</span>, vis[i] = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dist[t][a[i]] = <span class="number">0</span>, col[t][a[i]] = a[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		H.push(P(<span class="number">0l</span>l, a[i]));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (!H.empty()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> u = H.top().second;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		H.pop();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (vis[u]) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		vis[u] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = lnk[u], v, w; i; i = nxt[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			v = ter[i], w = wei[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (dist[t][u] + w &lt; dist[t][v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				dist[t][v] = dist[t][u] + w, col[t][v] = col[t][u];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				H.push(P(-dist[t][v], v));</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (T--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u[i], &amp;v[i], &amp;w[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; <span class="number">2</span>; t++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			tot = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				lnk[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (!t) add(u[i], v[i], w[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">else</span> add(v[i], u[i], w[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dijkstra(t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ll ans = inf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (col[<span class="number">0</span>][u[i]] &amp;&amp; col[<span class="number">1</span>][v[i]] &amp;&amp; col[<span class="number">0</span>][u[i]] != col[<span class="number">1</span>][v[i]]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				ans = min(ans, dist[<span class="number">0</span>][u[i]] + dist[<span class="number">1</span>][v[i]] + w[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>「十二省联考 2019」希望（组合计数 + 动态规划 + 长链剖分）</title>
    <url>/2019/05/03/20190503-LOJ3053-Hope/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><blockquote>
<p>我们所可以自慰的，想来想去，也还是所谓对于将来的希望。<br>希望是附丽于存在的，有存在，便有希望，有希望，便是光明。</p>
</blockquote>
<p><a href="https://loj.ac/problem/3053" target="_blank" rel="noopener">「十二省联考 2019」希望（LOJ 3053）</a></p>
<p>给定一棵 $n$ 个结点的树以及两个数 $L, k$。对于树上的一个连通快 $S$，定义 $R(S)$ 为在 $S$ 中且离 $S$ 中的每个点距离都不超过 $L$ 的点集。问任选 $k$ 个联通快 $S_1, S_2, \cdots, S_k$，使得 $R(S_1), R(S_2), \cdots, R(S_n)$ 有交的方案数 $\bmod 998244353$ 的结果。</p>
<p>数据范围：$n, L \le 10^6$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p><img src="https://img2018.cnblogs.com/blog/1504072/201904/1504072-20190412111829344-1064102245.jpg" alt=""></p>
<h2 id="第一部分：初步转化"><a href="#第一部分：初步转化" class="headerlink" title="第一部分：初步转化"></a>第一部分：初步转化</h2><p>容易发现 $R(S)$ 也是一个联通块。联通块有如下的性质：</p>
<ul>
<li>联通块和联通块的交还是联通块</li>
<li>非空联通块的点数等于边数 $+1$</li>
</ul>
<p>于是答案就可以转化为：</p>
<script type="math/tex; mode=display">\sum_{i=1}^{n} f(i)^k - \sum_{i=2}^{n} g(i)^k</script><p>其中 $f(i)$ 表示有多少个 $S$ 满足 $i \in R(S)$，$g(i)$ 表示有多少个 $S$ 满足 $i, \text{fa}(i) \in R(S)$。</p>
<h2 id="第二部分：dp-建模"><a href="#第二部分：dp-建模" class="headerlink" title="第二部分：dp 建模"></a>第二部分：dp 建模</h2><p>考虑 DP。设计如下状态：</p>
<ul>
<li>$\text{dp}(i, k)$ 满足在 $i$ 子树内有多少个包含 $i$ 的联通块，满足其中的所有点到 $i$ 的距离不超过 $k$  </li>
<li>$\text{up}(i, k)$ 表示在 $i$ 子树外（包含 $i$）有多少个包含 $i$ 的联通块，满足其中的所有点到 $i$ 的距离不超过 $k$。</li>
</ul>
<p>发现 $f(i) = \text{dp}(i, L) \times \text{up}(i, L)$，$g(i) = \text{dp}(i, L - 1) \times (\text{up}(i, L) - 1)$。可以通过计算 $\text{dp}, \text{up}$ 得到 $f, g$。</p>
<p>列出状态转移方程：</p>
<ul>
<li>$\text{dp}(i, k) = \prod_{j \in \text{ch}(i)} \text{dp}(j, k - 1) + 1$  </li>
<li>$\text{up}(i, k) = \text{up}(\text{fa}(i, k - 1)) \times \prod_{j \in \text{ch}(\text{fa}(i)), j \neq i} \text{dp}(j, k - 2) + 1$</li>
</ul>
<p>于是我们得到了 $O(nL)$ 的做法，期望得分 $36$ 分。</p>
<p>至此难度不大于 NOIP 提高组。</p>
<h2 id="第三部分：长链剖分"><a href="#第三部分：长链剖分" class="headerlink" title="第三部分：长链剖分"></a>第三部分：长链剖分</h2><p>最难部分。</p>
<p>这个 DP 是和深度有关的，容易想到长链剖分优化。</p>
<p>先考虑优化 DP 数组的转移。我们设当前结点为 $u$，当前儿子结点为 $v$。我们需要把短儿子依次合并到长儿子上面。</p>
<p>但是有一个问题：对于深度大于短儿子深度的部分，我们要将其整体乘上 $\text{dp}(v, d(v))$，其中 $d(i)$ 表示点 $i$ 往下延伸的最长长度。我们发现要乘上一个数的后缀长度很大，是 $O(d(u) - d(v))$ 级别的，但是长链剖分要求合并的复杂度为 $O(d(v))$ 才能够做到线性。</p>
<p>于是我们考虑维护整体乘标记。把后缀乘法操作转化为先整体乘一个数，再将对应的前缀乘这个数的逆元。我们还要维护整体加标记，因为每次做完一个结点后，我们要将它的 DP 值 $+1$。此外，为了方便转移，也要维护整体乘标记的逆元。</p>
<p>乍一看算法好像是正确的，其实不然。注意到 $\text{dp}(v, d(v))$ 可能不存在逆元，这样后缀乘法操作就变成了后缀变 $0$ 操作。所以还需维护一个后缀变 $x$ 标记，其中 $x$ 与乘法标记相乘再加上加法标记等于 $0$。</p>
<p>再考虑优化 $\text{up}$ 数组的转移。考虑先转移短儿子，再转移长儿子。</p>
<p>我们发现短儿子所用到的 $\text{up}$ 值的深度范围是 $d(v)$ 级别的，所以可以直接转移。</p>
<p>而长儿子可以打标记 + 将所有短儿子转移过来，复杂度为所有短儿子 $d$ 之和，也是均摊线性的。</p>
<p>现在主要的问题就是如何维护某个点的所有 “兄弟” 的 DP 值之积。发现它一定是一个前缀积和一个后缀积相乘。我们将 $u$ 的所有儿子倒过来考虑，前缀积可以通过在之前计算 $dp$ 值的时候将有更改的位置预先存起来，后缀积则可以边扫边更新。</p>
<p>此时离正解已经很接近了，可是求一个数逆元的复杂度还是带有 $\log$。所以时间复杂度为 $O(n \log n)$。</p>
<h2 id="第四部分：离线求逆元"><a href="#第四部分：离线求逆元" class="headerlink" title="第四部分：离线求逆元"></a>第四部分：离线求逆元</h2><p>要做到严格线性，就要将求逆元的过程优化。</p>
<p>发现需要求的逆元只有 $h(i)$，其中 $h(i)$ 表示 $i$ 的子树内有多少个包含 $i$ 的联通块。这显然是可以预先线性地 DP 出来的。所以问题就变成了给定 $a_1, a_2, \cdots, a_n$，求 $a_1^{-1}, a_2^{-1}, \cdots, a_n^{-1} \mod 998244353$。</p>
<p>我们令 $A(i) = \prod_{j = 1}^{i} a_i$，可以先正着做一次前缀积求解 $A(i)$，然后通过 $A(n)$ 得出 $A(n)^{-1}$，最后反着做一次后缀积来求解 $A(i)^{-1}$。又有 $a_i = A(i)^{-1} \times A(i - 1)$，于是我们就可以线性求出逆元。</p>
<p>至此题目已经完美解决，时间复杂度 $O(n)$，期望得分 $100$ 分。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>, maxm = <span class="number">2</span> * maxn, mod = <span class="number">998244353</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, L, k, d[maxn + <span class="number">3</span>], ch[maxn + <span class="number">3</span>], f[maxn + <span class="number">3</span>][<span class="number">2</span>], g[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> _pow(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> c = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="number">1l</span>l * a * a % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = <span class="number">1l</span>l * a * c % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x &lt; <span class="number">0</span> ? x + mod : x &lt; mod ? x : x - mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> prework &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> f[maxn + <span class="number">3</span>], cnt, id[maxn + <span class="number">3</span>], p[maxn + <span class="number">3</span>], ip[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[u] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> v: G[u]) <span class="keyword">if</span> (v != pa) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dfs(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			f[u] = <span class="number">1l</span>l * f[u] * f[v] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (d[v] + <span class="number">1</span> &gt; d[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				d[u] = d[v] + <span class="number">1</span>, ch[u] = v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[u] = func(f[u] + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (f[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			id[++cnt] = u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		p[<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			p[i] = <span class="number">1l</span>l * p[i - <span class="number">1</span>] * f[id[i]] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ip[cnt] = _pow(p[cnt], mod - <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = cnt; i; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ip[i - <span class="number">1</span>] = <span class="number">1l</span>l * ip[i] * f[id[i]] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			f[id[i]] = <span class="number">1l</span>l * ip[i] * p[i - <span class="number">1</span>] % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> f[x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> a, ia, b, p, q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">vector</span>&lt;pii&gt; P;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;node&gt; hist[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> get_dp &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> arr[<span class="number">2</span> * maxm + <span class="number">3</span>], *cur = arr, *dp[maxm + <span class="number">3</span>], a[maxm + <span class="number">3</span>], ia[maxm + <span class="number">3</span>], b[maxm + <span class="number">3</span>], p[maxm + <span class="number">3</span>], q[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> d)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> (<span class="number">1l</span>l * a[u] * (d &gt;= p[u] ? q[u] : dp[u][d]) + b[u]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> d, <span class="keyword">bool</span> flag = <span class="literal">true</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> &amp;ca = a[u], &amp;cia = ia[u], &amp;cb = b[u], &amp;cp = p[u], &amp;cq = q[u];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		node t;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		t.a = ca, t.ia = cia, t.b = cb, t.p = cp, t.q = cq;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= d; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			t.P.push_back(pii(i, dp[u][i]));</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> val = query(v, i - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (i == cp) dp[u][cp++] = cq;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dp[u][i] = <span class="number">1l</span>l * cia * func(<span class="number">1l</span>l * query(u, i) * val % mod - cb) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (d &lt; L) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> val = query(v, d);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (!val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				cp = d + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				cq = func(mod - <span class="number">1l</span>l * cia * cb % mod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				t.P.push_back(pii(<span class="number">0</span>, dp[u][<span class="number">0</span>]));</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> inv = prework::query(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= d; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					dp[u][i] = <span class="number">1l</span>l * cia * func(<span class="number">1l</span>l * query(u, i) * inv % mod - cb) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				ca = <span class="number">1l</span>l * ca * val % mod, cb = <span class="number">1l</span>l * cb * val % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				cia = <span class="number">1l</span>l * cia * inv % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (flag) hist[u].push_back(t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> &amp;ca = a[u], &amp;cia = ia[u], &amp;cb = b[u], &amp;cp = p[u], &amp;cq = q[u];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ca = cia = <span class="number">1</span>, cp = L + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (ch[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dp[ch[u]] = dp[u] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dfs(ch[u], u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ca = a[ch[u]], cia = ia[ch[u]], cb = b[ch[u]], cp = p[ch[u]], cq = q[ch[u]];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			cb = <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			f[u][<span class="number">0</span>] = f[u][<span class="number">1</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dp[u][<span class="number">0</span>] = <span class="number">1l</span>l * cia * (mod - cb + <span class="number">1</span>) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> v: G[u]) <span class="keyword">if</span> (v != pa &amp;&amp; v != ch[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dp[v] = cur, cur += d[v] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dfs(v, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			update(u, v, min(d[v], L));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cb = func(cb + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[u][<span class="number">0</span>] = func(query(u, min(d[u], L)) - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		f[u][<span class="number">1</span>] = func(query(u, min(d[u], L - <span class="number">1</span>)) - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dp[<span class="number">1</span>] = cur, cur += d[<span class="number">1</span>] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">back</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		node t = hist[u].back();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		hist[u].pop_back();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a[u] = t.a, ia[u] = t.ia, b[u] = t.b, p[u] = t.p, q[u] = t.q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (pii p: t.P) dp[u][p.first] = p.second;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> get_dp::dp;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> get_up &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> arr[<span class="number">2</span> * maxn + <span class="number">3</span>], *cur = arr, *up[maxn + <span class="number">3</span>], a[maxn + <span class="number">3</span>], ia[maxn + <span class="number">3</span>], b[maxn + <span class="number">3</span>], p[maxn + <span class="number">3</span>], q[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> d)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> (<span class="number">1l</span>l * a[u] * (d &gt;= p[u] ? q[u] : up[u][d]) + b[u]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa = <span class="number">0</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (d[u] &gt;= L) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			up[u][<span class="number">0</span>] = <span class="number">1l</span>l * ia[u] * (mod + <span class="number">1</span> - b[u]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		g[u] = query(u, L);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!ch[u]) <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> &amp;ca = a[ch[u]], &amp;cia = ia[ch[u]], &amp;cb = b[ch[u]], &amp;cp = p[ch[u]], &amp;cq = q[ch[u]];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ca = a[u], cia = ia[u], cb = b[u], cp = p[u], cq = q[u];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> v: G[u]) <span class="keyword">if</span> (v != pa &amp;&amp; v != ch[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			x = max(x, d[v] + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x = min(x, L);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> v = u + n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dp[v] = get_dp::cur, get_dp::cur += x + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		get_dp::a[v] = get_dp::ia[v] = get_dp::b[v] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		get_dp::p[v] = L + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		reverse(G[u].begin(), G[u].end());</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> ta = <span class="number">1</span>, tia = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> t: G[u]) <span class="keyword">if</span> (t != pa &amp;&amp; t != ch[u]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			get_dp::back(u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> l = max(<span class="number">0</span>, L - d[t]), r = L;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			up[t] = cur + d[t] - l;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			cur = up[t] + r + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = max(l, <span class="number">1</span>); i &lt;= r; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				up[t][i] = <span class="number">1l</span>l * query(u, i - <span class="number">1</span>) * get_dp::query(u, min(i - <span class="number">1</span>, d[u])) % mod * get_dp::query(v, min(i - <span class="number">1</span>, x)) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			a[t] = ia[t] = b[t] = <span class="number">1</span>, p[t] = L + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			get_dp::update(v, t, min(d[t], L), <span class="literal">false</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (x + <span class="number">1</span> &lt;= L) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> val = get_dp::query(t, d[t]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (!val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					cp = min(cp, d[t] + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">					cq = func(mod - <span class="number">1l</span>l * cia * cb % mod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					ta = <span class="number">1l</span>l * ta * val % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					tia = <span class="number">1l</span>l * tia * prework::query(t) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dfs(t, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> t = ch[u];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		up[t] = up[u] - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> l = max(<span class="number">0</span>, L - d[t]), r = L;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cp = max(cp, l);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (cp &lt;= r &amp;&amp; cp &lt;= x + <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			up[t][cp++] = cq;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = max(l, <span class="number">1</span>); i &lt;= r &amp;&amp; i &lt;= x; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			up[t][i] = <span class="number">1l</span>l * cia * (<span class="number">1l</span>l * query(u, i - <span class="number">1</span>) * get_dp::query(v, i - <span class="number">1</span>) % mod + mod - cb) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (x + <span class="number">1</span> &lt;= r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				up[t][i] = <span class="number">1l</span>l * cia * (<span class="number">1l</span>l * query(t, i) * tia % mod + mod - cb) % mod; </span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (x + <span class="number">1</span> &lt;= r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ca = <span class="number">1l</span>l * ca * ta % mod, cb = <span class="number">1l</span>l * cb * ta % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			cia = <span class="number">1l</span>l * cia * tia % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		cb = func(cb + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(t, u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		a[<span class="number">1</span>] = ia[<span class="number">1</span>] = b[<span class="number">1</span>] = <span class="number">1</span>, p[<span class="number">1</span>] = L + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		up[<span class="number">1</span>] = (cur += d[<span class="number">1</span>]), cur += L + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dfs(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;L, &amp;k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		G[u].push_back(v), G[v].push_back(u);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	prework::main();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	get_dp::main();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	get_up::main();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans = (ans + _pow(<span class="number">1l</span>l * f[i][<span class="number">0</span>] * g[i] % mod, k)) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans = func(ans - _pow(<span class="number">1l</span>l * f[i][<span class="number">1</span>] * func(g[i] - <span class="number">1</span>) % mod, k));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>动态规划</tag>
        <tag>组合计数</tag>
        <tag>长链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title>「WF 2012」Chips Challenge（费用流）</title>
    <url>/2019/04/17/20190417-WF2012-Chips-Challenge/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://vjudge.net/problem/UVA-1104" target="_blank" rel="noopener">「WF 2012」Chips Challenge（UVA 1104）</a></p>
<p>给定一个 $n \times n$ 的棋盘，有些格子已经放上了黑色或白色的棋子。要求你在剩下的格子中摆放棋子，满足条件：</p>
<ul>
<li>第 $i$ 行的黑子个数等于第 $i$ 列的黑子个数。  </li>
<li>每行的黑子个数不大于总黑子个数的 $\frac{A}{B}$。</li>
</ul>
<p>求最多再放多少黑子。</p>
<p>数据范围：$n \le 50$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>枚举每行每列最多放 $k$ 枚黑子，这样第二个限制就变成了总黑子数量不能超过 $\frac{B \cdot k}{A}$。</p>
<p>考虑建图：</p>
<ul>
<li>$S$ 向 $R_i$ 连边，代价为 $0$，流量为这一行最多可能摆放的黑子数量。  </li>
<li>$C_i$ 向 $T$ 连边，代价为 $0$，流量为这一列最多可能摆放的黑子数量。  </li>
<li>$R_i$ 向 $C_i$ 连边，代价为 $0$，流量为 $k$。  </li>
<li>如果 $(i, j)$ 可以不放零件，那么 $R_i$ 向 $C_j$ 连边，代价为 $1$，流量为 $1$。</li>
</ul>
<p>图中流量的含义：先走第 $4$ 类边表示放置白子，之后如果有可行解，那么残量网络必定左右对称并且和 $S, T$ 相邻的边的的容量都不大于 $k$，这样就可以给剩下的格子全部放上黑子。</p>
<p>于是我们可以发现，如果网络满流，就形成了一个可行方案。而满流情况下最小的费用就是最少放置白子的数量。</p>
<p>时间复杂度 $O(n \times \text{MCMF}(n, n^2))$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50</span>, maxv = <span class="number">102</span>, maxe = <span class="number">2</span> * maxn * (maxn + <span class="number">3</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> s[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T, n, A, B, a[maxn + <span class="number">3</span>][maxn + <span class="number">3</span>], Rc[maxn + <span class="number">3</span>], Cc[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> tot, ter[maxe + <span class="number">3</span>], nxt[maxe + <span class="number">3</span>], len[maxe + <span class="number">3</span>], wei[maxe + <span class="number">3</span>], lnk[maxv + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> l)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ter[++tot] = v, wei[tot] = w, len[tot] = l;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	nxt[tot] = lnk[u], lnk[u] = tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_fedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> l)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	add_edge(u, v, w, l), add_edge(v, u, <span class="number">0</span>, -l);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">adj</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x &amp; <span class="number">1</span> ? x + <span class="number">1</span> : x - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> mcmf &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> sz, src, snk;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">bool</span> in[maxv + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> dist[maxv + <span class="number">3</span>], lst[maxv + <span class="number">3</span>], mn[maxv + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		sz = n, src = s, snk = t;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> &amp;mc, <span class="keyword">int</span> &amp;mf)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dist));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">memset</span>(lst, <span class="number">0</span>, <span class="keyword">sizeof</span>(lst));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">memset</span>(mn, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(mn));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		dist[src] = <span class="number">0</span>, in[src] = <span class="literal">true</span>, Q.push(src);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (!Q.empty()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> u = Q.front();</span></pre></td></tr><tr><td class="code"><pre><span class="line">			in[u] = <span class="literal">false</span>, Q.pop();</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = lnk[u], v, w, l; i; i = nxt[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				v = ter[i], w = wei[i], l = len[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (w &amp;&amp; dist[u] + l &lt; dist[v]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					dist[v] = dist[u] + l, lst[v] = i, mn[v] = min(mn[u], w);</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">if</span> (!in[v]) in[v] = <span class="literal">true</span>, Q.push(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!lst[snk]) <span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		mf = mn[snk], mc = mf * dist[snk];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = snk;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (x != src) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			wei[lst[x]] -= mf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			wei[adj(lst[x])] += mf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			x = ter[adj(lst[x])];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> &amp;mc, <span class="keyword">int</span> &amp;mf)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		mc = mf = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> cc = <span class="number">0</span>, cf = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">while</span> (solve(cc, cf)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mc += cc, mf += cf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;A, &amp;B), n) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				a[i][j] = s[j] == <span class="string">'.'</span> ? <span class="number">-1</span> : s[j] == <span class="string">'/'</span> ? <span class="number">0</span> : <span class="number">1</span>; </span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			Rc[i] = Cc[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> cnt = <span class="number">0</span>, sum = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (a[i][j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					Rc[i]++, Cc[j]++, sum++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">if</span> (a[i][j] == <span class="number">1</span>) cnt++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> s = <span class="number">2</span> * n + <span class="number">1</span>, t = s + <span class="number">1</span>, ans = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= n; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			tot = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">memset</span>(lnk, <span class="number">0</span>, <span class="keyword">sizeof</span>(lnk));</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mcmf::init(t, s, t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add_fedge(s, i, Rc[i], <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add_fedge(i, i + n, k, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				add_fedge(i + n, t, Cc[i], <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">if</span> (a[i][j] == <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						add_fedge(i, j + n, <span class="number">1</span>, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> mc = <span class="number">0</span>, mf = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mcmf::main(mc, mf);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (mf == sum &amp;&amp; B * k &lt;= A * (sum - mc)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				ans = max(ans, sum - cnt - mc);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"Case %d: "</span>, ++T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (~ans) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"impossible"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title>「Codechef SKIRES」Ski Resort（最小割）</title>
    <url>/2019/04/14/20190414-Codechef-Ski-Resort/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="https://vjudge.net/problem/CodeChef-SKIRES" target="_blank" rel="noopener">「Codechef SKIRES」Ski Resort</a></p>
<p>给定 $n \times m$ 的网格图，每个格子有一个高度 $h_{i, j}$。给一个格子的高度增加 $x$ 需要花费 $x$ 的代价。你要调整某些格子的高度，使得不存在高度单调不下降的，从起点到终点的路径。求需要花费的最小代价。</p>
<p>数据范围：$n, m \le 50$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>看到 “不存在……的路径” 就想到最小割建图。但是直接对于每对相邻的格子建图不可行，因为一个格子高度的增加可能同时影响到与之相邻的几个格子。也就是说，如果需要使格子 $x$ 的高度比格子 $y_1, y_2, \cdots, y_k$ 大，所需要的代价不是 $\sum_{i = 1}^{k} \text{cost}(x, y_i)$，而是 $\max_{i = 1}^{k} \text{cost}(x, y_i)$，其中 $\text{cost}(x, y)$ 表示格子 $x$ 要比格子 $y$ 高需要花费的代价，也就是 $\max{0, h(y) - h(x) + 1}$。</p>
<p>所以，我们对于每个格子拆点，一起考虑它周围一圈的格子。例如对于下图中的格子：</p>
<p><img src="https://i.loli.net/2019/04/11/5caf63fc3e2dd.png" alt="图 1"></p>
<p>需要建如下结构的图：</p>
<p><img src="https://i.loli.net/2019/04/11/5caf63fc6c631.png" alt="图 2"></p>
<p>另外注意一些小细节：</p>
<ul>
<li>$-1$ 最好提前判掉，否则可能会引起不必要的麻烦。</li>
<li>起点和终点的建图需要特判，因为题意要求起点和终点的高度不能变化。</li>
</ul>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>本菜鸡的 Dinic 跑不过（明明各种优化都加满了啊 QAQ），所以使用了 ISAP 来实现最大流。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">12500</span>, maxm = <span class="number">4e4</span>, inf = <span class="number">1e9</span> + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[] = &#123; <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, dy[] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span> &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T, n, m, Rr, Cr, Rt, Ct, s, t, mx, a[maxn + <span class="number">3</span>], b[<span class="number">5</span>], c;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> tot, ter[maxm + <span class="number">3</span>], wei[maxm + <span class="number">3</span>], nxt[maxm + <span class="number">3</span>], lnk[maxn + <span class="number">3</span>], dep[maxn + <span class="number">3</span>], gap[maxn + <span class="number">3</span>], cur[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x, <span class="keyword">const</span> <span class="keyword">int</span> &amp;y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> (x - <span class="number">1</span>) * m + y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">adj</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> x &amp; <span class="number">1</span> ? x + <span class="number">1</span> : x - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> Rr, <span class="keyword">int</span> Cr, <span class="keyword">int</span> Rt, <span class="keyword">int</span> Ct)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (Rr == Rt &amp;&amp; Cr == Ct) <span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (<span class="built_in">abs</span>(Rr - Rt) + <span class="built_in">abs</span>(Cr - Ct) &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> a[id(Rr, Cr)] &gt;= a[id(Rt, Ct)];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">comp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> a[x] &gt; a[y];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ter[++tot] = v, wei[tot] = w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	nxt[tot] = lnk[u], lnk[u] = tot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_fedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	add_edge(u, v, w), add_edge(v, u, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ibfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">memset</span>(gap, <span class="number">0</span>, <span class="keyword">sizeof</span>(gap));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span>(dep));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dep[s] = <span class="number">1</span>, Q.push(s);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> u; !Q.empty(); ) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		u = Q.front(), Q.pop();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		gap[dep[u]]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = lnk[u], v, w; i; i = nxt[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			v = ter[i], w = wei[adj(i)];</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (dep[v]) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dep[v] = dep[u] + <span class="number">1</span>, Q.push(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow, <span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (u == t) <span class="keyword">return</span> flow;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = cur[u], v, w, x; i &amp;&amp; ans &lt; flow; i = nxt[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		v = ter[i], w = wei[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (w &amp;&amp; dep[v] == dep[u] - <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			cur[u] = i, x = dfs(v, min(flow - ans, w), s, t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans += x, wei[i] -= x, wei[adj(i)] += x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (ans &lt; flow) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!--gap[dep[u]]) dep[s] = mx + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		++gap[++dep[u]], cur[u] = lnk[u];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">flow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	ibfs(t, s);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">memcpy</span>(cur, lnk, <span class="keyword">sizeof</span>(lnk));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (dep[s] &lt;= mx) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ans += dfs(s, inf, s, t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (T--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;Rr, &amp;Cr, &amp;Rt, &amp;Ct);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[id(i, j)]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (check(Rr, Cr, Rt, Ct)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		s = id(Rr, Cr), t = id(Rt, Ct), mx = id(n, m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		tot = <span class="number">0</span>, <span class="built_in">memset</span>(lnk, <span class="number">0</span>, <span class="keyword">sizeof</span>(lnk));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (id(i, j) == s || id(i, j) == t) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>, x, y; k &lt; <span class="number">4</span>; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						x = i + dx[k], y = j + dy[k];</span></pre></td></tr><tr><td class="code"><pre><span class="line">						<span class="keyword">if</span> (x &lt; <span class="number">1</span> || x &gt; n || y &lt; <span class="number">1</span> || y &gt; m) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						<span class="keyword">if</span> (a[id(x, y)] &gt;= a[id(i, j)]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">							add_fedge(id(x, y), id(i, j), inf);</span></pre></td></tr><tr><td class="code"><pre><span class="line">						&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">							add_fedge(id(x, y), id(i, j), <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">						&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				c = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>, x, y; k &lt; <span class="number">4</span>; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					x = i + dx[k], y = j + dy[k];</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">if</span> (x &lt; <span class="number">1</span> || x &gt; n || y &lt; <span class="number">1</span> || y &gt; m) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">if</span> (a[id(x, y)] &gt;= a[id(i, j)]) b[++c] = id(x, y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				sort(b + <span class="number">1</span>, b + c + <span class="number">1</span>, comp);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">int</span> tmp = id(i, j);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= c; k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					++mx, add_fedge(b[k], mx, inf);</span></pre></td></tr><tr><td class="code"><pre><span class="line">					add_fedge(mx, tmp, a[b[k]] - a[id(i, j)] + <span class="number">1</span>), tmp = mx;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, flow(s, t));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>最小割</tag>
      </tags>
  </entry>
  <entry>
    <title>「清华集训 2017」某位歌姬的故事（组合计数 + 动态规划）</title>
    <url>/2019/04/01/20190401-UOJ346-Singer-Story/</url>
    <content><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p><a href="http://uoj.ac/problem/346" target="_blank" rel="noopener">「清华集训 2017」某位歌姬的故事（UOJ 346）</a></p>
<p>求满足下列条件的，长度为 $n$ 的正整数序列 $a$ 数量 $\bmod 998244353$ 的结果：</p>
<ul>
<li>$\forall a_i \le A$</li>
<li>$\forall i \in [1, Q], \max { a_{l_i}, a_{l_i + 1}, \cdots, a_{r_i} } = m_i$</li>
</ul>
<p>数据范围：$n, A \le 9 \times 10 ^ 8, Q \le 500$。</p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>先将序列离散化。对于离散化后的每一段，处理出这段可能达到的最大值。</p>
<p>考虑将限制按照最大值分组，最大值相同的限制一起处理，最后将每组的答案相乘得到总答案。其正确性是因为对于每段区间，它只会对包含它的限制的最小值（等于这段可能达到的最大值）贡献，所以贡献是不重不漏的。</p>
<p>于是问题就转化成了求满足下列条件的，长度为 $n’$ 的正整数序列 $a’$ 数量 $\bmod 998244353$ 的结果：</p>
<ul>
<li>$\forall a’_i \le A’$  </li>
<li>$\forall i \in [1, Q’], \max { a’_{l’_i}, a’_{l’_i + 1}, \cdots, a’_{r’_i} } = m’$</li>
</ul>
<p>可以使用 DP 的方法来求解该问题。令 $\text{len}_i$ 表示第 $i$ 段的长度，预处理 $\text{mn}_i$ 表示右端点为第 $i$ 段区间的限制中左端点所在段的最小值。令 $\text{dp}_{i, j}$ 表示考虑到第 $i$ 位，最后一个 $A ^ {\prime}$ 在第 $j$ 段上的方案数。有两种转移：</p>
<ul>
<li>$\text{dp}_{i, j} \leftarrow \text{dp}_{i - 1, j} \times (A ^ {\prime} - 1) ^ {\text{len}_i}  (j \in [\text{mn}_i, i - 1])$  </li>
<li>$\text{dp}_{i, i} \leftarrow \text{dp}_{i - 1, j} \times ((A ^ {\prime}) ^ {\text{len}_i} - (A ^ {\prime} - 1) ^ {\text{len}_i})  (j \in [0, i - 1])$</li>
</ul>
<p>总时间复杂度 $O(T \times Q^2 \times \log n)$。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">500</span>, maxm = <span class="number">2</span> * maxn, mod = <span class="number">998244353</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxn + <span class="number">3</span>], ok[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> T, n, q, A, l[maxn + <span class="number">3</span>], r[maxn + <span class="number">3</span>], a[maxn + <span class="number">3</span>], m, pos[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> M, L[maxm + <span class="number">3</span>], R[maxm + <span class="number">3</span>], mx[maxm + <span class="number">3</span>], mn[maxm + <span class="number">3</span>], Q, tm[maxn + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[maxm + <span class="number">3</span>][maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; V[maxm + <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; S;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> c = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="number">1l</span>l * a * a % mod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = <span class="number">1l</span>l * a * c % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> w)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">// dp[i][j] 表示前 i 位的最后一个当前最大值在 j 的方案数目</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, k = pos[<span class="number">1</span>]; i &lt;= n; i++, k = pos[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++) dp[i][j] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> x = Pow(w - <span class="number">1</span>, R[k] - L[k] + <span class="number">1</span>), y = Pow(w, R[k] - L[k] + <span class="number">1</span>) - x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		y &lt; <span class="number">0</span> ? y += mod : <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) <span class="keyword">if</span> (dp[i - <span class="number">1</span>][j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (j &gt;= mn[i]) dp[i][j] = (dp[i][j] + <span class="number">1l</span>l * x * dp[i - <span class="number">1</span>][j]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			dp[i][i] = (dp[i][i] + <span class="number">1l</span>l * y * dp[i - <span class="number">1</span>][j]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> res = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		res += dp[n][i], res &lt; mod ? <span class="number">0</span> : res -= mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">while</span> (T--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;q, &amp;A);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		m = <span class="number">0</span>, pos[++m] = <span class="number">1</span>, pos[++m] = n + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;l[i], &amp;r[i], &amp;a[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			pos[++m] = l[i], pos[++m] = r[i] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		sort(pos + <span class="number">1</span>, pos + m + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		m = unique(pos + <span class="number">1</span>, pos + m + <span class="number">1</span>) - (pos + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		M = m - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			L[i] = pos[i], R[i] = pos[i + <span class="number">1</span>] - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			V[i].clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			l[i] = lower_bound(pos + <span class="number">1</span>, pos + m + <span class="number">1</span>, l[i]) - pos;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			r[i] = upper_bound(pos + <span class="number">1</span>, pos + m + <span class="number">1</span>, r[i]) - (pos + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			V[l[i]].push_back(i), V[r[i] + <span class="number">1</span>].push_back(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		S.clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k: V[i]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (!vis[k]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					vis[k] = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					S.insert(a[k]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					S.erase(S.lower_bound(a[k]));</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			mx[i] = S.empty() ? <span class="number">-1</span> : *S.begin();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		Q = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			tm[++Q] = a[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		sort(tm + <span class="number">1</span>, tm + Q + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		Q = unique(tm + <span class="number">1</span>, tm + Q + <span class="number">1</span>) - (tm + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">int</span> ans = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			m = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (tm[i] == mx[j]) pos[++m] = j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) mn[j] = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= q; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span> (tm[i] == a[j]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					<span class="keyword">if</span> (!m) &#123; flag = <span class="literal">false</span>; <span class="keyword">break</span>; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					l[j] = lower_bound(pos + <span class="number">1</span>, pos + m + <span class="number">1</span>, l[j]) - pos;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					r[j] = upper_bound(pos + <span class="number">1</span>, pos + m + <span class="number">1</span>, r[j]) - (pos + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">					mn[r[j]] = max(mn[r[j]], l[j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (!flag) <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			ans = <span class="number">1l</span>l * ans * solve(m, tm[i]) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (!flag) &#123; <span class="built_in">puts</span>(<span class="string">"0"</span>); <span class="keyword">continue</span>; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (mx[i] == <span class="number">-1</span>) ans = <span class="number">1l</span>l * ans * Pow(A, R[i] - L[i] + <span class="number">1</span>) % mod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>动态规划</tag>
        <tag>组合计数</tag>
      </tags>
  </entry>
</search>
